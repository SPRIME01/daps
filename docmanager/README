---------------------------------------------------------------------
                               Docmanager
---------------------------------------------------------------------

Docmanager is a tool for managing your XML files (preferrebly with daps). 
It uses and creates SVN properties to get an overview of all your files.

The most important property is "doc:status"; it tracks the status of a
file. A initial state of a file is "editing". After it has been edited
it is changed to the "edited" state. A proofreader can search for all
edited files and sets these file list to state "proofing". After the
proofing has been finished, it is set to "proofed". Whenever something
is wrong with the file, a proofreader can track that with the "comments"
state.


---------------------------------------------------------------------
Building DocManager

DocManager uses the standard setup.py method. As such, it needs some
additional Python packages which should be installed.

* python-setuptools
* python-lxml
* python-nose
* python-optcomplete
* python-unittest2
* python-virtualenv

Use "setup.py sdist" to create your formats, for example: 

 $ setup.py sdist --format=bztar

This creates a tar.bz2 archive under the "dist" subdirectory. All
formats can be displayed with setup.py sdist --help-formats


---------------------------------------------------------------------
Testing DocManager

DocManager comes with a testcase under the "tests" subdirectory.
The testcases are distributed in different files, all using the 
pattern "test_*.py".

Each of the files tests only one, specific topic. For example,
"test_00svn.py" tests the structure of the SVN repository. As this
should be done first, the "00" inside makes sure this is the case.
(Sidenote: All test files are executed alphabetically.)

The testcases rely on a local SVN server which is initialized first
with "init-svn.sh". Usually you do not need to run it manually, this
is done during the setup of the testcases.

To run the testcases, use nosetests (from package python-nose):

 $ nosetests tests

This makes sure the SVN repository will be created correctly and
filled with all the files and directory from tests/ROOT/.

If the testcases are too expensive for you, it's possible to run
them individually. For example, this executes all the testcases
in the file "tests/test_svnprops.py":

 $ python tests/test_svnprops.py

You can restrict it to some class:

 $ python tests/test_svnprops.py SVNProperties

and to a specific function in a class:

 $ python tests/test_svnprops.py SVNProperties.test_ComparesLengthOfProperties

A failed testcase can look like this:

 $ nosetests
...................F........
======================================================================
FAIL: Compares length of properties from SVNFile and length from svn pl -v --xml
----------------------------------------------------------------------
Traceback (most recent call last):
  File ".../tests/test_svnprops.py", line 47, in test_ComparesLengthOfProperties
    propdict.keys()) )
AssertionError: 6 != 5 : ['doc:release', 'doc:status', 'doc:deadline', 'doc:maintainer', 'doc:trans', 'incgraphics'] != ['doc:release', 'doc:status', 'doc:trans', 'doc:maintainer', 'doc:deadline']

----------------------------------------------------------------------
Ran 28 tests in 9.316s

FAILED (failures=1)


A succeeded testcase looks like this:

 $ nosetests
............................
----------------------------------------------------------------------
Ran XX tests in 9.406s

OK 




