#
# Makefile for image processing
#

#------------------------------------------------------------------------
# xslt stylsheets
#

STYLEGFX       := $(DTDROOT)/xslt/misc/get-graphics.xsl
STYLESVG       := $(DTDROOT)/xslt/misc/fixsvg.xsl
STYLESVG2GRAY  := $(DTDROOT)/xslt/misc/svg.color2grayscale.xsl

#------------------------------------------------------------------------
# Image lists
#

# generate lists of all images in color and gray
SRCPNG      := $(wildcard $(IMG_SRCDIR)/png/*.png)
SRCSVG      := $(wildcard $(IMG_SRCDIR)/svg/*.svg)
SRCFIG      := $(wildcard $(IMG_SRCDIR)/fig/*.fig)
SRCDIA      := $(wildcard $(IMG_SRCDIR)/dia/*.dia)

#------------------------------------------------------------------------
# find used images files
#

#USED        := $(sort $(shell xsltproc $(ROOTSTRING) $(PROFSTRINGS) \
#		$(DTDROOT)/xslt/misc/get-image-files.xsl \
#		$(BASE_DIR)/xml/$(MAIN)))

USED        := $(shell echo "$(SETFILES)" | xsltproc $(ROOTSTRING) \
		  --stringparam xml.or.img img \
		  $(DTDROOT)/xslt/misc/extract-files-and-images.xsl - )

# PNG and SVG can be directly taken from the USED list - the filter function
# generates lists of all PNG/SVG common to USED and SCRSVG/SCRPNG
#
USED_PNG := $(filter $(addprefix $(IMG_SRCDIR)/png/,$(USED)), $(SRCPNG))

# Sometimes SVGs are not directly used, too, but rather the converted PNGs
# DIA and FIG are never directly used in the XML sources, but converted
# to SVG/PNG first. So we pretend all files in USED are SVG/FIG/DIA files
# and then generate a list of files common to the fake USED and SRCFIG/SRCDIA
#
USED_SVG := $(filter \
	$(addprefix $(IMG_SRCDIR)/svg/,$(addsuffix .svg,$(basename $(USED)))), \
	$(SRCSVG))

USED_DIA := $(filter \
	$(addprefix $(IMG_SRCDIR)/dia/,$(addsuffix .dia,$(basename $(USED)))), \
	$(SRCDIA))

USED_FIG := $(filter \
	$(addprefix $(IMG_SRCDIR)/fig/,$(addsuffix .fig,$(basename $(USED)))), \
	$(SRCFIG))

#
# The generated images

GEN_SVG := $(subst .dia,.svg,$(notdir $(USED_DIA))) \
		$(subst .fig,.svg,$(notdir $(USED_FIG)))

GEN_PNG := $(subst .svg,.png,$(notdir $(USED_SVG))) \
		$(subst .dia,.png,$(notdir $(USED_DIA))) \
		$(subst .fig,.png,$(notdir $(USED_FIG)))

# b/w images
#
SVGPRINT := $(addprefix $(IMG_GENDIR)/print/, $(notdir $(USED_SVG)) $(GEN_SVG))

PNGPRINT := $(addprefix $(IMG_GENDIR)/print/, $(notdir $(USED_PNG)) $(GEN_PNG))

# color images
#
SVGONLINE := $(addprefix $(IMG_GENDIR)/online/, \
		$(notdir $(USED_SVG)) $(GEN_SVG))

PNGONLINE := $(addprefix $(IMG_GENDIR)/online/, \
		$(notdir $(USED_PNG))  $(GEN_PNG))

# images with the same basename will cause problems because the image that
# is generated last will win. Since we use -j with make, this may be a
# different image on different machines
#
DOUBLEIMG   := $(sort $(filter $(notdir $(basename $(SRCPNG))), \
		$(notdir $(basename $(SRCSVG))) \
		$(notdir $(basename $(SRCFIG))) \
		$(notdir $(basename $(SRCDIA)))))

# images referenced in the XML sources that cannot be found in
# $(IMG_SRCDIR)
#
MISSING     := $(sort $(filter-out $(notdir $(basename $(SRCSVG))) \
		$(notdir $(basename $(SRCPNG))) \
		$(notdir $(basename $(SRCFIG))) \
		$(notdir $(basename $(SRCDIA))), \
		$(basename $(USED))))

#------------------------------------------------------------------------
# PHONY targets for image creation
#
#
# This works as follows:
# o images in this Makefile are generally generated by running one of the
#   targets provide-images, provide-color-images, or (EPUB only)
#   provide-epub-images.
# o the tmp directory is needed when converting svg to svg to png. svg to svg
#   is done to improve the xml of svg or to create grayscale svg.
#
.PHONY: provide-images
provide-images: | $(DIRECTORIES)
provide-images: $(SVGPRINT) $(PNGPRINT)

.PHONY: provide-color-images
provide-color-images: | $(DIRECTORIES)
provide-color-images: $(SVGONLINE) $(PNGONLINE)

.PHONY: provide-epub-images
provide-epub-images: provide-color-images $(EPUB_TMP_DIR)
	ln -sf $(IMG_GENDIR)/online $(EPUB_TMP_DIR)/images


#---------------
# Optimize (size-wise) PNGs
#
.PHONY: optipng
optipng:
	exiftool -Comment=optipng -overwrite_original -P \
	$(shell for i in $(USED_PNG); do  \
		exiftool -Comment $$i  | grep optipng > /dev/null || \
		optipng -o8 $$i > /dev/null; \
		echo "$$i "; \
		done )

#---------------
# Warnings
#
warn-images:
ifdef DOUBLEIMG
	@ccecho "warn" "Image names not unique, multiple sources available for the following images:\n$(DOUBLEIMG)"
endif
#
# This warning is solely for publishing stuff on novell.com/documentation,
# therefore we make it dependend on HTMLROOT which also is only used
# for novell.com/documentation publishing
#
ifdef HTMLROOT
ifdef WRONG_CAP
	@ccecho "warn" "Not all image file names are lower case. This will make problems when creating online docs:\n$(WRONG_CAP)"
endif
endif

#------------------------------------------------------------------------
# The "real" image generation 
#
# While PDFs support SVGs and PNGs, all other output formats need PNG
# (Browser support for SVG is still not common enough). So we convert
# SVGs to PNG. FIG and DIA files are also converted to SVG (and from there
# to PNG), because they are unsupported in the output formats.
#
# We assume source images are generally color images, regardless of the format.
# Since b/w PDFs (for the print shop) need grayscale images, we transfer
# PNGs and SVGs to grayscale as well.
#
# All conversions are done via $IMAGES_GENDIR/gen/
# Color images are placed in $IMAGES_GENDIR/online/
# Grayscale images are placed in $IMAGES_GENDIR/print/

#---------------
# Color SVGs
#
$(IMG_GENDIR)/online/%.svg: $(IMG_GENDIR)/gen/svg/%.svg
	xsltproc $(STYLESVG) $< > $@

#---------------
# Color PNGs
#
# Source PNGs are just linked. PNGs generated from SVG are created with
# inksacpe and optimized (for size) with optipng


$(IMG_GENDIR)/online/%.png: $(IMG_SRCDIR)/png/%.png
	@exiftool -Comment $< | grep optipng > /dev/null || \
	  ccecho "warn" " $< not optimized."
	ln -sf $< $@

$(IMG_GENDIR)/online/%.png: $(IMG_GENDIR)/gen/svg/%.svg
	if test -L $@; then \
	    rm -f $@; \
	fi
	inkscape $(INK_OPTIONS) -e $@ -f $<
	optipng -o8 $@ >& /dev/null

#---------------
# Grayscale SVG for b/w PDFs
#
$(IMG_GENDIR)/print/%.svg: $(IMG_GENDIR)/gen/svg/%.svg
	xsltproc $(STYLESVG) $< | \
	xsltproc $(STYLESVG2GRAY) - > $@

#---------------
# Grayscale PNGs for b/w PDFs
#
$(IMG_GENDIR)/print/%.png: $(IMG_SRCDIR)/png/%.png
	convert $< $(CONVERT_OPTS) $@

$(IMG_GENDIR)/print/%.png: $(IMG_GENDIR)/gen/png/%.png
	convert $< $(CONVERT_OPTS) $@

#---------------
# SVG -> PNG
#
$(IMG_GENDIR)/gen/png/%.png: $(IMG_GENDIR)/gen/svg/%.svg
	if test -L $@; then \
	    rm -f $@; \
	fi
	inkscape $(INK_OPTIONS) -e $@ -f $<

#---------------
# FIG -> SVG
#
$(IMG_GENDIR)/gen/svg/%.svg: $(IMG_SRCDIR)/fig/%.fig
	fig2dev -L svg $< $@

#---------------
# DIA -> SVG
#
$(IMG_GENDIR)/gen/svg/%.svg: $(IMG_SRCDIR)/dia/%.dia
	LANG=C dia $(DIA_OPTIONS) --export=$@ $<

#---------------
# link source SVGs
#
$(IMG_GENDIR)/gen/svg/%.svg: $(IMG_SRCDIR)/svg/%.svg
	ln -sf $< $@

# we do not use pdf currently. If we change that, we should create a 
# directory images/gen/pdf to collect all the converted graphics.
#
# tmp/%.pdf: images/src/svg/%.svg
# 	inkscape --export-pdf=$@ -f $<
# 
# tmp/%.pdf: images/src/dia/%.dia
# 	LANG=C dia $(DIA_OPTIONS) --export=$@ $<
# 
# tmp/%.pdf: images/src/fig/%.fig
# 	fig2dev -L pdf $< $@
