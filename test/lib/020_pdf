#!/bin/bash
#
# Copyright (C) 2013 Frank Sundermeyer <fsundermeyer@opensuse.org>
#
# Author:
# Frank Sundermeyer <fsundermeyer@opensuse.org>
#
# Testing DAPS: PDF
#
# In a PDF it's impossible to find out whether e.g. a certain XSLTPARAM
# option or the draft mode is working without actually opening the PDF
# in a viewer and looking at it.
# For testing we will therefore run DAPS in debug mode and grep for parameters
# in the log file. Thus we will at least know whether the xslt processor
# was called with correct options. 
#
# * Does the PDF-file correctly build?
# * Does the name retrieved with *-name match the actual result?
# * Is the .fo still present after the PDF has been built? 
# * Do the --styleroot and --fb_styleroot options work?
# * Does the automatic fallback to the DoBook stylesheets work? 
# * Is the draft watermark image included when using the --draft option?
# * Are remarks displayed when using the --remarks option?
# * Is the meta information displayed when using the --meta option?
# * Is the --name option correctly implemented?
# * Does the --rootid option work correctly?
# * Are parameters pass with --xsltparam correctly processed?

source lib/common_functions

header "$_PDFCMD with $_FOPROC"

function oneTimeSetUp() {
    # Clean up the build directory
    clean_build
    # get the profiling directory
    _PDFPATH=$(eval "$_DAPSEXEC -d $_DCFILE ${_PDFCMD}-name 2>/dev/null")
    if [ $? -ne 0 ]; then
	exit_on_error " The initial DAPS call to determine the path to the resulting PDF failed. Skipping tests"
    fi
    _LOG_DIR=$(eval "$_DAPSEXEC -v0 -d $_DCFILE showvariable VARIABLE=LOG_DIR 2>/dev/null")
    if [ $? -ne 0 ]; then
	exit_on_error " The initial DAPS call to determine the LOG file failed. Skipping tests"
    fi
    _LOGFILE=${_LOG_DIR}/make_${_PDFCMD}.log
}

# Post
# this function is run _after_ the tests are executed
#
function oneTimeTearDown() {
    stats
    # Clean up the build directory
    clean_build
}

#---------------------------------------------------------------
# TESTS
#---------------------------------------------------------------

#--------------------------------
# * Does the PDF-file correctly build?
# * Does the name retrieved with *-name match the actual result?
#
function test_pdf () {
    local _PDFNAME _PDFRESULT
    _PDFNAME=$(eval "$_DAPSEXEC -v0 -d $_DCFILE $_PDFCMD --formatter=$_FOPROC 2>/dev/null")
    assertTrue \
        ' └─ The $_PDFCMD command itself failed' \
        "$?"
    assertTrue \
	" └─ The resulting filename (${_PDFNAME}) does not exist" \
	"[ -f $_PDFNAME ]"
    assertEquals \
	' └─ The resulting filename does not match the one retrieved with --${_PDFCMD}-name' \
	"$_PDFPATH" "$_PDFNAME"
}
#--------------------------------
# * Is the .fo still present after the PDF has been built?
#
function test_pdfFO () {
    local _FONAME _TMPDIR
    _TMPDIR=$(eval "$_DAPSEXEC -v0 -d $_DCFILE showvariable VARIABLE=TMP_DIR 2>/dev/null")
   assertTrue \
       ' └─ Getting the value of the TMP_DIR variable failed' \
       "$?"    
    _FONAME=$(basename ${_PDFPATH} 2>/dev/null)
    if [[ "pdf" == $_PDFCMD ]]; then
	_FONAME=${_TMPDIR}/${_FONAME%-print_en.pdf}-${_FOPROC}-print_en.fo
    else
	_FONAME=${_TMPDIR}/${_FONAME%_en.pdf}-${_FOPROC}_en.fo
    fi
    assertTrue \
	" └─ The FO file (${_FONAME}) does not exist anymore after having built the PDF" \
	"[ -f $_FONAME ]"
}

#--------------------------------
# * Do the --styleroot and --fb_styleroot options work?
# * Does the automatic fallback to the DoBook stylesheets work? 
#
function test_pdfStyleroot () {

    _DB_STYLES=$(readlink -e "/usr/share/xml/docbook/stylesheet/nwalsh/current")
    _STANDARD_STYLES="${_DOC_DIR}/styles/standard"

    clean_build

    # Testing Fallback Styleroot by specifying a wrong Styleroot dir
    # 

    eval "$_DAPSEXEC -d $_DCFILE --styleroot=${_DOC_DIR} --fb_styleroot=${_STANDARD_STYLES} --debug $_PDFCMD >/dev/null 2>&1"
    egrep -q -- "--stylesheet /.*/${_STANDARD_STYLES}" $_LOGFILE 2>/dev/null
    assertTrue \
	" └─ The Fallback Styleroot specified on the command line was not used." \
	"$?"

    clean_build

    # Testing automatic Fallback to _DB_STYLES by specifying a wrong
    # Styleroot dir with no Fallback
    #
    eval "$_DAPSEXEC -d $_DCFILE --styleroot=${_DOC_DIR} --debug $_PDFCMD >/dev/null 2>&1"
    grep -q -- "--stylesheet ${_DB_STYLES}" $_LOGFILE 2>/dev/null
    assertTrue \
	" └─ The automatic DocBook Fallback Styleroot was not used." \
	"$?"    

    clean_build

    # Testing Styleroot specified with --styleroot
    #
    eval "$_DAPSEXEC -d $_DCFILE --styleroot ${_STANDARD_STYLES} --debug $_PDFCMD >/dev/null 2>&1"
    egrep -q -- "--stylesheet /.*/${_STANDARD_STYLES}" $_LOGFILE 2>/dev/null
    assertTrue \
	" └─ The Styleroot specified on the command line was not used." \
	"$?"
}


#--------------------------------
# * Is the draft watermark image included when using the --draft option?
# * Are remarks displayed when using the --remarks option?
# * Is the meta information displayed when using the --meta option?
#
function test_pdfRemarksDraftMeta () {
    local _PDFNAME _PDFNAME_BUILD _REMARK_COUNT_ACTUAL _REMARK_COUNT_EXPECTED

    declare -a _XMLFILES

   _REMARK_COUNT_ACTUAL=0
   _REMARK_COUNT_EXPECTED=0
   _XML_FILES=( $_SET_FILES )

    clean_build

   _PDFNAME_BUILD=$(eval "$_DAPSEXEC -d $_DCFILE --debug $_PDFCMD --draft --remarks --meta --formatter=$_FOPROC 2>/dev/null | tail -n 1")
   assertTrue \
       ' └─ Building the PDF with --draft --remarks --meta failed' \
       "$?"
   _PDFNAME=$(eval "$_DAPSEXEC -v0 -d $_DCFILE ${_PDFCMD}-name --draft --remarks --meta 2>/dev/null")
   assertTrue \
       ' └─ Getting the PDF-name with --draft --remarks --meta failed' \
       "$?"   
   assertEquals \
       " └─ The resulting filename does not match the one retrieved with --${_PDFCMD}-name: " \
       "$_PDFNAME" "$_PDFNAME_BUILD"

   # checking DRAFT mode
   #
   egrep -- "--stringparam\s+\"draft\.mode=yes\"" $_LOGFILE >/dev/null 2>&1
   assertTrue \
       ' └─ Stringparam for DRAFT mode is not correctly specified when generating the FO-file' \
       "$?"
   expr "$_PDFNAME_BUILD" : '.*\(_draft\)' >/dev/null 2>&1
   assertTrue \
       ' └─ String "_draft" does not appear in the PDF filename' \
       "$?"

   # checking META
   #
   egrep -- "--param\s+\"use\.meta=1\"" $_LOGFILE >/dev/null 2>&1
   assertTrue \
       ' └─ Param for META is not correctly specified when generating the FO-file' \
       "$?"
   expr "$_PDFNAME_BUILD" : '.*\(_meta\)' >/dev/null 2>&1
   assertTrue \
       ' └─ String "_meta" does not appear in the PDF filename' \
       "$?"


   # checking REMARKS
   # --param "show.comments=1" needs to occur once for each XML file on
   # profiling and another time when creating the fo-file
   #
   _REMARK_COUNT_ACTUAL=$(egrep -c -- "--param\s+\"show\.comments=1\"" $_LOGFILE)
   let "_REMARK_COUNT_EXPECTED=${#_XML_FILES[@]} + 1"
   assertEquals \
       " └─ --param \"show.comments=1\" appears less often in the log file than expected" \
       "$_REMARK_COUNT_EXPECTED" "$_REMARK_COUNT_ACTUAL"

   expr "$_PDFNAME_BUILD" : '.*\(_remarks\)' >/dev/null
   assertTrue \
       ' └─ String "_remarks" does not appear in the PDF filename' \
       "$?"   
}

#--------------------------------
# * Is the --name option correctly implemented?
#
function test_pdfName () {
    local _BUILD_SUBDIR_NAME _NAME _PDFPATH _PDFPATH_BUILD
    _NAME="testsuite"

    clean_build

    _PDFPATH_BUILD=$(eval "$_DAPSEXEC -v0 -d $_DCFILE $_PDFCMD --name $_NAME --formatter=$_FOPROC 2>/dev/null")
    assertTrue \
	' └─ Building a $_PDFCMD with --name failed ' \
       "$?"
   _PDFPATH=$(eval "$_DAPSEXEC -v0 -d $_DCFILE ${_PDFCMD}-name --name $_NAME 2>/dev/null")
   assertTrue \
	' └─  Getting the filename for $_PDFCMD with --name failed ' \
       "$?"

   _BUILD_SUBDIR_NAME=$(basename $(dirname "$_PDFPATH_BUILD"))

   assertEquals \
       " └─ The resulting filename does not match the one retrieved with --${_PDFCMD}-name: " \
       "$_PDFPATH" "$_PDFPATH_BUILD"

   # expr match does not work with Variables as search term, needs regexp
   echo "$(basename $_PDFPATH_BUILD)" | grep -q $_NAME
   assertTrue \
       " └─ String passed with --name ($_NAME) does not appear in the PDF filename" \
       "$?"   
   assertEquals \
       " └─ The build subdirectory does not have the name supplied with --name: " \
       "$_NAME" "$_BUILD_SUBDIR_NAME"
}


#--------------------------------
# * Does the --rootid option work correctly?
# * Are parameters pass with --xsltparam correctly processed?
#
function test_pdfRootidXsltparam () {
    local _PAGECOUNT _PAGECOUNT_EXPECTED _PDFNAME _PDFNAME_BUILD _PDFPATH_BUILD _ROOTID _XSLTPARAM

    _ROOTID=appendix
    _PAGECOUNT_EXPECTED=1

    if [[ "pdf" == $_PDFCMD ]]; then
	_PDFNAME=${_ROOTID}-print_en.pdf
    else
	_PDFNAME=${_ROOTID}_en.pdf
    fi
    _XSLTPARAM="--param \\\"hyphenate.verbatim=0\\\""

    clean_build

    _PDFPATH_BUILD=$(eval "$_DAPSEXEC -d $_DCFILE --debug $_PDFCMD --formatter=$_FOPROC --rootid $_ROOTID --xsltparam=\"'$_XSLTPARAM'\" 2>/dev/null | tail -n 1")
    assertTrue \
	' └─ Building a $_PDFCMD with --rootid and --xsltparam failed ' \
       "$?"
    egrep -- "--stringparam\s+\"rootid=$_ROOTID\"" $_LOGFILE >/dev/null 2>&1
    assertTrue \
	' └─ Stringparam for ROOTID is not correctly specified when generating the FO-file' \
	"$?"
    _PDFNAME_BUILD=$(basename $_PDFPATH_BUILD)
    assertEquals \
	' └─ The resulting PDF filename does not match the ROOTID:' \
	"$_PDFNAME" "$_PDFNAME_BUILD"

    # check PDF page count
    _PAGECOUNT=$(pdfinfo $_PDFPATH_BUILD | grep "Pages:" | sed 's/.*:  *//' 2>/dev/null)
    assertEquals \
	' └─ PDF has wrong page count:' \
	"$_PAGECOUNT_EXPECTED" "$_PAGECOUNT"
    # check xsltparam
    egrep -- "$_XSLTPARAM" $_LOGFILE >/dev/null 2>&1
    assertTrue \
	' └─ Param for XSLTPARAM is not correctly specified when generating the FO-file' \
	"$?"
}

# source shUnit2 test
source $_SHUNIT2SRC

