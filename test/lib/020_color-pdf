#!/bin/bash
#
# Copyright (C) 2011-2013 Frank Sundermeyer <fsundermeyer@opensuse.org>
#
# Author:
# Frank Sundermeyer <fsundermeyer@opensuse.org>
#
# TODO: Checks for sources that do not get profiled
#
# Testing DAPS: color-pdf
#
# In a PDF it's impossible to find out whether e.g. a certain XSLTPARAM
# option or the draft mode is working without actually opening the PDF
# in a viewer and looking at it.
# For testing we will therefore run DAPS in debug mode and grep for parameters
# in the log file. Thus we will at least know whether the xslt processor
# was called with correct options. 
#
# * Does the PDF-file correctly build?
# * Does the name retrieved with color-pdf-name match the actual result?
# * Is the .fo still present after the PDF has been built?  
# * Is the draft watermark image included when using the --draft option?
# * Are remarks displayed when using the --remarks option?
# * Is the meta information displayed when using the --meta option?
# * Is the --name option correctly implemented?
# * Does the --rootid option correctly work?
# * Are parameters pass with --xsltparam correctly processed?

source lib/common_functions

header "Color PDFs"

function oneTimeSetUp() {
    # Clean up the build directory
    clean_build
    # get the profiling directory
    _PDFPATH=$(eval "$_DAPSEXEC -d $_DCFILE color-pdf-name 2>/dev/null")
    if [ $? -ne 0 ]; then
	echo " └─ The initial DAPS call to determine the path to the resulting PDF failed. Skipping tests"
	exit 1
    fi
}

# Post
# this function is run _after_ the tests are executed
#
function oneTimeTearDown() {
    # Clean up the build directory
    clean_build
}

#---------------------------------------------------------------
# TESTS
#---------------------------------------------------------------

#--------------------------------
# * Does the PDF-file correctly build?
# * Does the name retrieved with color-pdf-name match the actual result?
#
function test_colorpdf () {
    local _PDFNAME _PDFRESULT
    _PDFNAME=$(eval "$_DAPSEXEC -v0 -d $_DCFILE color-pdf --formatter=fop 2>/dev/null")
    assertTrue \
        ' └─ The color-pdf command itself failed' \
        "$?"
    assertTrue \
	" └─ The resulting filename (${_PDFNAME}) does not exist" \
	"[ -f $_PDFNAME ]"
    assertEquals \
	' └─ The resulting filename does not match the one retrieved with --color-pdf-name' \
	"$_PDFPATH" "$_PDFNAME"
}
#--------------------------------
# * Is the .fo still present after the PDF has been built?
#
function test_colorpdfFO () {
    local _FONAME _TMPDIR
    _TMPDIR=$(eval "$_DAPSEXEC -v0 -d $_DCFILE showvariable VARIABLE=TMP_DIR 2>/dev/null")
   assertTrue \
       ' └─ Getting the value of the TMP_DIR variable failed' \
       "$?"    
    _FONAME=$(basename ${_PDFPATH} 2>/dev/null)
    _FONAME=${_TMPDIR}/${_FONAME%_en.pdf}-fop_en.fo
    assertTrue \
	" └─ The FO file (${_FONAME}) does not exist anymore after having built the PDF" \
	"[ -f $_FONAME ]"
}

#--------------------------------
# * Is the draft watermark image included when using the --draft option?
# * Are remarks displayed when using the --remarks option?
# * Is the meta information displayed when using the --meta option?
#
function test_colorpdfRemarksDraftMeta () {
    local _LOG_DIR _LOGFILE _PDFNAME _PDFNAME_BUILD _REMARK_COUNT_ACTUAL _REMARK_COUNT_EXPECTED

    declare -a _XMLFILES
   _LOG_DIR=$(eval "$_DAPSEXEC -v0 -d $_DCFILE showvariable VARIABLE=LOG_DIR 2>/dev/null")
   _LOGFILE=${_LOG_DIR}/make_color-pdf.log
   _REMARK_COUNT_ACTUAL=0
   _REMARK_COUNT_EXPECTED=0
   _XML_FILES=( $_SET_FILES )

    clean_build

   _PDFNAME_BUILD=$(eval "$_DAPSEXEC -v0 -d $_DCFILE --debug color-pdf --draft --remarks --meta | tail -n 1")
   _PDFNAME=$(eval "$_DAPSEXEC -v0 -d $_DCFILE color-pdf-name --draft --remarks --meta 2>/dev/null")
   assertTrue \
       ' └─ Building the PDF with --draft --remarks --meta failed' \
       "$?"
   assertEquals \
       ' └─ The resulting filename does not match the one retrieved with --color-pdf-name: ' \
       "$_PDFNAME" "$_PDFNAME_BUILD"

   # checking DRAFT mode
   #
   egrep -- "--stringparam\s+\"draft\.mode=yes\"" $_LOGFILE >/dev/null
   assertTrue \
       ' └─ Stringparam for DRAFT mode is not correctly specified when generating the FO-file' \
       "$?"
   expr "$_PDFNAME_BUILD" : '.*\(_draft\)' >/dev/null
   assertTrue \
       ' └─ String "_draft" does not appear in the PDF filename' \
       "$?"

   # checking META
   #
   egrep -- "--param\s+\"use\.meta=1\"" $_LOGFILE >/dev/null
   assertTrue \
       ' └─ Param for META is not correctly specified when generating the FO-file' \
       "$?"
   expr "$_PDFNAME_BUILD" : '.*\(_meta\)' >/dev/null
   assertTrue \
       ' └─ String "_meta" does not appear in the PDF filename' \
       "$?"


   # checking REMARKS
   # --param "show.comments=1" needs to occur once for each XML file on
   # profiling and another time when creating the fo-file
   #
   _REMARK_COUNT_ACTUAL=$(egrep -c -- "--param\s+\"show\.comments=1\"" $_LOGFILE)
   let "_REMARK_COUNT_EXPECTED=${#_XML_FILES[@]} + 1"
   assertEquals \
       " └─ --param \"show.comments=1\" appears less often in the log file than expected" \
       "$_REMARK_COUNT_EXPECTED" "$_REMARK_COUNT_ACTUAL"

   expr "$_PDFNAME_BUILD" : '.*\(_remarks\)' >/dev/null
   assertTrue \
       ' └─ String "_remarks" does not appear in the PDF filename' \
       "$?"   
}

#--------------------------------
# * Is the --name option correctly implemented?
#
function test_colorpdfNAME () {
    local _BUILD_SUBDIR_NAME _NAME _PDFNAME _PDFNAME_BUILD
    _NAME="testsuite"

    clean_build

    _PDFNAME_BUILD=$(eval "$_DAPSEXEC -v0 -d $_DCFILE color-pdf --name $_NAME 2>/dev/null")
    assertTrue \
	' └─ Building a color-pdf with --name failed ' \
       "$?"
   _PDFNAME=$(eval "$_DAPSEXEC -v0 -d $_DCFILE color-pdf-name --name $_NAME 2>/dev/null")
   assertTrue \
	' └─  Getting the filename for the color-pdf with --name failed ' \
       "$?"

   _BUILD_SUBDIR_NAME=$(basename $(dirname "$_PDFNAME_BUILD"))

   assertEquals \
       ' └─ The resulting filename does not match the one retrieved with --color-pdf-name: ' \
       "$_PDFNAME" "$_PDFNAME_BUILD"

   # expr match does not work with Variables as search term, needs regexp
   echo "$(basename $_PDFNAME_BUILD)" | grep -q $_NAME
   assertTrue \
       " └─ String passed with --name ($_NAME) does not appear in the PDF filename" \
       "$?"   
   assertEquals \
       " └─ The build subdirectory does not have the name supplied with --name: " \
       "$_NAME" "$_BUILD_SUBDIR_NAME"
}

# * Does the --rootid option correctly work?
# * Are parameters pass with --xsltparam correctly processed?


# source shUnit2 test
eval "source $_SHUNIT2SRC"

