#!/bin/bash
#
# Copyright (C) 2013 Frank Sundermeyer <fsundermeyer@opensuse.org>
#
# Author:
# Frank Sundermeyer <fsundermeyer@opensuse.org>
#
# Testing DAPS: online-docs
#
#
# * Does online-docs correctly build?
# * Is the bigfile generated?
# * Is the image tarball generated? Does it include all images?
# * Are all output formats created?
#
# TODO
# * Does the --rootid option work correctly?
# * Is the --name option correctly implemented?
# * Does the --noset option work correctly?
# * Does the --export-dir function work correctly?

_OD_NAME_DIR=""
_OD_TEMPDIR=""
_LOGFILE=""

source lib/common_functions

header "online-docs"

function oneTimeSetUp() {
    local _LOG_DIR

    # Clean up the build directory
    clean_build_dir all

    _OD_NAME_DIR=$($_DAPSEXEC -v0 -d $_DCFILE showvariable VARIABLE=OD_EXPORT_BOOKDIR 2>/dev/null)
    if [ $? -ne 0 ]; then
	exit_on_error " The initial DAPS call to determine the path to the resulting locdrop directory failed. Skipping tests"
    fi

    _LOG_DIR=$($_DAPSEXEC -v0 -d $_DCFILE showvariable VARIABLE=LOG_DIR 2>/dev/null)
    if [ $? -ne 0 ]; then
	exit_on_error " The initial DAPS call to determine the LOG file failed. Skipping tests"
    fi
    _LOGFILE=${_LOG_DIR}/make_online-docs.log
    _OD_TEMPDIR=$(mktemp -d -q ${SHUNIT_TMPDIR}/od_XXXXXX)

}

# Post
# this function is run _after_ the tests are executed
#
function oneTimeTearDown() {
    stats
    # Clean up the build directory
    clean_build_dir all
}

#---------------------------------------------------------------
# TESTS
#---------------------------------------------------------------

#--------------------------------
# *  * Does online-docs correctly build?
#
function test_onlinedocs () {
    local _OD_BUILD_PATH

    _OD_BUILD_PATH=$($_DAPSEXEC -v0 -d $_DCFILE online-docs 2>/dev/null)
    assertTrue \
        ' └─ The online-docs command itself failed' \
        "$?"
    assertTrue \
	" └─ The resulting file (${_OD_BUILD_PATH}) does not exist." \
	"[ -s $_OD_BUILD_PATH ]"

}

#--------------------------------
# * Is the bigfile generated?
#
function test_onlinedocsFiles () {
    local _OD_NAME_BIGFILE

    _OD_NAME_BIGFILE=$($_DAPSEXEC -v0 -d $_DCFILE showvariable VARIABLE=OD_BIGFILE 2>/dev/null)
    assertTrue \
        ' └─ The command to determine the name of the bigfile failed' \
        "$?"
    assertTrue \
        " └─ The bigfile ($_OD_NAME_BIGFILE) does not exist or has size 0" \
        "[[ -s $_OD_NAME_BIGFILE ]]"
}

#--------------------------------
# * Is the image tarball generated? Does it include all images?
#
function test_onlinedocsImages () {
    local _FILE _IMAGE _MISSING _OD_NAME_IMG_TAR
    
    _OD_NAME_IMG_TAR=$($_DAPSEXEC -v0 -d $_DCFILE showvariable VARIABLE=OD_GRAPHICS 2>/dev/null)
    assertTrue \
        ' └─ The command to determine the name of the images tarball failed' \
        "$?"
    # clean tmp and unpack new archive
    [[ -d "${_OD_TEMPDIR}" ]] && rm -rf ${_OD_TEMPDIR}/*
    (cd $_OD_TEMPDIR; tar xfj $_OD_NAME_IMG_TAR)
    for _FILE in ${_SET_IMAGES[*]}; do
        _IMAGE=$(basename $_FILE)
        _IMAGE=${_IMAGE%.*}
        readlink -es ${_OD_TEMPDIR}/images/src/*/${_IMAGE}.* >/dev/null || _MISSING="$_MISSING $_FILE"
    done
    assertNull \
        " └─ File(s) '$_MISSING' is/are missing in the images tarball" \
        "$_MISSING"
}

#--------------------------------
# * Is the PDF generated?
#
function test_onlinedocsPDF () {
    local _OD_NAME_PDF
    
    _OD_NAME_PDF=$(basename $($_DAPSEXEC -v0 -d $_DCFILE pdf-name 2>/dev/null))
    assertTrue \
        ' └─ The command to determine the name of the PDF file failed' \
        "$?"
    assertTrue \
        " └─ The PDF file (${_OD_NAME_PDF})does not exist" \
        "[[ -s ${_OD_NAME_DIR}/${_OD_NAME_PDF} ]]"
}

#--------------------------------
# * Is the EPUB generated?
#
function test_onlinedocsEPUB () {

    local _OD_NAME_EPUB
    
    _OD_NAME_EPUB=$(basename $($_DAPSEXEC -v0 -d $_DCFILE epub-name 2>/dev/null))
    assertTrue \
        ' └─ The command to determine the name of the EPUB file failed' \
        "$?"
    assertTrue \
        " └─ The EPUB file (${_OD_NAME_EPUB}) does not exist" \
        "[[ -s ${_OD_NAME_DIR}/${_OD_NAME_EPUB} ]]"
}

#--------------------------------
# * Is the single-html tarball generated?
#
function test_onlinedocsHTML () {
    
    local _OD_NAME_HTML
    
    # fs 2013-11-24: Currently there is no way to determine the
    # names the files resulting from package-pdf and package-html
    # This needs to be fixed
    #
    _OD_NAME_HTML=${_BOOKNAME}_en-single-html.tar.bz2
    assertTrue \
        " └─ The single-html tarball (${_OD_NAME_HTML}) does not exist" \
        "[[ -s ${_OD_NAME_DIR}/${_OD_NAME_HTML} ]]"
  
}

# source shUnit2 test
source $_SHUNIT2SRC
