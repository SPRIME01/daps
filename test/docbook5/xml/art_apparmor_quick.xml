<!-- Converted by db4-upgrade version 1.1 -->

<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="en" xml:id="art.aaquick">
  <?suse-quickstart color="suse"?>
  <title><phrase>AppArmor</phrase> (2.8) Quick Start</title>
  <info>
    <productnumber>
      <phrase role="productname">
        <phrase os="osuse">12.2</phrase>
        <phrase os="sles;sled;slerte">12</phrase>
      </phrase>
    </productnumber>
    <productname>
      <phrase role="productname">
        <phrase os="osuse">openSUSE</phrase>
        <phrase os="sles">SUSE Linux Enterprise Server</phrase>
        <phrase os="sled">SUSE Linux Enterprise Desktop</phrase>
        <phrase os="slerte">SUSE Linux Enterprise Real Time Extension</phrase>
      </phrase>
    </productname>
  </info>
  <sect1 xml:id="sec.aaquick.modes">
    <title><phrase>AppArmor</phrase> Modes</title>
    <variablelist>
      <varlistentry>
        <term>complain/learning</term>
        <listitem>
          <para>
      In complain or learning mode, violations of <phrase>AppArmor</phrase> profile rules, such
      as the profiled program accessing files not permitted by the profile,
      are detected. The violations are permitted, but also logged. This mode
      is convenient for developing profiles and is used by the <phrase>AppArmor</phrase> tools
      for generating profiles.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>enforce</term>
        <listitem>
          <para>
      Loading a profile in enforcement mode enforces the policy defined in
      the profile as well as reports policy violation attempts to rsyslogd.
     </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect1>
  <sect1 xml:id="sec.aaquick.startstop">
    <title>Starting and Stopping <phrase>AppArmor</phrase></title>
    <para>
   Use the <command>systemctl</command> command with one of the following
   parameters:
  </para>
    <variablelist>
      <varlistentry>
        <term>
          <option>systemctl start apparmor.service</option>
        </term>
        <listitem>
          <para>
      Load the kernel module, mount securityfs, parse and load profiles.
      Profiles and confinement are applied to any application started after
      this command was executed. Processes already running at the time <phrase>AppArmor</phrase>
      is started continue to run unconfined.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>systemctl stop apparmor.service</option>
        </term>
        <listitem>
          <para>
      Unmount securityfs, invalidate profiles, and makes running processes
      unconfined.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <option>systemctl reload apparmor.service</option>
        </term>
        <listitem>
          <para>
      Reload profiles.
     </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect1>
  <sect1 xml:id="sec.aaquick.cmdline">
    <title><phrase>AppArmor</phrase> Command Line Tools</title>
    <variablelist>
      <varlistentry>
        <term>aa-autodep</term>
        <listitem>
          <para>
      Guess basic <phrase>AppArmor</phrase> profile requirements. <command>aa-autodep</command>
      creates a stub profile for the program or application examined. The
      resulting profile is called <quote>approximate</quote> because it does
      not necessarily contain all of the profile entries that the program
      needs in order to be confined properly.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>aa-complain</term>
        <listitem>
          <para>
      Set an <phrase>AppArmor</phrase> profile to complain mode.
     </para>
          <para>
      Manually activating complain mode (using the command line) adds a flag
      to the top of the profile, so that <command>/bin/foo</command> becomes
      <command>/bin/foo flags=(complain)</command>.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>aa-enforce</term>
        <listitem>
          <para>
      Set an <phrase>AppArmor</phrase> profile to enforce mode from complain mode.
     </para>
          <para>
      Manually activating enforce mode (using the command line) removes mode
      flags from the top of the profile, so that <command>/bin/foo
      flags=(complain)</command> becomes <command>/bin/foo</command>.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>aa-genprof</term>
        <listitem>
          <para>
      Generate or update a profile. When running, you must specify a program
      to profile. If the specified program is not an absolute path,
      <command>aa-genprof</command> searches the <envar>$PATH</envar>
      variable. If a profile does not exist, <command>aa-genprof</command>
      creates one using <command>aa-autodep</command>.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>aa-logprof</term>
        <listitem>
          <para>
      Manage <phrase>AppArmor</phrase> profiles. <command>aa-logprof</command> is an interactive
      tool used to review the learning or complain mode output found in the
      <phrase>AppArmor</phrase> syslog entries and to generate new entries in <phrase>AppArmor</phrase> profiles.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>aa-unconfined</term>
        <listitem>
          <para>
      Output a list of processes with open TCP or UDP ports that do not have
      <phrase>AppArmor</phrase> profiles loaded.
     </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect1>
  <sect1 xml:id="sec.aaquick.methods">
    <title>Methods of Profiling</title>
    <variablelist>
      <varlistentry>
        <term>Stand-Alone Profiling</term>
        <listitem>
          <para>
      Using <command>aa-genprof</command>. Suitable for profiling small
      applications.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Systemic Profiling</term>
        <listitem>
          <para>
      Suitable for profiling large numbers of programs all at once and for
      profiling applications that may run <quote>forever.</quote></para>
          <para>
      To apply systemic profiling, proceed as follows:
     </para>
          <orderedlist>
            <listitem>
              <para>
        Create profiles for the individual programs that make up your
        application (<command>aa-autodep</command>).
       </para>
            </listitem>
            <listitem>
              <para>
        Put relevant profiles into complain mode.
       </para>
            </listitem>
            <listitem>
              <para>
        Exercise your application.
       </para>
            </listitem>
            <listitem>
              <para>
        Analyze the log (logprof).
       </para>
            </listitem>
            <listitem>
              <para>
        Repeat Steps 3-4.
       </para>
            </listitem>
            <listitem>
              <para>
        Edit the profiles.
       </para>
            </listitem>
            <listitem>
              <para>
        Return to enforce mode.
       </para>
            </listitem>
            <listitem>
              <para>
        Reload all profiles (<command>systemctl reload
        apparmor.service</command>).
       </para>
            </listitem>
          </orderedlist>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect1>
  <sect1 xml:id="sec.aaquick.learning_mode">
    <title>Learning Mode</title>
    <para>
   When using <command>aa-genprof</command>, <command>aa-logprof</command>,
   you get several options for how to proceed:
  </para>
    <variablelist>
      <varlistentry>
        <term>Allow</term>
        <listitem>
          <para>
      Grant access.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Deny</term>
        <listitem>
          <para>
      Prevent access.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Glob</term>
        <listitem>
          <para>
      Modify the directory path to include all files in the suggested
      directory.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Glob w/Ext</term>
        <listitem>
          <para>
      Modify the original directory path while retaining the filename
      extension. This allows the program to access all files in the
      suggested directories that end with the specified extension.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Edit</term>
        <listitem>
          <para>
      Enable editing of the highlighted line. The new (edited) line appears
      at the bottom of the list. This option is called
      <guimenu>New</guimenu> in the <command>aa-logprof</command> and
      <command>aa-genprof</command> command line tools.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Abort</term>
        <listitem>
          <para>
      Abort <command>aa-logprof</command>, losing all rule changes entered
      so far and leaving all profiles unmodified.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Finish</term>
        <listitem>
          <para>
      Close <command>aa-logprof</command>, saving all rule changes entered
      so far and modifying all profiles.
     </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect1>
  <sect1 xml:id="sec.aaquick.example">
    <title>Example Profile</title>
    <screen><?dbfo font-size="6pt"?>#include&lt;tunables/global&gt;

@{HOME} = /home/*/ /root/ # variable

/usr/bin/foo {
   #include &lt;abstractions/base&gt;
   network inet tcp,
   capability setgid,

   /bin/mount          Ux,
   /dev/{,u}random     r,
   /etc/ld.so.cache    r,
   /etc/foo/*          r,
   /lib/ld-*.so*       mr,
   /lib/lib*.so*       mr,
   /proc/[0-9]**       r,
   /usr/lib/**         mr,
   /tmp/               r,
   /tmp/foo.pid        rw,
   /tmp/foo.*          rwl,
   /@{HOME}/.foo_file  rw,
   /@{HOME}/.foo_lock  kw,

   link /etc/sysconfig/foo -&gt; /etc/foo.conf,
   deny /etc/shadow    w,
   owner /home/*/**    rw,

   /usr/bin/foobar     Cx,
   /bin/**             Px -&gt; bin_generic

  # comment on foo's local profile, foobar.
   foobar {
    /bin/bash        rmix,
    /bin/cat         rmix,
    /bin/more        rmix,
    /var/log/foobar* rwl,
    /etc/foobar      r,
   } 
}</screen>
  </sect1>
  <sect1 xml:id="sec.aaquick.profile_structure">
    <title>Structure of a Profile</title>
    <para>
   Profiles are simple text files in the
   <filename>/etc/apparmor.d</filename> directory. They consist of several
   parts: #include, capability entries, rules, and <quote>hats.</quote></para>
    <sect2 xml:id="sec.aaquick.profile_structure.include">
      <title>#include</title>
      <para>
    This is the section of an <phrase>AppArmor</phrase> profile that refers to an include file,
    which mediates access permissions for programs. By using an include, you
    can give the program access to directory paths or files that are also
    required by other programs. Using includes can reduce the size of a
    profile. It is good practice to select includes when suggested.
   </para>
      <para>
    To assist you in profiling your applications, <phrase>AppArmor</phrase> provides three
    classes of <filename>#includes</filename>: abstractions, program chunks,
    and tunables.
   </para>
      <para>
    Abstractions are <filename>#includes</filename> that are grouped by
    common application tasks. These tasks include access to authentication
    mechanisms, access to name service routines, common graphics
    requirements, and system accounting (for example, base, consoles,
    kerberosclient, perl, user-mail, user-tmp, authentication, bash,
    nameservice).
   </para>
      <para>
    Program chunks are access controls for specific programs that a system
    administrator might want to control based on local site policy. Each
    chunk is used by a single program.
   </para>
      <para>
    Tunables are global variable definitions. When used in a profile, these
    variables expand to a value that can be changed without changing the
    entire profile. Therefore your profiles become portable to different
    environments.
   </para>
    </sect2>
    <sect2 xml:id="sec.aaquick.profile_structure.variables">
      <title>Local Variables</title>
      <para>
    Local variables are defined at the head of a profile. Use local
    variables to create shortcuts for paths, for example to provide the base
    for a chrooted path:
   </para>
      <screen>@{CHROOT_BASE}=/tmp/foo
/sbin/rsyslogd {
  [...]
  # chrooted applications
  @{CHROOT_BASE}/dev/log w,
  @{CHROOT_BASE}/var/log/** w,
  [...]
}</screen>
    </sect2>
    <sect2 xml:id="sec.aaquick.profile_structure.alias">
      <title>Aliases</title>
      <para>
    Alias rules provide an alternative form of path rewriting to using
    variables, and are done post variable resolution:
   </para>
      <screen>alias /home/ -&gt; /mnt/users/</screen>
    </sect2>
    <sect2 xml:id="sec.aaquick.profile_structure.nac">
      <title>Network Access Control</title>
      <para><phrase>AppArmor</phrase> provides network access mediation based on network domain and type:
   </para>
      <screen>/bin/ping {
  network inet dgram,
  network inet raw,
  [...]
}</screen>
      <para>
    The example would allow IPv4 network access of the datagram and raw type
    for the ping command. For details on the network rule syntax, refer to
    the <xref linkend="part.apparmor"/>.
   </para>
    </sect2>
    <sect2 xml:id="sec.aaquick.profile_structure.cap">
      <title>Capability Entries (POSIX.1e)</title>
      <para>
    Capabilities statements are simply the word <quote>capability</quote>
    followed by the name of the POSIX.1e capability as defined in the
    <command>capabilities(7)</command> man page.
   </para>
    </sect2>
    <sect2 xml:id="sec.aaquick.profile_structure.rules_general">
      <title>Rules: General Options for Files and Directories</title>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>
                <para>
                  <emphasis>Option</emphasis>
                </para>
              </entry>
              <entry>
                <para>
                  <emphasis>File</emphasis>
                </para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
         read
        </para>
              </entry>
              <entry>
                <para>
                  <literal>r</literal>
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
         write
        </para>
              </entry>
              <entry>
                <para>
                  <literal>w</literal>
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
         link
        </para>
              </entry>
              <entry>
                <para>
                  <literal>l</literal>
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
         file locking
        </para>
              </entry>
              <entry>
                <para>
                  <literal>k</literal>
                </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
         file append (mutually exclusive to <literal>w</literal>)
        </para>
              </entry>
              <entry>
                <para>
                  <literal>a</literal>
                </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 xml:id="sec.aaquick.profile_structure.link_pair">
      <title>Rules: Link Pair</title>
      <para>
    The link mode grants permission to create links to arbitrary files,
    provided the link has a subset of the permissions granted by the target
    (subset permission test). By specifying origin and destination, the link
    pair rule provides greater control over how hard links are created. Link
    pair rules by, default, do not enforce the link subset permission test
    that the standard rules link permission requires. To force the rule to
    require the test the subset keyword is used. The following rules are
    equivalent:
   </para>
      <screen>/link      l,
link subset /link -&gt; /**,</screen>
    </sect2>
    <sect2 xml:id="sec.aaquick.profile_structure.deny">
      <title>Rules: Denying rules</title>
      <para><phrase>AppArmor</phrase> provides <literal>deny</literal> rules which are standard rules but
    with the keyword <literal>deny</literal> prepended. They are used to
    remember known rejects, and quiet them so the reject messages don't fill
    up the log files. For more information see
    <xref linkend="part.apparmor"/>.
   </para>
    </sect2>
    <sect2 xml:id="sec.aaquick.profile_structure.owner">
      <title>Rules: Owner Conditional Rules</title>
      <para>
    The file rules can be extended so that they can be conditional upon the
    the user being the owner of the file, by prepending the keyword
    <literal>owner</literal> to the rule. Owner conditional rules accumulate
    just as regular file rules and are considered a subset of regular file
    rules. If a regular file rule overlaps with an owner conditional file
    rule, the resulting permissions will be that of the regular file rule.
   </para>
      <tip>
        <para>
     For specifying rules valid for non-owners of the relevant file, use the
     <literal>other</literal> keyword instead.
    </para>
      </tip>
    </sect2>
    <sect2 xml:id="sec.aaquick.profile_structure.exec">
      <title>Rules: Defining Execute Permissions</title>
      <para>
    For executables that may be called from the confined programs, the
    profile creating tools ask you for an appropriate mode, which is also
    reflected directly in the profile itself:
   </para>
      <informaltable>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>
                <para>
                  <emphasis>Option</emphasis>
                </para>
              </entry>
              <entry>
                <para>
                  <emphasis>File</emphasis>
                </para>
              </entry>
              <entry>
                <para>
                  <emphasis>Description</emphasis>
                </para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
         Inherit
        </para>
              </entry>
              <entry>
                <para>
                  <literal>ix</literal>
                </para>
              </entry>
              <entry>
                <para>
         Stay in the same (parent's) profile.
        </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
         Profile
        </para>
              </entry>
              <entry>
                <para>
                  <literal>Px</literal>
                </para>
              </entry>
              <entry>
                <para>
         Requires that a separate profile exists for the executed program.
         Use <literal>px</literal> to avoid environment scrubbingi (less
         secure).
        </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
         Child profile
        </para>
              </entry>
              <entry>
                <para>
                  <literal>Cx</literal>
                </para>
              </entry>
              <entry>
                <para>
         Requires that a local profile exists for the executed program. Use
         <literal>cx</literal> to avoid environment scrubbing (less secure).
        </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
         Unconfined
        </para>
              </entry>
              <entry>
                <para>
                  <literal>Ux</literal>
                </para>
              </entry>
              <entry>
                <para>
         Executes the program without a profile. Avoid running programs in
         unconfined mode for security reasons. Use <literal>ux</literal> to
         avoid environment scrubbing (less secure).
        </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
         Allow Executable Mapping
        </para>
              </entry>
              <entry>
                <para>
                  <literal>m</literal>
                </para>
              </entry>
              <entry>
                <para>
         allow <envar>PROT_EXEC</envar> with <command>mmap(2)</command>
         calls
        </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
      <warning>
        <title>Running in ux Mode</title>
        <para>
     Avoid running programs in ux mode as much as possible. A program
     running in ux mode is not only totally unprotected by <phrase>AppArmor</phrase>, but child
     processes inherit certain environment variables from the parent that
     might influence the child's execution behavior and create possible
     security risks.
    </para>
      </warning>
      <para>
    For more information about the different file execute modes, refer to
    the <command>apparmor.d(5)</command> man page. For more information
    about setgid and setuid environment scrubbing, refer to the
    <command>ld.so(8)</command> man page.
   </para>
    </sect2>
    <sect2 xml:id="sec.aaquick.profile_structure.pathnames_globbing">
      <title>Rules: Paths and Globbing</title>
      <para><phrase>AppArmor</phrase> supports explicit handling of directories. Use a trailing
    <literal>/</literal> for any directory path that needs to be explicitly
    distinguished:
   </para>
      <variablelist>
        <varlistentry>
          <term>
            <filename>/some/random/example/*   r</filename>
          </term>
          <listitem>
            <para>
       Allow read access to files in the
       <filename>/some/random/example</filename> directory.
      </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <filename>/some/random/example/   r</filename>
          </term>
          <listitem>
            <para>
       Allow read access to the directory only.
      </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <filename>/some/**/   r</filename>
          </term>
          <listitem>
            <para>
       Give read access to any directories (but not to any file) below
       <filename>/some</filename>.
      </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <filename>/some/random/example/**   r</filename>
          </term>
          <listitem>
            <para>
       Give read access to files and directories under
       <filename>/some/random/example</filename>.
      </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <filename>/some/random/example/**[^/]   r</filename>
          </term>
          <listitem>
            <para>
       Give read access to files under
       <filename>/some/random/example</filename>. Explicitly exclude
       directories (<literal>[^/]</literal>).
      </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
    To spare users from specifying similar paths all over again, <phrase>AppArmor</phrase>
    supports basic globbing:
   </para>
      <informaltable>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>
                <para>
                  <emphasis>Glob</emphasis>
                </para>
              </entry>
              <entry>
                <para>
                  <emphasis>Description</emphasis>
                </para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <para>
                  <literal>*</literal>
                </para>
              </entry>
              <entry>
                <para>
         Substitutes for any number of characters, except
         <literal>/</literal>.
        </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <literal>**</literal>
                </para>
              </entry>
              <entry>
                <para>
         Substitutes for any number of characters, including
         <literal>/</literal>.
        </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <literal>?</literal>
                </para>
              </entry>
              <entry>
                <para>
         Substitutes for any single character, except <literal>/</literal>.
        </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <literal>[abc]</literal>
                </para>
              </entry>
              <entry>
                <para>
         Substitutes for the single character <literal>a</literal>,
         <literal>b</literal>, or <literal>c</literal>.
        </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <literal>[a-c]</literal>
                </para>
              </entry>
              <entry>
                <para>
         Substitutes for the single character <literal>a</literal>,
         <literal>b</literal>, or <literal>c</literal>.
        </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <literal>{ab,cd}</literal>
                </para>
              </entry>
              <entry>
                <para>
         Expand to one rule to match <literal>ab</literal> and another to
         match <literal>cd</literal>.
        </para>
              </entry>
            </row>
            <row>
              <entry>
                <para>
                  <literal>[^a]</literal>
                </para>
              </entry>
              <entry>
                <para>
         Substitutes for any character except <literal>a</literal>.
        </para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>
    </sect2>
    <sect2 xml:id="sec.aaquick.profile_structure.rules.audit">
      <title>Rules: Auditing rules</title>
      <para><phrase>AppArmor</phrase> provides the user with the ability to audit given rules so that
    when they are matched, an audit message will appear in the audit log. To
    enable audit messages for a given rule the audit keyword is prepended to
    the rule:
   </para>
      <screen>audit /path/to/file1  w,  # allow write to /path/to/file1, with logging
audit deny /path/to/file2 r,  # deny read to /path/to/file2, with logging
</screen>
    </sect2>
    <sect2 xml:id="sec.aaquick.profile_structure.hats">
      <title>Hats</title>
      <para>
    An <phrase>AppArmor</phrase> profile represents a security policy for an individual program
    instance or process. It applies to an executable program, but if a
    portion of the program needs different access permissions than other
    portions, the program can <quote>change hats</quote> to use a different
    security context, distinctive from the access of the main program. This
    is known as a hat or subprofile.
   </para>
      <para>
    A profile can have an arbitrary number of hats, but there are only two
    levels: a hat cannot have further hats.
   </para>
      <para>
    The <phrase>AppArmor</phrase> ChangeHat feature can be used by applications to access hats
    during execution. Currently the package
    <systemitem class="resource">apache2-mod_apparmor</systemitem> utilizes
    ChangeHat to provide sub-process confinement for the Apache Web server
    container.
   </para>
    </sect2>
  </sect1>
  <sect1 xml:id="sec.aaquick.pam_apparmor">
    <title>Confining Users with pam_apparmor</title>
    <para>
   The pam_apparmor PAM module allows applications to confine authenticated
   users into subprofiles based on group names, user names, or default
   profile. To accomplish this, pam_apparmor needs to be registered as a PAM
   session module.
  </para>
    <para>
   Details about how to set up and configure pam_apparmor can be found in
   <filename>/usr/share/doc/packages/pam_apparmor/README</filename>. A HOWTO
   on setting up role-based access control (RBAC) with pam_apparmor is
   available at <link xlink:href="http://wiki.apparmor.net"/>.
  </para>
  </sect1>
  <sect1 xml:id="sec.aaquick.additions">
    <title>Syntax Highlighting in vim</title>
    <para><phrase>AppArmor</phrase> comes with its own syntax highlighting mode for the vim editor,
   defined in the <filename>apparmor.vim</filename> file. This can be useful
   when manually searching for syntax errors inside <phrase>AppArmor</phrase> profile files. The
   highlighted colors represent the following:
  </para>
    <variablelist>
      <varlistentry>
        <term>Blue</term>
        <listitem>
          <para>
      Comments that begin with <literal>#</literal> (but not #include's)
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>White</term>
        <listitem>
          <para>
      Ordinary read access lines
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Brown</term>
        <listitem>
          <para>
      Capability statements and complain flags
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Yellow</term>
        <listitem>
          <para>
      Lines that grant write access
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Green</term>
        <listitem>
          <para>
      Lines that grant execute permission (ix, Px, or px)
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Red</term>
        <listitem>
          <para>
      Lines that grant unconfined access (Ux, or ux)
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Red Background </term>
        <listitem>
          <para>
      Syntax errors that are not loading properly into the <phrase>AppArmor</phrase> modules
     </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect1>
  <sect1 xml:id="sec.aaquick.audit">
    <title>Logging and Auditing</title>
    <para>
   All <phrase>AppArmor</phrase> events are logged using the system's audit interface (the auditd
   logging to <filename>/var/log/audit/audit.log</filename>). On top of this
   infrastructure, event notification can be configured.
  </para>
    <para>
   If auditd is not running, <phrase>AppArmor</phrase> logs to the system log located under
   <filename>/var/log/messages</filename> using the <envar>LOG_KERN</envar>
   facility, or <command>journalctl</command> if no system logger is
   running.
  </para>
  </sect1>
  <sect1 xml:id="sec.aaquick.directories_files">
    <title>Directories and Files</title>
    <variablelist>
      <varlistentry>
        <term>
          <filename>/sys/kernel/security/apparmor/profiles</filename>
        </term>
        <listitem>
          <para>
      Virtualized file representing the currently loaded set of profiles.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <filename>/etc/apparmor/</filename>
        </term>
        <listitem>
          <para>
      Location of <phrase>AppArmor</phrase> configuration files.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <filename>/etc/apparmor/profiles/extras/</filename>
        </term>
        <listitem>
          <para>
      A local repository of profiles shipped with <phrase>AppArmor</phrase>, but not enabled by
      default.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <filename>/etc/apparmor.d/</filename>
        </term>
        <listitem>
          <para>
      Location of profiles, named with the convention of replacing the
      <literal>/</literal> in pathnames with <literal>.</literal> (not for
      the root <literal>/</literal>) so profiles are easier to manage. For
      example, the profile for the program
      <filename>/usr/sbin/ntpd</filename> is named
      <filename>usr.sbin.ntpd</filename>.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <filename>/etc/apparmor.d/abstractions/</filename>
        </term>
        <listitem>
          <para>
      Location of abstractions.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <filename>/etc/apparmor.d/program-chunks/</filename>
        </term>
        <listitem>
          <para>
      Location of program chunks.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <filename>/proc/*/attr/current</filename>
        </term>
        <listitem>
          <para>
      Review the confinement status of a process and the profile that is
      used to confine the process. The <command>ps
      <option>auxZ</option></command> command retrieves this information
      automatically.
     </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect1>
  <sect1>
    <title>For More Information</title>
    <para>
   To learn more about the <phrase>AppArmor</phrase> project, check out the project's home page
   under <link xlink:href="http://wiki.apparmor.net/"/>. Find more information on
   the concept and the configuration of <phrase>AppArmor</phrase> in
   <xref linkend="part.apparmor"/>.
  </para>
  </sect1>
  <xi:include href="common_copyright_quick.xml" parse="xml"/>
  <xi:include href="common_gfdl1.2_i.xml" parse="xml"/>
</article>
