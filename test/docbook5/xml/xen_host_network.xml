<!-- Converted by db4-upgrade version 1.1 -->

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="cha.xen.network">
  <title>Virtual Networking</title>
  <para>
  A VM Guest system needs some means to communicate either with other
  VM Guest systems or with a local network. The network interface to the
  VM Guest system is made of a split device driver, which means that any
  virtual Ethernet device has a corresponding network interface in Dom0.
  This interface is set up to access a virtual network that is run in
  Dom0. The bridged virtual network is fully integrated into the system
  configuration of <phrase role="productname"><phrase os="osuse">openSUSE</phrase><phrase os="sles">SUSE Linux Enterprise Server</phrase><phrase os="sled">SUSE Linux Enterprise Desktop</phrase><phrase os="slerte">SUSE Linux Enterprise Real Time Extension</phrase></phrase> and can be configured with YaST.
 </para>
  <para>
  When installing a Xen VM Host Server, a bridged network configuration will be
  proposed during normal network configuration. The user can choose to
  change the configuration during the installation and customize it to the
  local needs.
 </para>
  <para>
  If desired, Xen VM Host Server can be installed after performing a default
  Physical Server installation using the <systemitem>Install Hypervisor and
  Tools</systemitem> module in YaST. This module will prepare the system
  for hosting virtual machines, including invocation of the default bridge
  networking proposal.
 </para>
  <para>
  In case the necessary packages for a Xen VM Host Server are installed manually
  with <systemitem>rpm</systemitem> or <systemitem>zypper</systemitem>, the
  remaining system configuration has to be done by the administrator
  manually or with the help of YaST.
 </para>
  <para>
  The network scripts that are provided by Xen are not used by default in
  <phrase role="productname"><phrase os="osuse">openSUSE</phrase><phrase os="sles">SUSE Linux Enterprise Server</phrase><phrase os="sled">SUSE Linux Enterprise Desktop</phrase><phrase os="slerte">SUSE Linux Enterprise Real Time Extension</phrase></phrase>. They are only delivered for reference but disabled. The
  network configuration that is used in <phrase role="productname"><phrase os="osuse">openSUSE</phrase><phrase os="sles">SUSE Linux Enterprise Server</phrase><phrase os="sled">SUSE Linux Enterprise Desktop</phrase><phrase os="slerte">SUSE Linux Enterprise Real Time Extension</phrase></phrase> is done by means of
  the YaST system configuration similar to the configuration of network
  interfaces in <phrase role="productname"><phrase os="osuse">openSUSE</phrase><phrase os="sles">SUSE Linux Enterprise Server</phrase><phrase os="sled">SUSE Linux Enterprise Desktop</phrase><phrase os="slerte">SUSE Linux Enterprise Real Time Extension</phrase></phrase>.
 </para>
  <sect1 xml:id="sec.xen.vbridge">
    <title>Virtual Bridges</title>
    <para>
   When using <phrase role="productname"><phrase os="osuse">openSUSE</phrase><phrase os="sles">SUSE Linux Enterprise Server</phrase><phrase os="sled">SUSE Linux Enterprise Desktop</phrase><phrase os="slerte">SUSE Linux Enterprise Real Time Extension</phrase></phrase>, the system configures one bridge for each
   physical network device by default. For each virtual bridge, a physical
   Ethernet device is enslaved, and the IP address assigned to the bridge.
  </para>
    <para>
   To add a new bridge, for example after installing an additional Ethernet
   device, or to create a bridge that is not connected to a real network,
   proceed as follows:
  </para>
    <procedure>
      <step>
        <para>
     Start <menuchoice><guimenu>yast2</guimenu><guimenu>Network
     Devices</guimenu><guimenu>Network Settings</guimenu></menuchoice>.
    </para>
      </step>
      <step>
        <para>
     Click the tab <guimenu>Overview</guimenu> and press
     <guimenu>Add</guimenu>.
    </para>
      </step>
      <step>
        <para>
     Select <guimenu>Device Type</guimenu><guimenu>Bridge</guimenu>. The
     parameter <guimenu>Configuration Name</guimenu> will be set to the next
     free number. Click <guimenu>Next</guimenu>.
    </para>
      </step>
      <step>
        <para>
     Either use <guimenu>Dynamic Address (DHCP)</guimenu> as selected by
     default, or assign a static IP address to the bridge. Using
     <guimenu>Dynamic Address</guimenu> is only useful when also assigning
     a device to the bridge that is connected to some DHCP server.
    </para>
        <para>
     If you intend to create a virtual bridge that has no connection to a
     real Ethernet device, use <guimenu>Statically assigned IP
     Address</guimenu>. In this case, it is a good idea to use addresses
     from the private IP address ranges, for example,
     <literal>192.168.x.x</literal> or <literal>10.x.x.x</literal>.
    </para>
        <para>
     To create a bridge that should only serve as a connection between the
     different guests without connection to the host system, set the IP
     address to <literal>0.0.0.0</literal> and the netmask to
     <literal>255.255.255.255</literal>. The network scripts handle this
     special address as an unset IP address.
    </para>
      </step>
    </procedure>
    <para>
   After the bridge is created, it may be used by any of the Xen VM Guest
   systems. A purely virtual bridge without connection to a real network
   device is good to provide fast network connections between different
   VM Guest systems. If you provide a <systemitem>DHCP</systemitem> server
   on Dom0 that also defines routing information to the respective guest
   for the bridge, the network setup of the respective VM Guest is
   simplified.
  </para>
  </sect1>
  <sect1 xml:id="sec.xen.vdevices">
    <title>Network Devices for Guest Systems</title>
    <!--Jim: I did not find the qemu-ifup script used to create HVM vif bridges.
  could you give me a hint how ioemu devices are set up? -->
    <!-- answer: 
  There is a question to me at beginning of this section.  Answer:
  /etc/xen/qemu-ifup is the script used to configure vif devices for hvm
  guests.  Essentially it just hooks the qemu tap device to the bridge.
  -->
    <para>
   The Xen hypervisor is able to provide different types of network
   interfaces to the VM Guest systems. The preferred network device should be
   a paravirtualized network interface. This yields the highest transfer rates
   with the lowest system requirements. Up to eight network interfaces may be
   provided for each VM Guest.
  </para>
    <para>
   Systems that are not aware of paravirtualized hardware may not have this
   option. To connect systems to a network that can only run fully
   virtualized, several emulated network interfaces are available. The
   following emulations are at your disposal:
  </para>
    <itemizedlist>
      <listitem>
        <para>
     Realtek 8139 (PCI). This is the default emulated network card.
    </para>
      </listitem>
      <listitem>
        <para>
     AMD PCnet32 (PCI)
    </para>
      </listitem>
      <listitem>
        <para>
     NE2000 (PCI)
    </para>
      </listitem>
      <listitem>
        <para>
     NE2000 (ISA)
    </para>
      </listitem>
      <listitem>
        <para>
     Intel e100 (PCI)
    </para>
      </listitem>
      <listitem>
        <para>
     Intel e1000 (PCI)
    </para>
      </listitem>
    </itemizedlist>
    <para>
   All these network interfaces are software interfaces. Because every
   network interface must have a unique MAC address, an address range has
   been assigned to Xensource that can be used by these interfaces.
  </para>
    <tip>
      <title>Virtual Network Interfaces and MAC Addresses</title>
      <para>
    The default configuration of MAC addresses in virtualized environments
    creates a random MAC address that looks like 00:16:3E:xx:xx:xx.
    Normally, the amount of available MAC addresses should be big enough to
    get only unique addresses. However, if you have a very big installation,
    or if you want to make sure that no problems arise from random MAC
    address assignment, you can also manually assign these addresses.
   </para>
    </tip>
    <para>
   For debugging or system management purposes, it may be useful to know
   which virtual interface in Dom0 is connected to which Ethernet device
   in a running guest. This information may be read from the device naming
   in Dom0. All virtual devices follow the rule <literal>vif&lt;domain
   number&gt;.&lt;interface_number&gt;</literal>.
  </para>
    <para>
   For example, if you want to know the device name for the third interface
   (eth2) of the VM Guest with id 5, the device in Dom0 would be
   <literal>vif5.2</literal>. To obtain a list of all available interfaces,
   run the command <command>ip a</command>.
  </para>
    <para>
   The device naming does not contain any information about which bridge this
   interface is connected to. However, this information is available in Dom0.
   To get an overview about which interface is connected to which bridge,
   run the command <command>brctl show</command>. The output may look like
   the following:
  </para>
    <screen># brctl show
bridge name     bridge id               STP enabled     interfaces
br0             8000.001cc0309083       no              eth0
                                                        vif2.1
br1             8000.000476f060cc       no              eth1
                                                        vif2.0
br2             8000.000000000000       no
  </screen>
    <para>
   In this example, there are three configured bridges: br0, br1 and br2.
   Currently, br0 and br1 each have a real Ethernet device added: eth0 and
   eth1, respectively. There is one VM Guest running with the id 2 that has
   two Ethernet devices available. eth0 on the VM Guest is bridged with
   eth1 on the VM Host Server and eth1 on the VM Guest is connected to eth0 on
   the VM Host Server. At this time, the third bridge with the name br2 is not
   connected to any VM Guest nor any real Ethernet device.
  </para>
  </sect1>
  <sect1 xml:id="sec.xen.net.host_route">
    <title>Host-Based Routing in Xen</title>
    <para>
   Xen can be set up to use host-based routing in the controlling Dom0.
   Unfortunately, this is not yet well supported from YaST and requires
   quite an amount of manual editing of configuration files. Thus, this is a
   task that requires an advanced administrator.
  </para>
    <para>
   The following configuration will only work when using fixed IP addresses.
   Using DHCP is not practicable with this procedure, because the IP address
   must be known to both, the VM Guest and the VM Host Server system.
  </para>
    <para>
   The easiest way to create a routed guest is to change the networking from
   a bridged to a routed network. As a requirement to the following
   procedures, a VM Guest with a bridged network setup must be installed.
   For example, the VM Host Server is named earth with the IP 192.168.1.20, and
   the VM Guest has the name alice with the IP 192.168.1.21.
  </para>
    <procedure xml:id="proc.xen.network.route.ipv4">
      <title>Configuring a routed IPv4 VM Guest</title>
      <step>
        <para>
     Make sure that alice is shut down. Use <systemitem>xl</systemitem>
     commands to shut Tell thedown and check.
    </para>
      </step>
      <step>
        <para>
     Prepare the network configuration on the VM Host Server earth:
    </para>
        <substeps performance="required">
          <step>
            <para>
       Create a hotplug interface that will be used to route the traffic. To
       accomplish this, create a file named
       <filename>/etc/sysconfig/network/ifcfg-alice.0</filename> with
       the following content:
      </para>
            <screen>NAME="Xen guest alice"
BOOTPROTO="static"
STARTMODE="hotplug"
     </screen>
          </step>
          <step>
            <para>
       Edit the file <filename>/etc/sysconfig/SuSEfirewall2</filename>
       and add the following configurations:
      </para>
            <itemizedlist>
              <listitem>
                <para>
         Add alice.0 to the devices in FW_DEV_EXT:
        </para>
                <screen>FW_DEV_EXT="br0 alice.0"</screen>
              </listitem>
              <listitem>
                <para>
         Switch on the routing in the firewall:
        </para>
                <screen>FW_ROUTE="yes"</screen>
              </listitem>
              <listitem>
                <para>
         Tell the firewall which address should be forwarded:
        </para>
                <screen>FW_FORWARD="192.168.1.21/32,0/0"</screen>
              </listitem>
              <listitem>
                <para>
         Finally, restart the firewall with the command:
        </para>
                <screen>sudo systemctl restart SuSEfirewall2.service</screen>
              </listitem>
            </itemizedlist>
          </step>
          <step>
            <para>
       Add a static route to the interface of alice. To accomplish
       this, add the following line to the end of
       <filename>/etc/sysconfig/network/routes</filename>:
      </para>
            <screen>192.168.1.21  -  -  alice.0</screen>
          </step>
          <step>
            <para>
       To make sure that the switches and routers that the VM Host Server is
       connected to know about the routed interface, activate
       <literal>proxy_arp</literal> on earth. Add the following lines to
       <filename>/etc/sysctl.conf</filename>:
      </para>
            <screen>net.ipv4.conf.default.proxy_arp = 1
net.ipv4.conf.all.proxy_arp = 1</screen>
          </step>
          <step>
            <para>
       Activate all changes with the commands:
      </para>
            <screen>sudo systemctl restart systemd-sysctl.service wicked.service</screen>
          </step>
        </substeps>
      </step>
      <step>
        <para>
     Proceed with configuring the Xen configuration of the VM Guest.
    </para>
        <substeps performance="required">
          <step>
            <para>
       Change the vif interface configuration for alice as described in
       <xref linkend="sec.xen.manage.xl"/>.
      </para>
          </step>
          <step>
            <para>
       Remove the snippet
      </para>
            <screen>bridge=br0</screen>
          </step>
          <step>
            <para>
       And add the following one:
      </para>
            <screen>vifname=vifalice.0</screen>
            <para>
       or
      </para>
            <screen>vifname=vifalice.0=emu</screen>
            <para>
       for a fully virtualized domain.
      </para>
          </step>
          <step>
            <para>
       Change the script that is used to set up the interface to the
       following:
      </para>
            <screen>script=/etc/xen/scripts/vif-route-ifup</screen>
          </step>
          <step>
            <para>
       Activate the new configuration and start the VM Guest.
      </para>
          </step>
        </substeps>
      </step>
      <step>
        <para>
     The remaining configuration tasks must be accomplished from inside the
     VM Guest.
    </para>
        <substeps performance="required">
          <step>
            <para>
       Open a console to the VM Guest with <command>xl console
       <replaceable>domain</replaceable></command> and log in.
      </para>
          </step>
          <step>
            <para>
       Check that the guest IP is set to 192.168.1.21.
      </para>
          </step>
          <step>
            <para>
       Provide VM Guest with a host route and a default gateway to the
       VM Host Server. Do this by adding the following lines to
       <filename>/etc/sysconfig/network/routes</filename>:
      </para>
            <screen>192.168.1.20 - - eth0
default 192.168.1.20 - -    
     </screen>
          </step>
        </substeps>
      </step>
      <step>
        <para>
     Finally, test the network connection from the VM Guest to the world
     outside as well as from the network to your VM Guest.
    </para>
      </step>
    </procedure>
  </sect1>
  <sect1 xml:id="sec.xen.net.masquerade">
    <title>Creating a Masqueraded Network Setup</title>
    <para>
   Creating a masqueraded network setup is quite similar to the routed
   setup. However, there is no proxy_arp needed, and some firewall rules are
   different. To create a masqueraded network to a guest dolly with
   the IP address 192.168.100.1 where the host has its external interface on
   <literal>br0</literal>, proceed as follows. For easier configuration,
   only the already installed guest is modified to use a masqueraded
   network:
  </para>
    <procedure>
      <title>Configuring a masqueraded IPv4 VM Guest</title>
      <step>
        <para>
     Shut down the VM Guest system with <command>xl shutdown
     <replaceable>domain</replaceable></command>.
    </para>
      </step>
      <step>
        <para>
     Prepare the network configuration on the VM Host Server:
    </para>
        <substeps performance="required">
          <step>
            <para>
       Create a hotplug interface that will be used to route the traffic. To
       accomplish this, create a file named
       <filename>/etc/sysconfig/network/ifcfg-dolly.0</filename>
       with the following content:
      </para>
            <screen>NAME="Xen guest dolly"
BOOTPROTO="static"
STARTMODE="hotplug"
     </screen>
          </step>
          <step>
            <para>
       Edit the file <filename>/etc/sysconfig/SuSEfirewall2</filename>
       and add the following configurations:
      </para>
            <itemizedlist>
              <listitem>
                <para>
         Add dolly.0 to the devices in FW_DEV_DMZ:
        </para>
                <screen>FW_DEV_DMZ="dolly.0"</screen>
              </listitem>
              <listitem>
                <para>
         Switch on the routing in the firewall:
        </para>
                <screen>FW_ROUTE="yes"</screen>
              </listitem>
              <listitem>
                <para>
         Switch on masquerading in the firewall:
        </para>
                <screen>FW_MASQUERADE="yes"</screen>
              </listitem>
              <listitem>
                <para>
         Tell the firewall which network should be masqueraded:
        </para>
                <screen>FW_MASQ_NETS="192.168.100.1/32"</screen>
              </listitem>
              <listitem>
                <para>
         Remove the networks from the masquerading exceptions:
        </para>
                <screen>FW_NOMASQ_NETS=""</screen>
              </listitem>
              <listitem>
                <para>
         Finally, restart the firewall with the command:
        </para>
                <screen>sudo systemctl restart SuSEfirewall2.service</screen>
              </listitem>
            </itemizedlist>
          </step>
          <step>
            <para>
       Add a static route to the interface of dolly. To accomplish
       this, add the following line to the end of
       <filename>/etc/sysconfig/network/routes</filename>:
      </para>
            <screen>192.168.100.1 - - dolly.0</screen>
          </step>
          <step>
            <para>
       Activate all changes with the command:
      </para>
            <screen>sudo systemctl restart wicked.service</screen>
          </step>
        </substeps>
      </step>
      <step>
        <para>
     Proceed with configuring the Xen configuration of the VM Guest.
    </para>
        <substeps performance="required">
          <step>
            <para>
       Change the vif interface configuration for dolly as described
       in <xref linkend="sec.xen.manage.xl"/>.
      </para>
          </step>
          <step>
            <para>
       Remove the entry:
      </para>
            <screen>bridge=br0</screen>
          </step>
          <step>
            <para>
       And add the following one:
      </para>
            <screen>vifname=vifdolly.0</screen>
          </step>
          <step>
            <para>
       Change the script that is used to set up the interface to the
       following:
      </para>
            <screen>script=/etc/xen/scripts/vif-route-ifup</screen>
          </step>
          <step>
            <para>
       Activate the new configuration and start the VM Guest.
      </para>
          </step>
        </substeps>
      </step>
      <step>
        <para>
     The remaining configuration tasks have to be accomplished from inside
     the VM Guest.
    </para>
        <substeps performance="required">
          <step>
            <para>
       Open a console to the VM Guest with <command>xl console
       <replaceable>domain</replaceable></command> and log in.
      </para>
          </step>
          <step>
            <para>
       Check whether the guest IP is set to 192.168.100.1.
      </para>
          </step>
          <step>
            <para>
       Provide VM Guest with a host route and a default gateway to the
       VM Host Server. Do this by adding the following lines to
       <filename>/etc/sysconfig/network/routes</filename>:
      </para>
            <screen>192.168.1.20 - - eth0
default 192.168.1.20 - -    
     </screen>
          </step>
        </substeps>
      </step>
      <step>
        <para>
     Finally, test the network connection from the VM Guest to the outside
     world.
    </para>
      </step>
    </procedure>
  </sect1>
  <!-- TODO: remove next when done with previous two sections -->
  <sect1 xml:id="sec.xen.net_special">
    <title>Special Configurations</title>
    <para>
   There are many network configuration possibilities available to Xen.
   The following configurations are not activated by default:
  </para>
    <sect2 xml:id="sec.xen.net.throttle">
      <title>Bandwidth Throttling in Virtual Networks</title>
      <para>
    With Xen, you may limit the network transfer rate a virtual guest may
    use to access a bridge. To configure this, you will have to modify the
    VM Guest configuration as described in
    <xref linkend="sec.xen.manage.xl"/>.
   </para>
      <para>
    In the configuration file, first search for the device that is connected
    to the virtual bridge. The configuration looks like the following:
   </para>
      <screen>vif = [ 'mac=00:16:3e:4f:94:a9,bridge=br0' ]</screen>
      <para>
    To add a maximum transfer rate, add a parameter
    <systemitem>rate</systemitem> to this configuration as in:
   </para>
      <screen>vif = [ 'mac=00:16:3e:4f:94:a9,bridge=br0,rate=100Mb/s' ]</screen>
      <para>
    Note that the rate is either <literal>Mb/s</literal> (megabits per
    second) or <literal>MB/s</literal> (megabytes per second). In the above
    example, the maximum transfer rate of the virtual interface is 100
    megabits. By default, there is no limitation to the bandwidth of a guest
    to the virtual bridge.
   </para>
      <para>
    It is even possible to fine-tune the behavior by specifying the time
    window that is used to define the granularity of the credit
    replenishment:
   </para>
      <screen>vif = [ 'mac=00:16:3e:4f:94:a9,bridge=br0,rate=100Mb/s@20ms' ]</screen>
    </sect2>
    <sect2 xml:id="sec.xen.net.monitor">
      <title>Monitoring the Network Traffic</title>
      <para>
    To monitor the traffic on a specific interface, the little application
    <systemitem>iftop</systemitem> is a nice program that displays the
    current network traffic in a terminal.
   </para>
      <para>
    When running a Xen VM Host Server, you have to define the interface that is
    monitored. The interface that Dom0 uses to get access to the physical
    network is the bridge device, for example <systemitem>br0</systemitem>.
    This, however, may vary on your system. To monitor all traffic to the
    physical interface, run a terminal as <systemitem class="username">root</systemitem> and use the command:
   </para>
      <screen>iftop -i br0</screen>
      <para>
    To monitor the network traffic of a special network interface of a
    specific VM Guest, supply the correct virtual interface. For example,
    to monitor the first Ethernet device of the domain with id 5, use the
    command:
   </para>
      <screen>ftop -i vif5.0</screen>
      <para>
    To quit <command>iftop</command>, press the key <keycap>Q</keycap>. More
    options and possibilities are available in the manual page <command>man
    8 iftop</command>.
   </para>
    </sect2>
    <sect2 xml:id="sec.xen.net.vlan">
      <title>Using VLAN Interfaces</title>
      <para>
    Sometimes, it is necessary to create a private connection either between
    two Xen hosts or between a number of VM Guest systems. For example,
    if you want to migrate VM Guest to hosts in a different network
    segment, or if you want to create a private bridge that only VM Guest
    systems may connect to, even when running on different VM Host Server systems.
    An easy way to build such connections is to set up VLAN networks.
   </para>
      <para>
    VLAN interfaces are commonly set up on the VM Host Server and either
    interconnect the different VM Host Server systems, or they may be set up as a
    physical interface to an otherwise virtual-only bridge. It is even
    possible to create a bridge with a VLAN as a physical interface that has
    no IP address in the VM Host Server. That way, the guest systems have no
    possibility to access Dom0 over this network.
   </para>
      <para>
    Run the YaST module <menuchoice><guimenu>Network
    Devices</guimenu><guimenu>Network Settings</guimenu></menuchoice>.
    Follow this procedure to actually set up the VLAN device:
   </para>
      <procedure>
        <title>Setting up VLAN Interfaces with YaST</title>
        <step>
          <para>
      Press <guimenu>Add</guimenu> to create a new network interface.
     </para>
        </step>
        <step>
          <para>
      In the <guimenu>Hardware Dialog</guimenu>, select <guimenu>Device
      Type</guimenu><guimenu>VLAN</guimenu>.
     </para>
        </step>
        <step>
          <para>
      Change the value of <guimenu>Configuration Name</guimenu> to the ID of
      your VLAN. Note that VLAN ID <literal>1</literal> is commonly used for
      management purposes.
     </para>
        </step>
        <step>
          <para>
      Press <guimenu>Next</guimenu>.
     </para>
        </step>
        <step>
          <para>
      Select the interface that the VLAN device should connect to below
      <guimenu>Real Interface for VLAN</guimenu>. If the desired interface
      does not appear in the list, first set up this interface without an IP
      Address.
     </para>
        </step>
        <step>
          <para>
      Select the desired method for assigning an IP address to the VLAN
      device.
     </para>
        </step>
        <step>
          <para>
      Press <guimenu>Next</guimenu> to finish the configuration.
     </para>
        </step>
      </procedure>
      <para>
    It is also possible to use the VLAN interface as a physical interface of a
    bridge. This makes it possible to connect several VM Host Server-only networks
    and allows to live-migrate VM Guest systems that are connected to such
    a network.
   </para>
      <para>
    YaST does not always allow to set no IP address. However, this may be
    a desired feature especially if VM Host Server-only networks should be
    connected. In this case, use the special address
    <literal>0.0.0.0</literal> with netmask
    <literal>255.255.255.255</literal>. The system scripts handle this
    address as no IP address set.
   </para>
    </sect2>
  </sect1>
</chapter>
