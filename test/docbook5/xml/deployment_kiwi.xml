<!-- Converted by db4-upgrade version 1.1 -->

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="cha.autokiwi">
  <!--<title>FIXME: Automated Deployment with &kiwi;</title>-->
  <title>Automated Deployment of Preload Images</title>
  <para>
  To create such an image, see
  <link xlink:href="http://doc.opensuse.org/projects/kiwi/doc/"/>. When you
  build the ISO image, you can find the RAW file in the destination
  directory. There are many ways to dump a raw image onto a disk.
 </para>
  <itemizedlist>
    <listitem>
      <para>
    Plug the disk into a deployment server and copy the image to the raw
    device.
   </para>
    </listitem>
    <listitem>
      <para>
    Provide the raw image by means of an HTTP or FTP server and dump it on
    the disk of the client machine.
   </para>
    </listitem>
    <listitem>
      <para>
    Create a netboot image to get the image and dump it on the disk. This is
    a good method for mass deployment.
   </para>
    </listitem>
    <listitem>
      <para>
    Boot a rescue disk and do the dump manually from the rescue image.
   </para>
    </listitem>
  </itemizedlist>
  <para>
  For a quick start, it is good to use one of the methods described in
  <xref linkend="sec.autokiwi.manual"/>.
 </para>
  <sect1 xml:id="sec.autokiwi.manual">
    <title>Deploying system manually from rescue image</title>
    <variablelist>
      <varlistentry>
        <term>Deploying with generated ISO file from KIWI:</term>
        <listitem>
          <orderedlist>
            <listitem>
              <para>
        Burn the ISO image you get from the KIWI building process on
        CD/DVD.
       </para>
            </listitem>
            <listitem>
              <para>
        Boot from this medium onto the client machine.
       </para>
            </listitem>
            <listitem>
              <para>
        Select the hard disk for installation.
       </para>
            </listitem>
            <listitem>
              <para>
        Restart the client machine and boot from hard disk.
       </para>
            </listitem>
          </orderedlist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Deploying over rescue system:</term>
        <listitem>
          <orderedlist>
            <listitem>
              <para>
        Boot the client machine with a rescue system. Such systems are
        available on all SUSE installation CDs or DVDs.
       </para>
            </listitem>
            <listitem>
              <para>
        Log in as <systemitem class="username">root</systemitem>. Do not
        enter password.
       </para>
            </listitem>
            <listitem>
              <para>
        Configure your network. If you have DHCP available in your network,
        this is merely the command <command>ifup-dhcp eth0</command>. If you
        must do this manually, use the command <command>ip</command> to
        configure your network. The output starting DHCP also tells you the
        IP address of the computer.
       </para>
            </listitem>
            <listitem>
              <para>
        Listen on an unused port of your network like
        <systemitem>1234</systemitem> and dump the incoming data to disk
        with the following command:
       </para>
              <screen>netcat -l -p 1234 &gt; /dev/sda</screen>
            </listitem>
            <listitem>
              <para>
        On the imaging server, send the raw image to the client machine with
        the command:
       </para>
              <screen>netcat &lt;IP of client&gt; 1234 &lt; $HOME/preload_image/&lt;image_name&gt;</screen>
            </listitem>
            <listitem>
              <para>
        When the image is transferred, remove the rescue system from your CD
        or DVD drive and shut down the client machine. On reboot, the boot
        loader <literal>GRUB</literal> should be started on the client and
        the firstboot system will take over.
       </para>
            </listitem>
          </orderedlist>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect1>
  <sect1 xml:id="sec.autokiwi.pxe">
    <title>Automated Deployment with PXE Boot</title>
    <para>
   When doing multiple installations of an operating system on similar
   hardware, it is useful to put some effort into preparing a mass
   deployment of the operating system and to minimize the time needed for
   the actual deployment. This chapter describes this process. The goal is
   to simply plug in a computer, connect it to a network, start a network
   boot, and wait until it powers down.
  </para>
    <para>
   The following actions need to be performed in order to accomplish this
   task:
  </para>
    <variablelist>
      <varlistentry>
        <term>Set up a boot and install server</term>
        <listitem>
          <para>
      A dedicated machine is needed, that should be prepared to offer PXE
      boot as well as an FTP or Web server to provide a preload image. It is
      a good idea to give the machine enough memory to hold all necessary
      installation data in memory. For a default installation, you should
      have at least 4 GByte of memory. All the necessary tasks can be
      accomplished with SUSE Linux Enterprise Server. For more details, see
      <xref linkend="sec.autokiwi.instserver"/>.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Prepare a preload Image</term>
        <listitem>
          <para>
      The actual installation is done by the copying of a raw image of the
      operating system to the new hard disk. All features and settings must
      be prepared and tested carefully. To provide such an image, KIWI can
      be used (available in the SDK of the SUSE Linux Enterprise operating system). More
      information about image creation with KIWI is available at
      <link xlink:href="http://doc.opensuse.org/projects/kiwi/doc/"/>. For
      more details about the requirements of the preload image, see
      <xref linkend="sec.autokiwi.preloadimage"/>.
     </para>
          <para>
      The SDK containing KIWI is an add-on product for SUSE Linux Enterprise and is
      available for download from
      <link xlink:href="http://download.suse.com/"/>. Search for
      <literal>SUSE Linux Enterprise Software Development Kit</literal>.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Create an initial system for deployment</term>
        <listitem>
          <para>
      This is a task that requires some Linux expertise. A description on
      how this can be achieved by means of an example installation is
      available at <xref linkend="sec.autokiwi.initrd"/>.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Configure the boot server for automatic deployment</term>
        <listitem>
          <para>
      PXE boot must be told to boot the installation system, that in turn
      will take the preload image from the server and copy it to the hard
      disk.
     </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <sect2 xml:id="sec.autokiwi.instserver">
      <title>Set Up a Boot and Install Server</title>
      <para>
    There are four steps to accomplish in order to perform this task after a
    SUSE Linux Enterprise Server installation:
   </para>
      <procedure xml:id="proc.autokiwi.instserver">
        <step>
          <para>
      Set up the installation source as described in
      <xref linkend="sec.deployment.remoteinst.instserver"/>. Choose
      an HTTP, or FTP network server.
     </para>
        </step>
        <step>
          <para>
      Set up a TFTP server to hold a boot image (this image will be created
      in a later step). This is described in
      <xref linkend="sec.deployment.remoteinst.boot.tftp"/>.
     </para>
        </step>
        <step>
          <para>
      Set up a DHCP server to assign IP addresses to all machines and to
      reveal the location of the TFTP server to the target system. This is
      described in
      <xref linkend="sec.deployment.remoteinst.boot.dhcp"/>.
     </para>
        </step>
        <step>
          <para>
      Prepare the installation server PXE boot. This is described in further
      detail in <xref linkend="sec.deployment.remoteinst.boot.pxe"/>.
     </para>
        </step>
      </procedure>
      <para>
    Note that the actual installation process will greatly benefit if you
    provide enough memory on this machine to hold the preload image. Also,
    using gigabit Ethernet will speed up the deployment process considerably
    (compared to slower networks).
   </para>
    </sect2>
    <sect2 xml:id="sec.autokiwi.preloadimage">
      <title>Creating a Preload Image</title>
      <para>
    The process of creating images with KIWI is described at
    <link xlink:href="http://doc.opensuse.org/projects/kiwi/doc/"/>. However,
    to create a useful image for mass deployment, several considerations
    should be taken into account:
   </para>
      <itemizedlist>
        <listitem>
          <para>
      A typical preload image will use the following type:
     </para>
          <screen>&lt;type primary="true" filesystem="btrfs" boot="oemboot/suse-SLES12"&gt;vmx&lt;/type&gt;</screen>
        </listitem>
        <listitem>
          <para>
      During the setup of a preload image, the image creation process is run
      multiple times. The repositories needed to build the image should be
      available on the local computer.
     </para>
        </listitem>
        <listitem>
          <para>
      Depending on the desired usage of the preload, some effort should be
      invested in configuring firstboot. Find more details about firstboot
      in <xref linkend="cha.deployment_firstboot"/>. With this method
      you can also require the user to do initial configurations at the
      first bootup of the system.
     </para>
        </listitem>
        <listitem>
          <para>
      Many additional features can be configured into the image, like adding
      update repositories or doing an update on initial bootup. However, it
      is impossible to describe all possibilities in this document, and
      (depending on the requirements) the creation of the preload image
      requires in-depth knowledge of the imaging system KIWI, as well as
      several other technologies used in <phrase role="productname"><phrase os="osuse">openSUSE</phrase><phrase os="sles">SUSE Linux Enterprise Server</phrase><phrase os="sled">SUSE Linux Enterprise Desktop</phrase><phrase os="slerte">SUSE Linux Enterprise Real Time Extension</phrase></phrase>.
     </para>
        </listitem>
      </itemizedlist>
      <para>
    The actual image to be deployed should be available from the FTP or HTTP
    server that you provided on the installation server.
   </para>
    </sect2>
    <sect2 xml:id="sec.autokiwi.initrd">
      <title>Creating an Initial System to Deploy a Preload Image</title>
      <para>
    In order to run an automatic deployment, it is necessary to start an
    initial Linux system on the target computer. During a typical
    installation, the kernel and initial RAM file system are read from some
    boot medium and started by the bios. The needed functionality can be
    implemented in the RAM file system , which together with the kernel will
    serve as the initial system.
   </para>
      <para>
    The main features that must be provided by the initial system is the
    enabling of access to the hard disk and the making available of the
    network connection. Both of these functions are dependent on the
    hardware onto which you want to deploy. In theory it is possible to
    create an initial system from scratch, but to simplify this task it is
    also possible to modify the initial RAM file system used by the machine
    during boot.
   </para>
      <para>
    The following procedure is only one example of how to create the needed
    initial RAM file system:
   </para>
      <procedure>
        <step>
          <para>
      Do a standard installation of <phrase role="productname"><phrase os="osuse">openSUSE</phrase><phrase os="sles">SUSE Linux Enterprise Server</phrase><phrase os="sled">SUSE Linux Enterprise Desktop</phrase><phrase os="slerte">SUSE Linux Enterprise Real Time Extension</phrase></phrase> on the target system.
     </para>
        </step>
        <step>
          <para>
      Install the package <systemitem>busybox</systemitem> on the system.
     </para>
        </step>
        <step>
          <para><remark condition="clarity">
      2014-09-05 - fs: FIXME: Needs to be translated to dracut
     </remark>
      Create a new RAM file system with the following command:
     </para>
          <screen>dracut -a busybox</screen>
          <para>
      The parameter <systemitem>-a busybox</systemitem> adds the multi call
      binary <systemitem>busybox</systemitem> to the RAM file system. After
      doing this, many standard unix commands are available inside this
      system.
     </para>
        </step>
        <step>
          <para>
      Copy the new RAM file system and the kernel to your boot server with
      the command:
     </para>
          <screen>scp /boot/initrd /boot/vmlinuz pxe.example.com:</screen>
          <para>
      Replace pxe.example.com with the name of your local boot server or ip
      address.
     </para>
        </step>
        <step>
          <para>
      Log in to your bootserver as user
      <systemitem class="username">root</systemitem>, and create a directory
      where you can modify the RAM file system:
     </para>
          <screen>mkdir ~/bootimage</screen>
        </step>
        <step>
          <para>
      Change your working directory to this directory with the command
      <command>cd ~/bootimage</command>.
     </para>
        </step>
        <step>
          <para>
      Unpack the previously copied initial RAM file system with the command:
     </para>
          <screen>zcat ../initrd | cpio -i</screen>
        </step>
        <step>
          <para>
      Edit the file <filename>run_all.sh</filename>.
     </para>
        </step>
        <step>
          <para>
      Search for the following line, delete it and the rest of the file:
     </para>
          <screen>[ "$debug" ] &amp;&amp; echo preping 21-nfs.sh </screen>
        </step>
        <step>
          <para>
      Add the following lines to the end of the files
      <filename>run_all.sh</filename>:
     </para>
          <screen>[ "$debug" ] &amp;&amp; echo preping 92-install.sh
[ "$debug" ] &amp;&amp; echo running 92-install.sh
source boot/92-install.sh
[ "$modules" ] &amp;&amp; load_modules
     </screen>
        </step>
        <step>
          <para>
      Create a new script <filename>boot/92-install.sh</filename> with the
      following content:
     </para>
          <screen>#!/bin/bash
if [ "$(get_param rawimage)" ]; then
  rawimage=$(get_param rawimage)
  if  [ "$(get_param rawdevice)" ]; then
    rawdevice=$(get_param rawdevice)
    echo "wget -O ${rawdevice} ${rawimage}"
    wget -O ${rawdevice} ${rawimage}
    sync
    sleep 5
    echo "DONE"
  fi
fi
# /bin/bash
/bin/poweroff -f
</screen>
        </step>
        <step>
          <para>
      If you want to have a debug shell before the computer switches off,
      remove the comment sign before <filename>/bin/bash</filename>.
     </para>
        </step>
        <step>
          <para>
      Make this script executable with the command <command>chmod 755
      boot/92-install.sh</command>.
     </para>
        </step>
        <step>
          <para>
      Create a new initial RAM file system with the commands:
     </para>
          <screen>mkdir -p /srv/tftpboot
find . | cpio --quiet -H newc -o | gzip -9 -n &gt; \
/srv/tftpboot/initrd.boot</screen>
        </step>
        <step>
          <para>
      Copy the kernel to this directory:
     </para>
          <screen>cp ../vmlinuz /srv/tftpboot/linux.boot</screen>
        </step>
      </procedure>
      <para>
    The initial RAM file system is now prepared to take two new kernel
    command line parameters. The parameter
    <systemitem>rawimage=&lt;URL&gt;</systemitem> is used to identify the
    location of the preload image. Any URL that is understood by wget can be
    used. The parameter <systemitem>rawdevice=&lt;device&gt;</systemitem> is
    used to identify the block device for the hard disk on the target
    machine.
   </para>
    </sect2>
    <sect2>
      <title>Boot Server Configuration</title>
      <para>
    The configuration of the boot server is covered in detail in several
    different chapters as listed in
    <xref linkend="sec.autokiwi.instserver"/>. This section should give a
    checklist that covers steps that are necessary to configure the system.
   </para>
      <itemizedlist>
        <listitem>
          <para>
      Set up a DHCP server. The subnet where the machines are installed
      needs the additional lines:
     </para>
          <screen>filename "pxelinux.0";
next-server 192.168.1.115;</screen>
          <para>
      In this example, 192.168.1.115 is the ip address of the PXE server
      pxe.example.com.
     </para>
        </listitem>
        <listitem>
          <para>
      Configure a PXE server as described in
      <xref linkend="sec.deployment.remoteinst.boot.pxe"/>. When
      editing <filename>/srv/tftpboot/pxelinux.cfg/default</filename>, add
      the following entries:
     </para>
          <screen>default bootinstall
label bootinstall
  kernel linux.boot
  append initrd=initrd.boot \
  rawimage=ftp://192.168.1.115/preload/preloadimage.raw rawdevice=/dev/sda</screen>
        </listitem>
        <listitem>
          <para>
      Set up an ftp server and copy your prepared preload image to
      <filename>/srv/ftp/preload/preloadimage.raw</filename>.
     </para>
        </listitem>
      </itemizedlist>
      <para>
    Test your setup by booting the target system with PXE network boot. This
    will automatically copy the prepared preload image to hard disk and
    switch off the machine when ready.
   </para>
    </sect2>
    <!-- outline:
   - install system
   - create initrd with additional network modules, activate -f busybox -D eth?
     - explain how to solve dependencies ...
       or: add network module, nfs, sunrpc and lockd to kernel modules
   - copy vmlinuz and initrd to installation server
   - edit run_all.sh, remove bootup procedures and add script like:
#!/bin/bash
#
#%stage: setup
#
#%dontshow
#
##### install raw image
##
## install a raw image if rawimage=url was given on the commandline.
##
## Command line parameters
## 
##
## rawimage=url         deploy raw image
## rawdevice=device     device where to dump the image
##

if [ "$(get_param rawimage)" ]; then
  rawimage=$(get_param rawimage)

  if  [ "$(get_param rawdevice)" ]; then
    rawdevice=$(get_param rawdevice)

    echo "wget -O ${rawdevice} ${rawimage}"
    wget -O ${rawdevice} ${rawimage}
    sync
    sleep 5
    echo "DONE"
  fi
fi

# switch off
/bin/poweroff -f

   Use pxe boot configuration like:
   default preload

   label preload
     kernel linux.boot
     append initrd=initrd.boot rawimage=ftp://192.168.1.116/preload/os.raw rawdevice=/dev/sda

     -->
  </sect1>
  <!-- rescue image, dann: ifup-dhcp eth0 dann wird IP angezeigt -->
  <!-- deployment server: netcat IP port; Client: netcat -l -p port >
   /dev/sda -->
  <!-- firstboot_keyboard does not work -->
  <!-- firstboot_network_write does not work -->
  <!-- module firstboot_license_novell does not work. -->
  <!-- module firstboot_bootloader_reconfigure does not work. -->
  <!-- <para>netcat, wget -o -, nfsmount and dd</para> -->
</chapter>
