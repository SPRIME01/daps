<!-- Converted by db4-upgrade version 1.1 -->

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="cha.apparmor.concept">
  <title>Immunizing Programs</title>
  <para>
  Effective hardening of a computer system requires minimizing the number of
  programs that mediate privilege, then securing the programs as much as
  possible. With <phrase>AppArmor</phrase>, you only need to profile the programs that are
  exposed to attack in your environment, which drastically reduces the
  amount of work required to harden your computer. <phrase>AppArmor</phrase> profiles enforce
  policies to make sure that programs do what they are supposed to do, but
  nothing else.
 </para>
  <para><phrase>AppArmor</phrase> provides immunization technologies that protect applications from the
  inherent vulnerabilities they possess. After installing <phrase>AppArmor</phrase>, setting up
  <phrase>AppArmor</phrase> profiles, and rebooting the computer, your system becomes immunized
  because it begins to enforce the <phrase>AppArmor</phrase> security policies. Protecting
  programs with <phrase>AppArmor</phrase> is referred to as <emphasis>immunizing</emphasis>.
 </para>
  <para>
  Administrators need only concern themselves with the applications that are
  vulnerable to attacks, and generate profiles for these. Hardening a system
  thus comes down to building and maintaining the <phrase>AppArmor</phrase> profile set and
  monitoring any policy violations or exceptions logged by <phrase>AppArmor</phrase>'s reporting
  facility.
 </para>
  <para>
  Users should not notice <phrase>AppArmor</phrase> at all. It runs <quote>behind the
  scenes</quote> and does not require any user interaction. Performance is
  not noticeably affected by <phrase>AppArmor</phrase>. If some activity of the application is
  not covered by an <phrase>AppArmor</phrase> profile or if some activity of the application is
  prevented by <phrase>AppArmor</phrase>, the administrator needs to adjust the profile of this
  application to cover this kind of behavior.
 </para>
  <para><phrase>AppArmor</phrase> sets up a collection of default application profiles to protect
  standard Linux services. To protect other applications, use the <phrase>AppArmor</phrase> tools
  to create profiles for the applications that you want protected. This
  chapter introduces the philosophy of immunizing programs. Proceed to
  <xref linkend="cha.apparmor.profiles"/>,
  <xref linkend="cha.apparmor.yast"/>, or
  <xref linkend="cha.apparmor.commandline"/> if you are ready to build and
  manage <phrase>AppArmor</phrase> profiles.
 </para>
  <para><phrase>AppArmor</phrase> provides streamlined access control for network services by
  specifying which files each program is allowed to read, write, and
  execute, and which type of network it is allowed to access. This ensures
  that each program does what it is supposed to do, and nothing else. <phrase>AppArmor</phrase>
  quarantines programs to protect the rest of the system from being damaged
  by a compromised process.
 </para>
  <para><phrase>AppArmor</phrase> is a host intrusion prevention or mandatory access control scheme.
  Previously, access control schemes were centered around users because they
  were built for large timeshare systems. Alternatively, modern network
  servers largely do not permit users to log in, but instead provide a
  variety of network services for users (such as Web, mail, file, and print
  servers). <phrase>AppArmor</phrase> controls the access given to network services and other
  programs to prevent weaknesses from being exploited.
 </para>
  <tip>
    <title>Background Information for <phrase>AppArmor</phrase></title>
    <para>
   To get a more in-depth overview of <phrase>AppArmor</phrase> and the overall concept behind
   it, refer to <xref linkend="sec.apparmor.intro.background"/>.
  </para>
  </tip>
  <sect1 xml:id="sec.apparmor.concept.tools">
    <title>Introducing the <phrase>AppArmor</phrase> Framework</title>
    <para>
   This section provides a very basic understanding of what is happening
   <quote>behind the scenes</quote> (and under the hood of the YaST
   interface) when you run <phrase>AppArmor</phrase>.
  </para>
    <para>
   An <phrase>AppArmor</phrase> profile is a plain text file containing path entries and access
   permissions. See <xref linkend="sec.apparmor.profiles.parts"/> for a
   detailed reference profile. The directives contained in this text file
   are then enforced by the <phrase>AppArmor</phrase> routines to quarantine the process or
   program.
  </para>
    <para>
   The following tools interact in the building and enforcement of <phrase>AppArmor</phrase>
   profiles and policies:
  </para>
    <variablelist>
      <varlistentry>
        <term>
          <command>aa-status</command>
        </term>
        <listitem>
          <para><command>aa-status</command> reports various aspects of the current
      state of the running <phrase>AppArmor</phrase> confinement.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <command>aa-unconfined</command>
        </term>
        <listitem>
          <para><command>aa-unconfined</command> detects any application running on
      your system that listens for network connections and is not protected
      by an <phrase>AppArmor</phrase> profile. Refer to
      <xref linkend="sec.apparmor.commandline.profiling.summary.unconfined"/>
      for detailed information about this tool.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <command>aa-autodep</command>
        </term>
        <listitem>
          <para><command>aa-autodep</command> creates a basic framework of a profile
      that needs to be fleshed out before it is put to use in production.
      The resulting profile is loaded and put into complain mode, reporting
      any behavior of the application that is not (yet) covered by <phrase>AppArmor</phrase>
      rules. Refer to
      <xref linkend="sec.apparmor.commandline.profiling.summary.autodep"/>
      for detailed information about this tool.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <command>aa-genprof</command>
        </term>
        <listitem>
          <para><command>aa-genprof</command> generates a basic profile and asks you
      to refine this profile by executing the application and generating log
      events that need to be taken care of by <phrase>AppArmor</phrase> policies. You are guided
      through a series of questions to deal with the log events that have
      been triggered during the application's execution. After the profile
      has been generated, it is loaded and put into enforce mode. Refer to
      <xref linkend="sec.apparmor.commandline.profiling.summary.genprof"/>
      for detailed information about this tool.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <command>aa-logprof</command>
        </term>
        <listitem>
          <para><command>aa-logprof</command> interactively scans and reviews the log
      entries generated by an application that is confined by an <phrase>AppArmor</phrase>
      profile in both complain and enforced modes. It assists you in
      generating new entries in the profile concerned. Refer to
      <xref linkend="sec.apparmor.commandline.profiling.summary.logprof"/>
      for detailed information about this tool.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <command>aa-easyprof</command>
        </term>
        <listitem>
          <para><command>aa-easyprof</command> provides an easy-to-use interface for
      <phrase>AppArmor</phrase> profile generation. <command>aa-easyprof</command> supports the
      use of templates and policy groups to quickly profile an application.
      Note that while this tool can help with policy generation, its utility
      is dependent on the quality of the templates, policy groups and
      abstractions used. <command>aa-easyprof</command> may create a profile
      that is less restricted than creating the profile with
      <command>aa-genprof</command> and <command>aa-logprof</command>.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <command>aa-complain</command>
        </term>
        <listitem>
          <para><command>aa-complain</command> toggles the mode of an <phrase>AppArmor</phrase> profile
      from enforce to complain. Violations to rules set in a profile are
      logged, but the profile is not enforced. Refer to
      <xref linkend="sec.apparmor.commandline.profiling.summary.complain"/>
      for detailed information about this tool.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <command>aa-enforce</command>
        </term>
        <listitem>
          <para><command>aa-enforce</command> toggles the mode of an <phrase>AppArmor</phrase> profile from
      complain to enforce. Violations to rules set in a profile are logged
      and not permittedâ€”the profile is enforced. Refer to
      <xref linkend="sec.apparmor.commandline.profiling.summary.enforce"/>
      for detailed information about this tool.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <command>aa-disable</command>
        </term>
        <listitem>
          <para><command>aa-disable</command> disables the enforcement mode for one or
      more <phrase>AppArmor</phrase> profiles. This command will unload the profile from the
      kernel and prevent it from being loaded on <phrase>AppArmor</phrase> start-up. The
      <command>aa-enforce</command> and <command>aa-complain</command>
      utilities may be used to change this behavior.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <command>aa-exec</command>
        </term>
        <listitem>
          <para><command>aa-exec</command> launches a program confined by the
      specified <phrase>AppArmor</phrase> profile and/or namespace. If both a profile and
      namespace are specified, the command will be confined by the profile
      in the new policy namespace. If only a namespace is specified, the
      profile name of the current confinement will be used. If neither a
      profile or namespace is specified, the command will be run using
      standard profile attachmentâ€”as if run without
      <command>aa-exec</command>.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <command>aa-notify</command>
        </term>
        <listitem>
          <para><command>aa-notify</command> is a handy utility that displays <phrase>AppArmor</phrase>
      notifications in your desktop environment. You can also configure it
      to display a summary of notifications for the specified number of
      recent days. For more information, see
      <xref linkend="commandline.profiling.summary.aa-notify"/>.
     </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect1>
  <sect1 xml:id="sec.apparmor.concept.determine">
    <title>Determining Programs to Immunize</title>
    <para>
   Now that you have familiarized yourself with <phrase>AppArmor</phrase>, start selecting the
   applications for which to build profiles. Programs that need profiling
   are those that mediate privilege. The following programs have access to
   resources that the person using the program does not have, so they grant
   the privilege to the user when used:
  </para>
    <variablelist>
      <varlistentry>
        <term><systemitem class="daemon">cron</systemitem> Jobs</term>
        <listitem>
          <para>
      Programs that are run periodically by
      <systemitem class="daemon">cron</systemitem>. Such programs read input
      from a variety of sources and can run with special privileges,
      sometimes with as much as <systemitem class="username">root</systemitem> privilege. For example,
      <systemitem class="daemon">cron</systemitem> can run
      <command>/usr/sbin/logrotate</command> daily to rotate, compress, or
      even mail system logs. For instructions for finding these types of
      programs, refer to
      <xref xrefstyle="SectTitleOnPage" linkend="sec.apparmor.concept.cron"/>.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Web Applications</term>
        <listitem>
          <para>
      Programs that can be invoked through a Web browser, including CGI Perl
      scripts, PHP pages, and more complex Web applications. For
      instructions for finding these types of programs, refer to
      <xref xrefstyle="SectTitleOnPage" linkend="sec.apparmor.concept.network.web"/>.
     </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Network Agents</term>
        <listitem>
          <para>
      Programs (servers and clients) that have open network ports. User
      clients, such as mail clients and Web browsers mediate privilege.
      These programs run with the privilege to write to the user's home
      directory and they process input from potentially hostile remote
      sources, such as hostile Web sites and e-mailed malicious code. For
      instructions for finding these types of programs, refer to
      <xref xrefstyle="SectTitleOnPage" linkend="sec.apparmor.concept.network.agents"/>.
     </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>
   Conversely, unprivileged programs do not need to be profiled. For
   instance, a shell script might invoke the <command>cp</command> program
   to copy a file. Because <command>cp</command> does not by default have
   its own profile or subprofile, it inherits the profile of the parent
   shell script, so can copy any files that the parent shell script's
   profile can read and write.
  </para>
  </sect1>
  <sect1 xml:id="sec.apparmor.concept.cron">
    <title>Immunizing <systemitem class="daemon">cron</systemitem> Jobs</title>
    <para>
   To find programs that are run by
   <systemitem class="daemon">cron</systemitem>, inspect your local
   <systemitem class="daemon">cron</systemitem> configuration.
   Unfortunately, <systemitem class="daemon">cron</systemitem> configuration
   is rather complex, so there are numerous files to inspect. Periodic
   <systemitem class="daemon">cron</systemitem> jobs are run from these
   files:
  </para>
    <screen>/etc/crontab 
/etc/cron.d/* 
/etc/cron.daily/* 
/etc/cron.hourly/*
/etc/cron.monthly/* 
/etc/cron.weekly/*
</screen>
    <para><remark>sknorr, 2014-08-26: To have gone in a circle, go in a circle. Iow:
   the definition of (a) crontab is not very clear here.</remark>
   The <command>crontab</command> command lists/edits the current user's
   crontab. To manipulate <systemitem class="username">root</systemitem>'s
   <systemitem class="daemon">cron</systemitem> jobs, first become
   <systemitem class="username">root</systemitem>, and then edit the tasks with <command>crontab -e</command> or
   list them with <command>crontab -l</command>.
  </para>
  </sect1>
  <sect1 xml:id="sec.apparmor.concept.network">
    <title>Immunizing Network Applications</title>
    <para>
   An automated method for finding network server daemons that should be
   profiled is to use the <command>aa-unconfined</command> tool.
<!-- fs 2011-11-09 - see bnc #722915
     (reporting is not available in 12.1 (aa-eventd isn't maintained upstream,
      and doesn't understand the (not-so-)new audit.log format))
   You can
   also simply view a report of this information in the &yast; module (refer
   to
   <xref xrefstyle="HeadingOnPage" linkend="sec.apparmor.managing.config_reports.view.audit"/>
   for instructions).
--></para>
    <!-- bnc#880080: netstat vs. ss/ip -->
    <para>
   The <command>aa-unconfined</command> tool uses the command
   <command>netstat -nlp</command> to inspect open ports from inside your
   computer, detect the programs associated with those ports, and inspect
   the set of <phrase>AppArmor</phrase> profiles that you have loaded.
   <command>aa-unconfined</command> then reports these programs along with
   the <phrase>AppArmor</phrase> profile associated with each program, or reports
   <quote>none</quote> (if the program is not confined).
  </para>
    <note>
      <para>
    If you create a new profile, you must restart the program that has been
    profiled to have it be effectively confined by <phrase>AppArmor</phrase>.
   </para>
    </note>
    <para>
   Below is a sample <command>aa-unconfined</command> output:
  </para>
    <screen>3702<co xml:id="co.apparmor.concept.network.id"/> /usr/sbin/sshd<co xml:id="co.apparmor.concept.network.string"/> confined
   by '/usr/sbin/sshd<co xml:id="co.apparmor.concept.network.confine"/> (enforce)' 
4040 /usr/sbin/ntpd confined by '/usr/sbin/ntpd (enforce)' 
4373 /usr/lib/postfix/master confined by '/usr/lib/postfix/master (enforce)' 
4505 /usr/sbin/httpd2-prefork confined by '/usr/sbin/httpd2-prefork (enforce)'
646 /usr/lib/wicked/bin/wickedd-dhcp4 not confined
647 /usr/lib/wicked/bin/wickedd-dhcp6 not confined
5592 /usr/bin/ssh not confined
7146 /usr/sbin/cupsd confined by '/usr/sbin/cupsd (complain)'</screen>
    <calloutlist>
      <callout arearefs="co.apparmor.concept.network.id">
        <para>
     The first portion is a number. This number is the process ID number
     (PID) of the listening program.
    </para>
      </callout>
      <callout arearefs="co.apparmor.concept.network.string">
        <para>
     The second portion is a string that represents the absolute path of the
     listening program
    </para>
      </callout>
      <callout arearefs="co.apparmor.concept.network.confine">
        <para>
     The final portion indicates the profile confining the program, if any.
    </para>
      </callout>
    </calloutlist>
    <note>
      <para><command>aa-unconfined</command> requires <systemitem class="username">root</systemitem> privileges and
    should not be run from a shell that is confined by an <phrase>AppArmor</phrase> profile.
   </para>
    </note>
    <para><command>aa-unconfined</command> does not distinguish between one network
   interface and another, so it reports all unconfined processes, even those
   that might be listening to an internal LAN interface.
  </para>
    <para>
   Finding user network client applications is dependent on your user
   preferences. The <command>aa-unconfined</command> tool detects and
   reports network ports opened by client applications, but only those
   client applications that are running at the time the
   <command>aa-unconfined</command> analysis is performed. This is a problem
   because network services tend to be running all the time, while network
   client applications tend only to be running when the user is interested
   in them.
  </para>
    <para>
   Applying <phrase>AppArmor</phrase> profiles to user network client applications is also
   dependent on user preferences. Therefore, we leave the profiling of user
   network client applications as an exercise for the user.
  </para>
    <para>
   To aggressively confine desktop applications, the
   <command>aa-unconfined</command> command supports a
   <option>--paranoid</option> option, which reports all processes running
   and the corresponding <phrase>AppArmor</phrase> profiles that might or might not be associated
   with each process. The user can then decide whether each of these
   programs needs an <phrase>AppArmor</phrase> profile.
  </para>
    <para>
   If you have new or modified profiles, you can submit them to the
   <email>apparmor@lists.ubuntu.com</email> mailing list along with a use
   case for the application behavior that you exercised. The <phrase>AppArmor</phrase> team
   reviews and may submit the work into <phrase role="productname"><phrase os="osuse">openSUSE</phrase><phrase os="sles">SUSE Linux Enterprise Server</phrase><phrase os="sled">SUSE Linux Enterprise Desktop</phrase><phrase os="slerte">SUSE Linux Enterprise Real Time Extension</phrase></phrase>. We cannot guarantee
   that every profile will be included, but we make a sincere effort to
   include as much as possible so that end users can contribute to the
   security profiles that ship in <phrase role="productname"><phrase os="osuse">openSUSE</phrase><phrase os="sles">SUSE Linux Enterprise Server</phrase><phrase os="sled">SUSE Linux Enterprise Desktop</phrase><phrase os="slerte">SUSE Linux Enterprise Real Time Extension</phrase></phrase>.
  </para>
    <sect2 xml:id="sec.apparmor.concept.network.web">
      <title>Immunizing Web Applications</title>
      <para>
    To find Web applications, investigate your Web server configuration. The
    Apache Web server is highly configurable and Web applications can be
    stored in many directories, depending on your local configuration.
    <phrase role="productname"><phrase os="osuse">openSUSE</phrase><phrase os="sles">SUSE Linux Enterprise Server</phrase><phrase os="sled">SUSE Linux Enterprise Desktop</phrase><phrase os="slerte">SUSE Linux Enterprise Real Time Extension</phrase></phrase>, by default, stores Web applications in
    <filename>/srv/www/cgi-bin/</filename>. To the maximum extent possible,
    each Web application should have an <phrase>AppArmor</phrase> profile.
   </para>
      <para>
    Once you find these programs, you can use the
    <command>aa-genprof</command> and <command>aa-logprof</command> tools to
    create or update their <phrase>AppArmor</phrase> profiles.
   </para>
      <para>
    Because CGI programs are executed by the Apache Web server, the profile
    for Apache itself, <filename>usr.sbin.httpd2-prefork</filename> for
    Apache2 on <phrase role="productname"><phrase os="osuse">openSUSE</phrase><phrase os="sles">SUSE Linux Enterprise Server</phrase><phrase os="sled">SUSE Linux Enterprise Desktop</phrase><phrase os="slerte">SUSE Linux Enterprise Real Time Extension</phrase></phrase>, must be modified to add execute permissions to
    each of these programs. For instance, adding the line
    <literal>/srv/www/cgi-bin/my_hit_counter.pl rPx</literal> grants Apache
    permission to execute the Perl script
    <filename>my_hit_counter.pl</filename> and requires that there be a
    dedicated profile for <filename>my_hit_counter.pl</filename>. If
    <filename>my_hit_counter.pl</filename> does not have a dedicated profile
    associated with it, the rule should say
    <literal>/srv/www/cgi-bin/my_hit_counter.pl rix</literal> to cause
    <filename>my_hit_counter.pl</filename> to inherit the
    <filename>usr.sbin.httpd2-prefork</filename> profile.
   </para>
      <para>
    Some users might find it inconvenient to specify execute permission for
    every CGI script that Apache might invoke. Instead, the administrator
    can grant controlled access to collections of CGI scripts. For instance,
    adding the line <literal>/srv/www/cgi-bin/*.{pl,py,pyc} rix</literal>
    allows Apache to execute all files in
    <literal>/srv/www/cgi-bin/</literal> ending in <filename>.pl</filename>
    (Perl scripts) and <filename>.py</filename> or <filename>.pyc</filename>
    (Python scripts). As above, the <literal>ix</literal> part of the rule
    causes Python scripts to inherit the Apache profile, which is
    appropriate if you do not want to write individual profiles for each CGI
    script.
   </para>
      <note>
        <para>
     If you want the subprocess confinement module
     (<filename>apache2-mod-apparmor</filename>) functionality when Web
     applications handle Apache modules (<filename>mod_perl</filename> and
     <filename>mod_php</filename>), use the ChangeHat features when you add
     a profile in YaST or at the command line. To take advantage of the
     subprocess confinement, refer to
     <xref xrefstyle="SectTitleOnPage" linkend="sec.apparmor.hat.apache.managing"/>.
    </para>
      </note>
      <para>
    Profiling Web applications that use <filename>mod_perl</filename> and
    <filename>mod_php</filename> requires slightly different handling. In
    this case, the <quote>program</quote> is a script interpreted directly
    by the module within the Apache process, so no exec happens. Instead,
    the <phrase>AppArmor</phrase> version of Apache calls <command>change_hat()</command> using a
    subprofile (a <quote>hat</quote>) corresponding to the name of the URI
    requested.
   </para>
      <note>
        <para>
     The name presented for the script to execute might not be the URI,
     depending on how Apache has been configured for where to look for
     module scripts. If you have configured your Apache to place scripts in
     a different place, the different names appear in the log file when <phrase>AppArmor</phrase>
     complains about access violations. See
     <xref linkend="cha.apparmor.managing"/>.
    </para>
      </note>
      <para>
    For <filename>mod_perl</filename> and <filename>mod_php</filename>
    scripts, this is the name of the Perl script or the PHP page requested.
    For example, adding this subprofile allows the
    <filename>localtime.php</filename> page to execute and access to the
    local system time and locale files:
   </para>
      <screen>/usr/bin/httpd2-prefork {
  # ...
  ^/cgi-bin/localtime.php {
    /etc/localtime                  r,
    /srv/www/cgi-bin/localtime.php  r,
    /usr/lib/locale/**              r,
  }
}
</screen>
      <para>
    If no subprofile has been defined, the <phrase>AppArmor</phrase> version of Apache applies
    the <systemitem>DEFAULT_URI</systemitem> hat. This subprofile is
    sufficient to display a Web page. The
    <systemitem>DEFAULT_URI</systemitem> hat that <phrase>AppArmor</phrase> provides by default
    is the following:
   </para>
      <screen>^DEFAULT_URI {
    /usr/sbin/suexec2                  mixr,
    /var/log/apache2/**                rwl,
    @{HOME}/public_html                r,
    @{HOME}/public_html/**             r,
    /srv/www/htdocs                    r,
    /srv/www/htdocs/**                 r,
    /srv/www/icons/*.{gif,jpg,png}     r,
    /srv/www/vhosts                    r,
    /srv/www/vhosts/**                 r,
    /usr/share/apache2/**              r,
    /var/lib/php/sess_*                rwl 
}
    </screen>
      <para>
    To use a single <phrase>AppArmor</phrase> profile for all Web pages and CGI scripts served by
    Apache, a good approach is to edit the
    <systemitem>DEFAULT_URI</systemitem> subprofile. For more information on
    confining Web applications with Apache, see
    <xref linkend="cha.apparmor.hat"/>.
   </para>
    </sect2>
    <sect2 xml:id="sec.apparmor.concept.network.agents">
      <title>Immunizing Network Agents</title>
      <para>
    To find network server daemons and network clients (such as
    <command>fetchmail</command> or Firefox) that need to be profiled, you
    should inspect the open ports on your machine, consider the programs
    that are answering on those ports, and provide profiles for as many of
    those programs as possible. If you provide profiles for all programs
    with open network ports, an attacker cannot get to the file system on
    your machine without passing through an <phrase>AppArmor</phrase> profile policy.
   </para>
      <!-- bnc#880080: netstat vs. ss/ip -->
      <para>
    Scan your server for open network ports manually from outside the
    machine using a scanner (such as nmap), or from inside the machine using
    the <command>netstat --inet -n -p</command> command as <systemitem class="username">root</systemitem>. Then,
    inspect the machine to determine which programs are answering on the
    discovered open ports.
   </para>
      <tip>
        <!-- bnc#880080: netstat vs. ss/ip -->
        <para>
     Refer to the man page of the <command>netstat</command> command for a
     detailed reference of all possible options.
    </para>
      </tip>
    </sect2>
  </sect1>
</chapter>
