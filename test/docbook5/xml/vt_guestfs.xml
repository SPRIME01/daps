<!-- Converted by db4-upgrade version 1.1 -->

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:id="chap.guestfs" xml:lang="en">
  <title>libguestfs</title>
  <sect1 xml:id="sec.guestfs.intro">
    <title>VM Guest Manipulation Overview</title>
    <para/>
    <sect2 xml:id="sec.guestfs.intro.risk">
      <title>VM Guest Manipulation Risk</title>
      <para>
    As disk images and definition files are simply another type of file in a
    Linux environment, it is possible to use many different tools to access,
    edit and write to these files. When used correctly, such tools can be an
    important part of guest adminitration. However, even correct usage of
    these tools is not without risk. Some of the risks that should be
    considered when manually manipulating guest disk images include:
   </para>
      <itemizedlist>
        <listitem>
          <para><emphasis>Data Corruption</emphasis>: Concurrently accessing images,
      by the host machine or another node in a cluster, can cause changes to
      be lost or data corruption to occur if virtualization protection
      layers are bypassed.
     </para>
        </listitem>
        <listitem>
          <para><emphasis>Security</emphasis>: Mounting disk images as loop devices
      requires root access. While an image is loop mounted, other users and
      processes can potentially access the disk contents.
     </para>
        </listitem>
        <listitem>
          <para><emphasis>Administrator Error</emphasis>: Bypassing virtualization
      layers correctly requires advanced understanding of virtual components
      and tools. Failing to isolate the images or failing to clean up
      properly after changes have been made can lead to further problems
      once back in virtualization control.
     </para>
        </listitem>
      </itemizedlist>
    </sect2>
    <sect2 xml:id="sec.guestfs.intro.design">
      <title>libguestfs Design</title>
      <para>
    libguestfs C library has been designed to safely and securely create,
    access and modify virtual machine (VM Guest) disk images. It also
    provides additional language bindings: for
    <link xlink:href="http://libguestfs.org/guestfs-perl.3.html">http://libguestfs.org/guestfs-perl.3.html</link>,
    <link xlink:href="http://libguestfs.org/guestfs-python.3.html">http://libguestfs.org/guestfs-python.3.html</link>,
    PHP (only for 64-bit machines), and
    <link xlink:href="http://libguestfs.org/guestfs-ruby.3.html">http://libguestfs.org/guestfs-ruby.3.html</link>. libguestfs can access VM Guest disk images without
    needing root and with multiple layers of defense against rogue disk
    images.
   </para>
      <para>
    libguestfs provides many different tools designed for accessing and
    modifying VM Guest disk images and contents. These tools provide such
    capabilities as: viewing and editing files inside guests, scripting
    changes to VM Guests, monitoring disk used/free statistics, creating
    guests, doing V2V migrations, performing backups, cloning VM Guests,
    formatting disks, and resizing disks.
   </para>
      <warning>
        <title>Best Practices</title>
        <para>
     You must not use libguestfs tools on live virtual machines. Doing so
     will probably result in disk corruption in the VM Guest. libguestfs
     tools try to stop you from doing this, but cannot catch all cases.
    </para>
        <para>
     However most command have the <option>--ro</option> (read only) option.
     With this option, you can attach a command to a live virtual machine.
     The results might be strange or inconsistent at times but you will not
     risk disk corruption.
    </para>
      </warning>
    </sect2>
  </sect1>
  <sect1 xml:id="sec.guestfs.package">
    <title>Package Installation</title>
    <para>
   libguestfs is shipped through 3 packages:
  </para>
    <itemizedlist>
      <listitem>
        <para>
     libguestfs0: which provides the main C library
    </para>
      </listitem>
      <listitem>
        <para>
     guestfs-data: which contains the kernel and initrd used when launching
     images (stored in <filename>/usr/lib64/guestfs</filename>)
    </para>
      </listitem>
      <listitem>
        <para>
     guestfs-tools: the core guestfs tools, man pages, and the
     <filename>/etc/libguestfs-tools.conf</filename> configuration file.
    </para>
      </listitem>
    </itemizedlist>
    <para>
   To install guestfs tools on your system run:
  </para>
    <screen>zypper in guestfs-tools</screen>
  </sect1>
  <sect1 xml:id="sec.guestfs.tools">
    <title>Guestfs Tools</title>
    <para/>
    <sect2 xml:id="sec.guestfs.tools.intro">
      <title>Modifying Virtual Machines</title>
      <para>
    The set of tools found within the guestfs-tools package is used for
    accessing and modifying virtual machine disk images. This functionality
    is provided through a familiar shell interface with built-in safeguards
    which ensure image integrity. Guestfs tools shells expose all
    capabilities of the guestfs API, and use the kernel and initrd found in
    <filename>/usr/lib4/guestfs</filename>.
   </para>
    </sect2>
    <sect2 xml:id="sec.guestfs.tools.supportedfs">
      <title>Supported File Systems and Disk Images</title>
      <para>
    Guestfs tools support various file systems including:
   </para>
      <itemizedlist>
        <listitem>
          <para>
      Ext2, Ext3, Ext4
     </para>
        </listitem>
        <listitem>
          <para>
      Xfs
     </para>
        </listitem>
        <listitem>
          <para>
      Brtfs
     </para>
        </listitem>
      </itemizedlist>
      <para>
    Multiple disk image formats are also supported:
   </para>
      <itemizedlist>
        <listitem>
          <para>
      raw
     </para>
        </listitem>
        <listitem>
          <para>
      qcow2
     </para>
        </listitem>
      </itemizedlist>
      <warning>
        <title>Unsupported File System</title>
        <para>
     Guestfs may also support Windows* file systems (VFAT, NTFS), BSD* and
     Apple* file systems, and other disk image formats (VMDK, VHDX...).
     However, these file systems and disk image formats are unsupported on
     SUSE Linux Enterprise.
    </para>
      </warning>
    </sect2>
    <sect2 xml:id="sec.guestfs.tools.virt-rescue">
      <title>
        <command>virt-rescue</command>
      </title>
      <para><command>virt-rescue</command> is similar to a rescue CD, but for
    virtual machines, and without the need for a CD. virt-rescue presents
    users with a rescue shell and some simple recovery tools which can be
    used to examine and correct problems within a virtual machine or disk
    image.
   </para>
      <screen><prompt role="user">tux &gt; </prompt> virt-rescue -a sles.qcow2 
Welcome to virt-rescue, the libguestfs rescue shell.

Note: The contents of / are the rescue appliance.
You have to mount the guest's partitions under /sysroot
before you can examine them. A helper script for that exists:
mount-rootfs-and-do-chroot.sh /dev/sda2

&gt;&lt;rescue&gt; 
[   67.194384] EXT4-fs (sda1): mounting ext3 file system
using the ext4 subsystem
[   67.199292] EXT4-fs (sda1): mounted filesystem with ordered data
mode. Opts: (null)
mount: /dev/sda1 mounted on /sysroot.
mount: /dev bound on /sysroot/dev.
mount: /dev/pts bound on /sysroot/dev/pts.
mount: /proc bound on /sysroot/proc.
mount: /sys bound on /sysroot/sys.
Directory: /root
Thu Jun  5 13:20:51 UTC 2014
(none):~ #
   </screen>
      <para>
    You are now running the VM Guest in rescue mode:
   </para>
      <screen>(none):~ # cat /etc/fstab 
devpts  /dev/pts          devpts  mode=0620,gid=5 0 0
proc    /proc             proc    defaults        0 0
sysfs   /sys              sysfs   noauto          0 0
debugfs /sys/kernel/debug debugfs noauto          0 0
usbfs   /proc/bus/usb     usbfs   noauto          0 0
tmpfs   /run              tmpfs   noauto          0 0
/dev/disk/by-id/ata-QEMU_HARDDISK_QM00001-part1 / ext3 defaults 1 1</screen>
    </sect2>
    <sect2 xml:id="sec.guestfs.tools.virt-resize">
      <title>
        <command>virt-resize</command>
      </title>
      <para><command>virt-resize</command> is used to resize a virtual machine disk,
    making it larger or smaller overall, and resizing or deleting any
    partitions contained within.
   </para>
      <procedure xml:id="pro.guestfs.tools.virt-resize">
        <title>Expanding a Disk</title>
        <para>
     Full step-by-step example: How to expand a virtual machine disk
    </para>
        <step>
          <para>
      First, with virtual machine powered off, determine the size of the
      partitions available on this virtual machine:
     </para>
          <screen><prompt role="user">tux &gt; </prompt> virt-filesystems --long --parts --blkdevs -h -a sles.qcow2
Name       Type       MBR  Size  Parent
/dev/sda1  partition  83   16G   /dev/sda
/dev/sda   device     -    16G   -</screen>
        </step>
        <step>
          <para><command>virt-resize</command> cannot do in-place disk
      modifications—there must be sufficient space to store the
      resized output disk. Use the <command>truncate</command> command to
      create a file of suitable size:
     </para>
          <screen><prompt role="user">tux &gt; </prompt> truncate -s 32G outdisk.img</screen>
        </step>
        <step>
          <para>
      Use <command>virt-resize</command> to resize the disk image.
      <command>virt-resize</command> requires two mandatory parameters for
      the input and output images:
     </para>
          <screen><prompt role="user">tux &gt; </prompt> virt-resize --expand /dev/sda1 sles.qcow2 outdisk.img
Examining sles.qcow2 ...
**********
Summary of changes:

/dev/sda1: This partition will be resized from 16,0G to 32,0G.  The 
    filesystem ext3 on /dev/sda1 will be expanded using the 'resize2fs' 
    method.

**********
Setting up initial partition table on outdisk.img ...
Copying /dev/sda1 ...
◐ 84%
⟦▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒════════⟧ 00:03
Expanding /dev/sda1 using the 'resize2fs' method ...

Resize operation completed with no errors.  Before deleting the old 
disk, carefully check that the resized disk boots and works correctly.</screen>
        </step>
        <step>
          <para>
      Confirm the image was resized properly:
     </para>
          <screen><prompt role="user">tux &gt; </prompt> virt-filesystems --long --parts --blkdevs -h -a outdisk.img
Name       Type       MBR  Size  Parent
/dev/sda1  partition  83   32G   /dev/sda
/dev/sda   device     -    32G   -</screen>
        </step>
        <step>
          <para>
      Bring up the VM Guest using the new disk image and confirm correct
      operation before deleting the old image.
     </para>
        </step>
      </procedure>
    </sect2>
    <sect2 xml:id="sec.guestfs.tools.others">
      <title>Other virt-* Tools</title>
      <para>
    Various other guestfs tools exist to ease administrative
    tasks—such as viewing and editing files, or obtaining information
    on the virtual machine.
   </para>
      <sect3 xml:id="sec.guestfs.tools.others.filesystem">
        <title>
          <command>virt-filesystems</command>
        </title>
        <para>
     This tool is used to report information regarding file systems,
     partitions, and logical volumes in a disk image or virtual machine.
    </para>
        <screen><prompt role="user">tux &gt; </prompt> virt-filesystems -l -a sles.qcow2 
Name       Type        VFS   Label  Size         Parent
/dev/sda1  filesystem  ext3  -      17178820608  -</screen>
      </sect3>
      <sect3 xml:id="sec.guestfs.tools.others.ls">
        <title>
          <command>virt-ls</command>
        </title>
        <para><command>virt-ls</command> lists file names, file sizes, checksums,
     extended attributes and more from a virtual machine or disk image.
     Multiple directory names can be given, in which case the output from
     each is concatenated. To list directories from a libvirt guest, use the
     <option>-d</option> option to specify the name of the guest. For a disk
     image, use the <option>-a</option> option.
    </para>
        <screen><prompt role="user">tux &gt; </prompt> virt-ls -h -lR -a sles.qcow2 /var/log/ 
d 0755       4,0K /var/log/
d 0700       4,0K /var/log//YaST2
- 0644       1,9K /var/log//YaST2/mkinitrd.log
- 0644        496 /var/log//YaST2/perl-BL-standalone-log
- 0600       3,2K /var/log//faillog
d 0700       4,0K /var/log//krb5
- 0644        29K /var/log//lastlog
- 0644        496 /var/log//pbl.log
- 0664          0 /var/log//wtmp
d 0755       4,0K /var/log//zypp</screen>
      </sect3>
      <sect3 xml:id="sec.guestfs.tools.others.cat">
        <title>
          <command>virt-cat</command>
        </title>
        <para><command>virt-cat</command> is a command line tool to display the
     contents of a file that exists in the named virtual machine (or disk
     image). Multiple file names can be given, in which case they are
     concatenated together. Each file name must be a full path, starting at
     the root directory (starting with '/').
    </para>
        <screen><prompt role="user">tux &gt; </prompt> virt-cat -a sles.qcow2 /etc/fstab
devpts /dev/pts devpts mode=0620,gid=5 0 0 
proc   /proc    proc   defaults        0 0</screen>
      </sect3>
      <sect3 xml:id="sec.guestfs.tools.others.df">
        <title>
          <command>virt-df</command>
        </title>
        <para><command>virt-df</command> is a command line tool to display free space
     on virtual machine file systems. Unlike other tools, it doesn't just
     display the size of disk allocated to a virtual machine, but can look
     inside disk images to show how much space is actually being used.
    </para>
        <screen><prompt role="user">tux &gt; </prompt> virt-df -a sles.qcow2 
Filesystem                           1K-blocks       Used  Available  Use%
sles.qcow2:/dev/sda1                  16381864     520564   15022492  4%</screen>
      </sect3>
      <sect3 xml:id="sec.guestfs.tools.others.edit">
        <title>
          <command>virt-edit</command>
        </title>
        <para><command>virt-edit</command> is a command line tool capable of editing
     files that reside in the named virtual machine (or disk image).
    </para>
      </sect3>
      <sect3 xml:id="sec.guestfs.tools.others.tar">
        <title>
          <command>virt-tar-in/out</command>
        </title>
        <para><command>virt-tar-in</command> unpacks an uncompressed tarball into a
     virtual machine disk image or named libvirt domain.
     <command>virt-tar-out</command> packs a virtual machine disk image
     directory into a tarball.
    </para>
        <screen><prompt role="user">tux &gt; </prompt> virt-tar-out -a sles.qcow2 /home homes.tar</screen>
      </sect3>
      <sect3 xml:id="sec.guestfs.tools.others.copy">
        <title>
          <command>virt-copy-in/out</command>
        </title>
        <para><command>virt-copy-in</command> copies files and directories from the
     local disk into a virtual machine disk image or named libvirt domain.
     <command>virt-copy-out</command> copies files and directories out of a
     virtual machine disk image or named libvirt domain.
    </para>
        <screen><prompt role="user">tux &gt; </prompt> virt-copy-in -a sles.qcow2 data.tar /tmp/
virt-ls -a sles.qcow2 /tmp/
.ICE-unix
.X11-unix
data.tar</screen>
      </sect3>
    </sect2>
    <sect2 xml:id="sec.guestfs.guestfish">
      <title>
        <command>guestfish</command>
      </title>
      <para><command>guestfish</command> is a shell and command line tool for
    examining and modifying virtual machine file systems. It uses libguestfs
    and exposes all of the functionality of the guestfs API.
   </para>
      <para>
    Examples of usage:
   </para>
      <screen><prompt role="user">tux &gt; </prompt> guestfish -a disk.img &lt;&lt;EOF
run
list-filesystems
EOF</screen>
      <screen>guestfish 

Welcome to guestfish, the guest filesystem shell for
editing virtual machine filesystems and disk images.

Type: 'help' for help on commands
      'man' to read the manual
      'quit' to quit the shell

&gt;&lt;fs&gt; add sles.qcow2
&gt;&lt;fs&gt; run
&gt;&lt;fs&gt; list-filesystems 
/dev/sda1: ext3
&gt;&lt;fs&gt; mount /dev/sda1 /
 cat /etc/fstab 
devpts  /dev/pts          devpts  mode=0620,gid=5 0 0
proc    /proc             proc    defaults        0 0
sysfs   /sys              sysfs   noauto          0 0
debugfs /sys/kernel/debug debugfs noauto          0 0
usbfs   /proc/bus/usb     usbfs   noauto          0 0
tmpfs   /run              tmpfs   noauto          0 0
/dev/disk/by-id/ata-QEMU_HARDDISK_QM00001-part1 / ext3 defaults 1 1</screen>
    </sect2>
  </sect1>
  <sect1 xml:id="sec.guestfs.trouble">
    <title>Troubleshooting</title>
    <para/>
    <sect2 xml:id="sec.guestfs.trouble.env">
      <title>Environment</title>
      <para>
    When troubleshooting problems within a libguestfs appliance, the
    environment variable <emphasis>LIBGUESTFS_DEBUG=1</emphasis> can be used
    to enable debug messages. To output each command/API call in a format
    that is similar to guestfish commands, use the environment variable
    <emphasis>LIBGUESTFS_TRACE=1</emphasis>.
   </para>
    </sect2>
    <sect2 xml:id="sec.guestfs.trouble.tools">
      <title>
        <command>libguestfs-test-tool</command>
      </title>
      <para><command>libguestfs-test-tool</command> is a test program that checks if
    basic libguestfs functionality is working. It will print a large amount
    of diagnostic messages and details of the guestfs environment, then
    create a test image and try to start it. If it runs to completion
    successfully, the following message should be seen near the end:
   </para>
      <screen>===== TEST FINISHED OK =====</screen>
    </sect2>
  </sect1>
  <sect1 xml:id="sec.guestfs.external.doc">
    <title>External References</title>
    <para/>
    <itemizedlist>
      <listitem>
        <para>
          <link xlink:href="http://libguestfs.org">http://libguestfs.org</link>
        </para>
      </listitem>
      <listitem>
        <para>
          <link xlink:href="http://libguestfs.org/guestfs-faq.1.html">http://libguestfs.org/guestfs-faq.1.html</link>
        </para>
      </listitem>
      <!--   <listitem>
    <para>
     <ulink url="http://libguestfs.org/guestfs-release-notes.1.html">guestfs
     release notes</ulink>
    </para>
   </listitem> -->
    </itemizedlist>
  </sect1>
</chapter>
