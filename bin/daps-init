#!/bin/bash
#
# Copyright (C) 2012-2015 SUSE Linux GmbH
#
# Author:
# Frank Sundermeyer <fsundermeyer at opensuse dot org>
# Thomas Schraitle
# Vanessa Wallfahrer
#
# Initialize a working directory to get started with daps
#

# ---------
# Verbose error handling
#
function exit_on_error () {
    ccecho "error" "ERROR: ${1}" >&2
    exit 1;
}
function tempfile () {
    TEMPFILE=$(mktemp /tmp/daps-init-temp.XXXXXXX 2>/dev/null)
}
function moving_file () {
    mv $TEMPFILE  ${DOC_DIR}/xml/MAIN-${BOOK}.xml   
}
function usage () {
    echo "
$ME --docdir <PATH TO DIRECTORY> [OPTIONS] 

Create a working environment for DAPS with an example DocBook document.
Specifying the project directory with --docdir is mandatory, all other
options are optional.
Specifying a name for the document with \"--name\" is recommended--it will
be used in filenames. Setting the title of the document with \"--title\"
is also recommended.

Options:

  --docdir=<DIR>
    Path to the project directory under which the DAPS environment will be
    set up. If the directory does not exists, it will be created. Mandatory.

  --date=<YYYY-MM-DD>
    Specify a date in the format YYYY-MM-DD. Will be used to set the
    publication date of the document. (<date/> in the document's info
    section)

  --docbook4
    Create a document in DocBook 4 format (default)

  --docbook5
    Create a document in DocBook 5 format

  --name=<NAME>
    String that will be used in filenames (e.g. when generating PDF or HTML
    output). Only use letters, digits, dashes and underscores [A-Za-z0-9-_].
    Default: daps-example

  --productname=<PRODUCT>
    Specify a name for the product the document describes. Will be used in the
    subtitle of the document (<productname/> in the document's info section)

  --productnumber=<PRODUCT_VERSION>
    Specify a version for the product the document describes. Will be used in
    the subtitle of the document (<productname/> in the document's info
    section)

  --rootelement=<article|book>
    DocBook root element of the example document. Currently supported
    are \"book\" and \"article\" (default).

  --title=<TITLE>
    Title of the document. Default: \"DAPS Example\"
"
    exit 0
}
#################################################
# MAIN
#


ME=$(basename $0)
CONT=

# show help when called with no arguments
[[ -z "$1" ]] && usage


#----------------
# Parse the command line arguments

ARGS=$(getopt -o 45d:hn:r:t: -l date:,dapsroot:,docbook4,docbook5,docdir:,help,name:,productname:,productnumber:,rootelement:,title: -n $ME -- "$@")

eval set -- "$ARGS"

while true ; do
    case "$1" in
        --dapsroot)
            # undocumented devel feature
            if [[ -d "$2" ]]; then
                DAPSROOT="$2"
            else
                exit_on_error "dapsroot \"$2\" is not a valid directory."
            fi
            shift 2
            ;;
        --docdir|-d)
	    if [[ -z "$2" ]]; then
		exit_on_error "Please specify a directory"
	    else
		DOC_DIR="$2"
	    fi
            shift 2
            ;;
	--date)
	    if [[ -z "$2" ]]; then 
		exit_on_error "Date must be set (YYYY-MM-DD)"
	    else
		DATE="$2"
		date -d $DATE > /dev/null 2>&1 || echo "Wrong date format. Use YYYY-MM-DD"
	    fi
	    shift 2 
	    ;;
	--docbook4|-4)
            DOCBOOKVERSION=4
            shift
            ;;
	--docbook5|-5)
            DOCBOOKVERSION=5
            shift
            ;;
        --help|-h)
            usage
	    ;;
	--name|-n)
	    if [[ -z "$2" ]]; then
		exit_on_error "Please specify a name"
	    elif [[ ! $2 =~ ^[-_A-Za-z0-9]*$ ]]; then
		exit_on_error "the name must not contain characters other than [-_A-za-z0-9]"
	    else
		NAME="$2"
	    fi
	    shift 2
	    ;;
	--productname)
	    if [[ -z "$2" ]]; then
		exit_on_error "Productname must be set"
	    else
		PRODUCTNAME="$2"
	
	    fi
	    shift 2
	    ;;
	--productnumber)
	    if [[ -z "$2" ]]; then
		exit_on_error "Productnumber must be set"
	    else 
		PRODUCTNUMBER="$2"
	    fi
	    shift 2
	    ;;
	--rootelement|-r)
            if [[ article = $2 || book = $2 ]]; then
                ROOTELEMENT="$2"
            else
                exit_on_error "Rootelement must be either \"article\" or \"book\""
            fi
	    shift 2
	    ;;
	--title|-t)
	    if [[ -z "$2" ]]; then
		exit_on_error "Title must be set"
	    else
		TITLE="$2"
	    fi
	    shift 2
	    ;;
        --) shift ; break ;;
        *) exit_on_error "Wrong parameter: $1" ;;
    esac
done


#---------------------
# Defaults:

[[ -z "$DAPSROOT" ]]       && DAPSROOT="/usr/share/daps"
[[ -z "$DOCBOOKVERSION" ]] && DOCBOOKVERSION="4"
[[ -z "SNAME" ]]           && NAME="daps-example"
[[ -z "$ROOTELEMENT" ]]    && ROOTELEMENT="article"
[[ -z "STITLE" ]]          && TITLE="DAPS Example"

DC_FILE="DC-${NAME}"

#DAPSROOT="/usr/share/daps" # the default

# user config file
#USER_CONFIG="$HOME/.daps/config"

# source config file to possibly get a DAPSROOT
#source "/etc/daps/config"
#if [[ -f $USER_CONFIG ]]; then
#    source $USER_CONFIG
#fi

# ----------
# Process DOCCONFIG and create directories
#

if [[ ! -d $DOC_DIR ]]; then
    while [[ y != $CONT && n != $CONT ]] ; do
        read -p "$DOC_DIR does not exist. Create it? [y/n] " CONT
    done
    if [[ y = $CONT ]]; then
        mkdir -p $DOC_DIR || exit_on_error "Cannot create $DOC_DIR" 
    else
        exit_on_error "Aborted by user"
    fi
fi

# Create needed subdirs in DOC_DIR
mkdir -p ${DOC_DIR}/images/src/{dia,fig,jpg,png,svg,eps,pdf} ${DOC_DIR}/xml || exit_on_error "Cannot create needed subdirectories in $DOC_DIR"

# ----------
# copy the templates
#
BOOK="${DC_FILE#${CONF_PREFIX}*}"
TEMPLATE=MAIN.db${DOCBOOKVERSION}-$ROOTELEMENT.template

# DC-file
cp ${DAPSROOT}/init_templates/DC-file.template ${DOC_DIR}/$DC_FILE && \
        sed -i s/§§MAIN§§/MAIN-$BOOK.xml/g ${DOC_DIR}/$DC_FILE
# MAIN XML file
cp ${DAPSROOT}/init_templates/$TEMPLATE ${DOC_DIR}/xml/MAIN-${BOOK}.xml &&
       
	

if [[ -z $TITLE ]]; then
    sed -i 's/§§TITLE§§/Book Template/g' ${DOC_DIR}/xml/MAIN-${BOOK}.xml
else 
    sed -i s/§§TITLE§§/$TITLE/g ${DOC_DIR}/xml/MAIN-${BOOK}.xml
fi

if [[ -z $DATE ]]; then 
    sed -i 's/§§DATE§§/<?dbtimestamp format="B d, Y"?>/g' ${DOC_DIR}/xml/MAIN-${BOOK}.xml
else 
    sed -i s/§§DATE§§/$DATE/g ${DOC_DIR}/xml/MAIN-${BOOK}.xml
fi

if [[ -n $PRODUCTNAME ]]; then
    tempfile
    if [[ $? -eq 0 ]]; then
	xml ed -a /book/bookinfo/title -t elem -n productname -v $PRODUCTNAME ${DOC_DIR}/xml/MAIN-${BOOK}.xml > $TEMPFILE && \ 
	moving_file
    else 
	ccecho "warn" "Productname could not be created"
    fi
fi


if [[ -n $PRODUCTNUMBER ]]; then
    tempfile
    if [[ $? -eq 0 ]]; then
	xml ed -a /book/bookinfo/title -t elem -n productnumber -v $PRODUCTNUMBER ${DOC_DIR}/xml/MAIN-${BOOK}.xml > $TEMPFILE && \ 
        moving_file
    else 
	ccecho "warn" "Productnumber could not be created"
    fi
fi


    

# graphics
cp ${DAPSROOT}/init_templates/example{1,2}.png ${DOC_DIR}/images/src/png/
  
ccecho "result" "Successfully created a working environment at ${DOC_DIR}"
echo "To build a PDF or HTML version of the example document enter
daps -d ${DOC_DIR}/$DC_FILE pdf
or
daps -d ${DOC_DIR}/$DC_FILE html"

exit 0;
