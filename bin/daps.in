#!/bin/bash
#
# Copyright (C) 2011,2012 Frank Sundermeyer <fsundermeyer@opensuse.org>
#
# Author:
# Frank Sundermeyer <fsundermeyer@opensuse.org>
#
# daps = DocBook Authoring and Publishing Suite


VERSION=0.9.9

# autoconf replaces @foo@ stuff with ${prefix}/.. if @foo@ has not
# explicitly been set, so we need to at least export prefix to
# be on the safe side

export prefix=@prefix@

# ----------------------------------------------------------------------------
# VARIABLES
#
# First, list all variables we need to pass to make. They all need to be
# EXPORTED, but we do not want to write the export statement in the config
# files, so we need to have this list
#
# IMPORTANT
# All variables that need to be exported for further use in the makefiles
# need to be added here!!
#


# PENDING:
# DISTVER, PRODUCTNAME, and PRODUCTNAMEREG are only need for resolving the
# suse-PIs. Once we get rid of that, remove these variables fom the list
#

declare -a VARLIST
VARLIST=(
    DISTVER
    PRODUCTNAME
    PRODUCTNAMEREG
    BUILD_DIR
    CB_OPTIONS
    COLOR
    COMMENTS
    COMMENT_STR
    CONF_PREFIX
    CONVERT_OPTS
    DEBUG
    DOC_DIR
    DAPSROOT
    DAPSROOT_DEFAULT
    DEF_FILE
    DEVEL
    DIA_OPTIONS
    DOCBOOK5_RNC_SCHEME
    DOCCONF
    DOCCONF_DEFAULT
    DRAFT
    DRAFT_STR
    DAPSROOT
    EPUBCHECK
    EPUB_CSS
    FALLBACK_STYLEROOT
    FOP_CONFIG
    FOP_OPTIONS
    FOP_WRAPPER
    FORMATTER
    GZIP_MAN
    HTML4
    HTML_CSS
    HTMLROOT
    IMG_VIEWER
    INK_OPTIONS
    JING_FLAGS
    LIB_DIR
    LIBEXEC_DIR
    MAIN
    NOPDF
    PDFNAME
    PROFARCH
    PROFCONDITION
    PROFILE_URN
    PROFOS
    PROFVENDOR
    REMARKS
    REMARK_STR
    STATIC_HTML
    ROOTID
    STYLEDEVEL
    STYLEROOT
    USEMETA
    VERBOSITY
    XEP_CONFIG
    XEP_OPTIONS
    XEP_WRAPPER
    XSLTPARAM
)
# unset all for a fresh start, but preserve $DOCCONF - it might have been set
# by having sourced a DC-file

[[ -n $DOCCONF ]] && DOCCONF_SAVE=$DOCCONF
unset "${VARLIST[@]}"
[[ -n $DOCCONF_SAVE ]] && DOCCONF=$DOCCONF_SAVE


# VARLIST contains all variables that can be set via config or command line.
#
# The following UNSETLIST contains variables local to this script
# unfortunately  

# To be on the safe side, we also want to unset a few variables before we start
# because they are used/defined in make or may cause other harm if accidentally
# set
#
declare -a UNSETLIST
UNSETLIST=(
    DOC_DIR_CMDL
    BIN_DIR
    BUILD_DIR_CMDL
    COLOR_CMDL
    CONFIG
    DC_PATH_EXISTS
    DOCCONF_CMDL
    DAPSROOT_CMDL
    FALLBACK_STYLEROOT_CMDL
    LOG_DIR
    MAIN_CMDL
    R_DIR
    STYLEROOT_CMDL
    VERBOSITY_CMDL 
)
unset "${UNSETLIST[@]}"

# ----------------------------------------------------------------------------
# We need to set some basic defaults outside of $DEFAULT_CONFIG

# this script's name
ME=$(basename $0)

# default config file
DEFAULT_CONFIG="@sysconfdir@/daps/config"

# The default DAPSROOT 
DAPSROOT_DEFAULT="@pkgdatadir@/daps"

# default libdir
DEFAULT_LIB_DIR="${DAPSROOT_DEFAULT}/lib"
DEFAULT_LIBEXEC_DIR="${DAPSROOT_DEFAULT}/libexec"

# user config file
USER_CONFIG="$HOME/.daps/config"

#---------------------------------------------------
# SUBCOMMANDS
#
# Associative array with
#  Key   = subcommand
#  Value = function call (from lib/daps_functions)
# 
# The subcommands can be executed using eval:
#   eval "${SUBCOMMANDS[$SUBCMD]} $SUBCMD ${SCMD_ARGS[@]}"
# Using such an array rather than a function to call the subcommands has got
# the advantage that we can very easily check whether a subcommand is valid
# or not by just testing if ${SUBCOMMANDS[$SUBCMD]} is set

declare -A SUBCOMMANDS
SUBCOMMANDS=(
    [all]=build_pdf
    [bigfile-reduced]=build_generic
    [bigfile]=build_generic
    [check]=no_opts
    [checklink]=checklink
    [chklink]=checklink
    [clean-all]=no_opts
    [clean-images]=no_opts
    [clean-results]=no_opts
    [clean]=no_opts
    [color-pdf-name]=show_names
    [color-pdf]=build_pdfs
    [db2novdoc]=build_generic
    [desktop-files-dir-name]=show_names
    [desktop-files]=build_generic
    [dist-all]=profile_first
    [dist-book]=build_generic
    [dist-desktop-files]=build_generic
    [dist-document-files-html]=build_generic
    [dist-document-files-pdf]=build_generic
    [dist-graphics-png]=build_generic
    [dist-graphics]=build_generic
    [dist-html-name]=show_names
    [dist-html-single]=build_generic
    [dist-html]=build_generic
    [dist-htmlsingle]=build_generic
    [dist-jsp]=build_generic
    [dist-xml]=build_generic
    [dist]=build_generic
    [document-files-dir-name]=show_names
    [document-files-html]=build_generic
    [document-files-pdf]=build_generic
    [epub-name]=show_names
    [epub]=build_epub
    [force]=build_pdfs
    [getimages]=getimages
    [html-dir-name]=show_names
    [html-single-name]=show_names
    [html-single]=build_html_jsp
    [html]=build_html_jsp
    [htmlsingle-name]=show_names
    [htmlsingle]=build_html_jsp
    [jana]=checklink
    [jsp-dir-name]=show_names
    [jsp]=build_html_jsp
    [locdrop]=build_locdrop
    [man]=build_man
    [missinggraphics]=filelists
    [nothing]=no_opts
    [offspring]=no_opts
    [online-docs]=build_generic
    [online-localized]=build_generic
    [optipng]=build_generic
    [package-html]=packaging
    [package-jsp]=packaging
    [package-pdf]=packaging
    [package-src-name]=show_names
    [package-src]=packaging
    [package]=packaging
    [pdf-color-name]=show_names
    [pdf-color]=build_pdfs
    [pdf-name]=show_names
    [pdf]=build_pdfs
    [penguin]=no_opts
    [prof]=build_generic
    [profile]=build_generic
    [profiledir]=comments_remarks
    [projectfiles]=filelists
    [projectgraphics]=filelists
    [provide-color-images]=build_generic
    [provide-epub-images]=build_generic
    [provide-images]=build_generic
    [real-clean]=no_opts
    [remainingfiles]=filelists
    [remaininggraphics]=filelists
    [showenv]=show_env
    [showvariable]=profile_first
    [text]=build_generic
    [txt-name]=show_names
    [txt]=build_generic
    [validate]=comments_remarks
    [warn-images]=filelists
    [wiki-name]=show_names
    [wiki]=build_generic
    [xmlgraphics-bw]=filelists
    [xmlgraphics]=filelists
)



# ----------------------------------------------------------------------------
# FUNCTIONS
#
# We need to declare a few basic funtions first because they are needed
# immideately. All other functions can be found at
# $DAPSROOT/lib/daps-functions
# ---------
# Help
#

function daps_help () {
    echo "
Usage:
  1. $ME -d DC-file [--options] <subcommand> [--subcommand-options]
  2. $ME -m MAIN file [--options] <subcommand> [--subcommand-options]
  3. $ME [--options] <subcommand> [--subcommand-options]


Global Options:
  --builddir=BUILD_DIR      Directory where every output $ME generates will end
                            up
                            Default: <doc dir>/build/$BOOK
  --color=(0|1)             By default errors, results, warnings and certain
                            info messages are printed in color using bash color
                            codes. Set to '0' to turn off colors.
                            Default: 1 (when the output does not go to a
                                        terminal, colored output will be
                                        disabled automatically)
  --debug                   Print debugging messages. Far more verbose than the
                             --verbosity options
  --docconfig=DC-file,
  -d DC-file                Path to doc config file to use. Mandatory
                            unless there is only a single DC-file in the current
                            directory or unless you have configured a default
                            value (DOCCONF_DEFAULT) in $USER_CONFIG.
                            Note: Options --docconfig nad --main exclude
                                  each other.
  --fb_styleroot            Fallback styleroot directory. Can only be used in
                            conjunction with --styleroot. By default the
                            DocBook stylesheets are used as a fallback if
                            custom styles for an output format are  not present.
                            With this option you can specify an alternative
                            fallback. Useful if you have forks of your custom
                            stylesheets. The DocBook stylesheets will be used
                            as a last resort.
                            Specify only the filename, not an absolute path.
  --help, -h                Help
  --main, -m                Path to the main file defining your document.
                            Note: Options --main and --docconfig exclude
                                  each other.
  --styleroot               By default daps uses the DocBook Stylesheets to
                            create output. If you have your own set of
                            stylesheets, specify the absolute path to the
                            stylesheet directory here. The DocBook stylesheets
                            will be used as a fallback in case styles are not
                            defined for all output formats.
  --verbosity=0, -v0        Verbosity Level 0 (print 1 line of results)
  --verbosity=1, -v1, -v    Verbosity Level 1 (print intermediate results)
  --verbosity=2, -v2, -vv   Verbosity Level 2 (print all commands, very verbose)

  --version                 Print version number

  
Subcommands:
   help                       Print this help

  Generate Books:
    color-pdf, pdf-color      Color pdf book
    dist                      b/w pdf with cropmarks for each chapter
    epub                      ePUB book
    force                     b/w pdf with cropmarks. Force updating the
                              profiled sources and the .fo file
    html                      HTML book
    html-single, htmlsingle   Single file HTML book
    jsp                       JSP book
    man                       man pages
    pdf                       b/w pdf with cropmarks
    txt, text                 ASCII book
    wiki                      Single file MediaWiki book


  Create Distributable Archives:
    dist-all                  Shortcut for running the subcommands 'validate'
                              'chklink' 'dist-xml' 'dist-html' 'dist' and
                              'color-pdf'
    dist-book                 Profiled XML sources of the book
    dist-graphics             Graphics (PNG, SVG) of the whole set
    dist-graphics-png         PNG graphics of the whole set. SVG graphics are
                              converted to PNG
    dist-html                 HTML and graphics
    dist-htmlsingle           Single-file HTML and graphics
    dist-jsp                  JSP and graphics
    dist-xml                  Profiled XML sources of the whole set. Identical
                              to dist-book when using a book rather than a set.
    locdrop                   Provide everything that is need to translate a set

  File lists:
    projectfiles              Print XML source files used by the book
    projectgraphics           Print source graphics used by the book
    missinggraphics           Print missing images
    remainingfiles            Print XML source files _not_ used by the book
    remaininggraphics         Print source graphics _not_ used by the book
    warn-images                Print a list of non-unique image files
    xmlgraphics               Print (generated) color graphics really used to
                              generate the books
    xmlgraphics-bw            Print (generated) b/w graphics really used to
                              generate the books

  Cleaning up:
    clean                     Remove all profiled sources and temporary files
    clean-images              Remove all generated images
    clean-results             Remove all generated books, archives, and log
                              files. Generated images and profiled sources will
                              _not_ be deleted.
    clean-all, real-clean     Remove everything generated by $ME

  Packaging:
    package-html              Provide HTML tarball (set), desktop and document
                              files (for KDE and GNOME)
    package-jsp               Provide JSP tarball
    package-pdf               Provide color pdf, desktop and document files
                              (for KDE and GNOME)
    package-src               Provide profiled XML sources and graphics

  Deploying (novell.com):
    online-docs               Provide a profiled XML bigfile and a graphics
                              tarball (PNG only)
    online-localized          Provide a profiled XML bigfile and a graphics
                              tarball (PNG only). All xrefs to other books from
                              the set are replaced by ulinks pointing to
                              <?provo dirname?>/id plus text like \"See book FOO,
                              chapter BAR\" Useful for delivering translated
                              manuals, when only part of the set has been
                              translated

  Other Commands:
    chklink                   Linkchecker for links from <ulink> tags
    db2novdoc                 Convert DocBook XML sources to NovDoc
    getimages                 List or display images from a profiled DocBook
                              XML file
    optipng                   Optimize (size) source PNGs
    profile, prof             Profile XML sources
    validate                  Validate profiled sources. Automatically profiles
                              the XML sources if needed

  File and Directory Names:
    <target>-name             Print resulting filename for <target>. <target>
                              may be one of color-pdf, epub, html-single,
                              pdf, txt
    <target>-dir-name         Print resulting directory nae for <target>.
                              <target> may be either html or jsp
    profiledir                Print path to profiling directory

  Debugging:
    check                     Print a list of the most important make variables
                              and their value
    profiledir                Print the profiling directory currently used
    showvariable              Print value of a given make variable:
                              $ME showvariable VARIABLE=<MAKE_VARIABLE>

Type '$ME <subcommand> -h' for help on a specific subcommand.
"
}

# ---------
# Verbose error handling
#
function exit_on_error () {
    ccecho "error" "ERROR: ${1}" >&2
    exit 1;
}
# ---------
# Get absolute path
#
function absolute_path () {
    # returns the absolute path to $1
    #
    # Note: links are _not_ being followed
    #       (use readlink for that purpose)
    #
    local ABSPATH BASE FILE DIR

    FILE=$1
    FILE=${FILE%/} # remove trailing slash

    BASE=$(basename $FILE)
    DIR=$(dirname $FILE)

    if [[ -n $DIR && "." != DIR ]]; then
        cd $DIR
        ABSPATH="$(pwd)/$BASE"
        cd - &>/dev/null
    else
        ABSPATH="$(pwd)/$BASE"
    fi

    echo $ABSPATH
}

# ---------
# Try to automatically get the DOCCONF
#
function autoset_docconf () {
    # if there is only one DOCCONF file in the current directory, use it
    # and also set DOC_DIR
    #
    local DC_FILENAME DC_PARENT DC_REAL_PATH DC_REAL_DIR
    declare -a DC_COUNT
    DC_COUNT=( $(find -L . -maxdepth 1 -name "${CONF_PREFIX}*" -type f) )
    if [[ 1 = ${#DC_COUNT[@]} ]]; then
        # There is only one DOCCONF file
        #
        # two possibilites:
        # 1. We are already in DOC_DIR
        # 2. We are in the documents build result directory
        # (DOC_DIR/build/<name>), where daps creates a link to the
        # real ENV file
        if [[ -h ${DC_COUNT[0]} ]]; then
            # DOCCONF is a link
            DC_REAL_PATH=$(readlink -nm "${DC_COUNT[0]}")
            DC_REAL_DIR=$(dirname "$DC_REAL_PATH")
            DC_FILENAME=$(basename "$DC_REAL_PATH")
            DC_PARENT=${DC_FILENAME#${CONF_PREFIX}*}
            if [[ -e ${DC_REAL_DIR}/build/${DC_PARENT}/$DC_FILENAME ]]; then
                # we are in the result dir - set DOCCONF to the
                # real path (with links "resolved")
                DOCCONF_CMDL="$DC_REAL_PATH"
            else
                # we are in DOC_DIR
                # preserve links
                DOCCONF_CMDL=$(absolute_path "${DC_COUNT[0]}")
            fi
        else
            # no link, we are in DOC_DIR
            DOCCONF_CMDL=$(absolute_path "${DC_COUNT[0]}")
        fi
        # set DOC_DIR
        DOC_DIR=$(dirname "$DOCCONF_CMDL")
        if [[ 1 -le $VERBOSITY ]]; then
            ccecho "result" "Using automatically detected DOCCONF $DOCCONF_CMDL"
        fi
    else
        # more than one or no DOCCONF
        exit_on_error "Could not find a valid MAIN file.\nPlease specify either a DOCCONF or a MAIN file at the command line"
    fi
}

# ---------
# Set MAIN to an absolute path
#

function set_mainfile () {
    local MAINFILE
    MAINFILE="$1"
    if [[ -e "$MAINFILE" ]]; then
        # MAINFILE is a file or link
        MAIN_CMDL=$(absolute_path "$MAINFILE")
        if [[ -z "$DOC_DIR" ]]; then
            DOC_DIR=$(dirname "$MAIN_CMDL")
            DOC_DIR=${DOC_DIR%/xml*} #remove xml directory
        fi
    else
        if [[ -e "xml/$MAINFILE" ]]; then
            # MAIN is not a valid file, but ./xml/$MAIN exists
            MAIN_CMDL=$(absolute_path "xml/$MAINFILE")
            if [[ -z "$DOC_DIR" ]]; then
                DOC_DIR="$PWD"
            fi
            if [[ 1 -le $VERBOSITY ]]; then
                ccecho "result" "Using MAIN file $MAIN_CMDL"
            fi
        else
            if [[ -n $DOC_DIR ]]; then
                if [[ -e "${DOC_DIR}/xml/$MAINFILE" ]]; then
                    MAIN_CMDL="${DOC_DIR}/xml/$MAINFILE"
                elif [[ -e "${DOC_DIR}/$MAINFILE" ]]; then
                    MAIN_CMDL="${DOC_DIR}/$MAINFILE"
                else
                    exit_on_error "Fatal error: ${DOC_DIR}/xml/$MAINFILE does not exist."
                fi
            else
               exit_on_error "Fatal error: ${PWD}/$MAINFILE does not exist."
            fi
        fi
    fi
}


# ---------
# Recover command-line values
#
function recover_cmdl_values () {
#    test -n "$DOC_DIR_CMDL"  && DOC_DIR="$DOC_DIR_CMDL"
    test -n "$BUILD_DIR_CMDL" && BUILD_DIR="$BUILD_DIR_CMDL"
    test -n "$COLOR_CMDL"     && COLOR="$COLOR_CMDL"
    test -n "$DOCCONF_CMDL"   && DOCCONF="$DOCCONF_CMDL"
    test -n "$DAPSROOT_CMDL"   && DAPSROOT="$DAPSROOT_CMDL"
    test -n "$FALLBACK_STYLEROOT_CMDL" && FALLBACK_STYLEROOT="$FALLBACK_STYLEROOT_CMDL"
    test -n "$MAIN_CMDL"      && MAIN="$MAIN_CMDL"
    test -n "$STYLEROOT_CMDL" && STYLEROOT="$STYLEROOT_CMDL"
    test -n "$VERBOSITY_CMDL" && VERBOSITY="$VERBOSITY_CMDL"
}

# ---------
# Remove trailing slashes from directory paths
function sanitize_paths () {
    DOC_DIR=${DOC_DIR%/}
    BUILD_DIR=${BUILD_DIR%/}
    DAPSROOT=${DAPSROOT%/}
    FALLBACK_STYLEROOT=${FALLBACK_STYLEROOT%/}
    STYLEROOT=${STYLEROOT%/}
}


# ----------------------------------------------------------------------------
# Parsing the command line arguments with GNU getopt
#
# In order to separate general daps parameters from subcommand parameters,
# we are setting POSIXLY_CORRECT before parsing the first time.
# This causes getopt to interprete all remaining parameters as non-option
# parameters as soon as the first non-option parameter (the subcommand) is
# found. This value must be _exported_

export POSIXLY_CORRECT=1

# So, the first getopt go will parse all parameters listed directly after the 
# daps command, leaving an array ($@) with the subcommand and it's
# parameters, which can be parsed in a second getopt go.

#-------------------------------
# Parsing the daps parameters
#
# If variables such as $BUILD_DIR, $DOCCONF, and $DAPSROOT are set via command
# line switch, we do not want to overwrite them by any other file we source
# at a later stage (command line always wins).
# Declaring the variables as readonly is unfortunately not an option, since 
# every attempt to (un)set a read-only variable throws an error - something
# we do not want when sourcing a config-file.
# Therefore we need to save each variable twice in order to recover the
# original value.

ARGS=$(getopt -o d:e:hm:v:: -l builddir:,color:,colour:,debug,docconfig:,dapsroot:,envfile:,fb_styleroot:,help,main:,styleroot:,verbosity::,version -n $ME -- "$@")
eval set -- "$ARGS"

while true ; do
    case "$1" in
         --builddir)
            test -d "$2" || exit_on_error "BUILD_DIR $2 is not a valid directory"
            test -w "$2" || exit_on_error "BUILD_DIR $2 is not writeable"
            BUILD_DIR_CMDL="$2"
            # strip trailing slash
            BUILD_DIR_CMDL=${BUILD_DIR_CMDL%/}
            BUILD_DIR="$BUILD_DIR_CMDL"
            shift 2
            ;;
        --color|--colour)
            if [[ 1 != $2 && 0 != $2 ]]; then
                exit_on_error "Wrong value ($2) for COLOR. Must be \"0\" or \"1\""
            fi
            COLOR_CMDL=$2
            export COLOR="$COLOR_CMDL"
            shift 2
            ;;      
        -d|--docconfig|-e|--envfile)
            DOCCONF_CMDL="$2"
            DOCCONF="$DOCCONF_CMDL"
            shift 2
            ;;
        --dapsroot)
            test -d $2 || exit_on_error "$2 is not a valid DAPSROOT"
            DAPSROOT_CMDL="$2"
            # strip trailing slash
            DAPSROOT_CMDL=${DAPSROOT_CMDL%/}
            DAPSROOT="$DAPSROOT_CMDL"
            DEVEL=1
            shift 2
            ;;
        --debug)
            # debug also implies VERBOSITY=2
            DEBUG=1
            VERBOSITY_CMDL=2
            VERBOSITY=$VERBOSITY_CMDL
            shift
            ;;
        --fb_styleroot)
            test -d "$2" || exit_on_error "Fallback styleroot $2 is not a valid directory"
            FALLBACK_STYLEROOT_CMDL="$2"
            # strip trailing slash
            FALLBACK_STYLEROOT_CMDL=${FALLBACK_STYLEROOT_CMDL%/}
            FALLBACK_STYLEROOT="$FALLBACK_STYLEROOT_CMDL"
            shift 2
            ;;
        -h|--help)
            # if it's just "-h/--help", then print the global daps help
            # if "-h/--help" is followed by a subcommand, then set a marker
            # to call the subcommand's help
            shift;
            if [[ "" = $2 ]]; then
                daps_help
                exit 0;
            else
                CALL_SCMDHELP=1
            fi
            ;;
        --main)
	    MAIN_CMDL="$2"
	    MAIN="$MAIN_CMDL"
	    shift 2
            ;;
        --styleroot)
            test -d "$2" || exit_on_error "Styleroot $2 is not a valid directory"
            STYLEROOT_CMDL="$2"
            # strip trailing slash
            STYLEROOT_CMDL=${STYLEROOT_CMDL%/}
            STYLEROOT="$STYLEROOT_CMDL"
            shift 2
            ;;
	-v|--verbosity)
            # $VERBOSITY will be parsed in the makefiles
            # VERBOSITY=0: print only final results message (default)
            # VERBOSITY=1: results of each target that is called
            # VERBOSITY=2: detailed output of each target
            #
            if [[ 1 = $DEBUG ]]; then
                VERBOSITY_CMDL=2
            else
                if [[ 0 = $2 ]]; then
                    VERBOSITY_CMDL=0
                 elif [[ 1 = $2 || "" = $2 ]]; then
                    VERBOSITY_CMDL=1
                else
                    VERBOSITY_CMDL=2
                fi
            fi
            VERBOSITY="$VERBOSITY_CMDL"
	    shift 2
	    ;;
        --version)
            echo "$ME $VERSION"
            exit 0
            ;;
        --) shift ; break ;;
        *) exit_on_error "Internal error!" ;;
    esac
    
done

# You can only specify DOCCONF or MAIN, not both
#
if [[ -n $DOCCONF_CMDL && -n $MAIN_CMDL ]]; then
    exit_on_error "The options -d/--docconfig and --main exclude each other."
fi

# Check FALLBACK_STYLEROOT and STYLEROOT
#
if [[ -n $FALLBACK_STYLEROOT && -z $STYLEROOT ]]; then
    ccecho "warn" "--styleroot is not specified, ignoring --fb_styleroot"
fi 


unset POSIXLY_CORRECT # we want the regular getopts behaviour on the second run

#-----------------------------------
# Store the subcommand and it's args

# extract the subcommand from $@ if $ME has been called with no arguments
# or with "help" as the only argument, run global help. If it was called with
# SUBCOMMAND help or help SUBCOMMAND, rewrite the command so the subcommand help
# is displayed.

if [[ -z $1 ]] || [[ help = $1 && -z $2 ]]; then
    # Call: "$ME" or "$ME help"
    #
    daps_help
    exit 0
elif [[ help = $2 ]]; then
    # Call: "$ME foo help ..."
    # Rewrite to "$ME foo -h"
    #
    SUBCMD=$1
    declare -a SCMD_ARGS=( "-h" )
elif [[ help = $1 && -n $2 ]]; then
    # Call: "$ME help foo"
    # Rewrite to "$ME foo -h"
    #
    SUBCMD=$2
    declare -a SCMD_ARGS=( "-h" )
elif [[ 1 = $CALL_SCMDHELP ]]; then
    SUBCMD=$1
    declare -a SCMD_ARGS=( "-h" )
else
    # No help
    SUBCMD=$1
    shift
    declare -a SCMD_ARGS=( "$@" )
fi

# Now that we have the subcommand, check whether it is valid

if [[ -z ${SUBCOMMANDS[$SUBCMD]} ]]; then
    ccecho "error" "Error: Unknown subcommand \"$SUBCMD\"" >&2
    ccecho "normal" "Type '$ME help' to get a list of global parameters and subcommands" >&2
    exit 1;
fi

# Now check, whether subcommand help has been requested by -h or --help
# anywhere in the argument string or if SCMD_ARGS contains bad strings
#
case "${SCMD_ARGS[@]}" in
    "-h"|"-h "*|*" -h "*|*" -h"|"--help"|"--help "*|*" --help "*|*" --help")
        declare -a SCMD_ARGS=( "-h" )
        ;;
    *DOCCONF*|*DAPSROOT*|*DOC_DIR*|*MAIN*)
        if [[ showvariable != $SUBCMD ]]; then
            exit_on_error "Please specify DOC_DIR, DOCCONF, MAIN, or DAPSROOT via command line options"
        fi
esac


# ----------------------------------------------------------------------------
# Setting up the environment for the complete mechanics
#
# The environment is set up using the following hierachy
# (1 == always wins)
#
# 1. Command line 
#    - either as a real option
#    - or as variable declaration (FOO=bar) --> debugging and developing
# 2. DC-file
# 3. $USER_CONFIG (user config file)
# 4. @sysconfig@/daps/config or $DAPSROOT/etc/config
#
# In order to make developing easier, there is a hidden feature to set
# DAPSROOT, allowing to have multiple daps versions installed into
# different directories. You can switch between them by setting DAPSROOT
# accordingly. Either by command line switch --dtdroot or in  your user
# config file (DAPSROOT="<path>") 
#
# Since commandline values take precedence we need to recover them every
# time we source a file
#

# source the user config for the first time to get DAPSROOT
#
if [[ -f $USER_CONFIG && -z $DAPSROOT_CMDL ]]; then
    source "$USER_CONFIG"
    recover_cmdl_values
fi

# IF we have a custom DAPSROOT, $DAPSROOT is set by now - if not, use the default
if [[ -n $DAPSROOT ]]; then
    # custom DAPSROOT was set
    if [[ ! -d "$DAPSROOT" ]]; then
        exit_on_error "dtdroot $DAPSROOT is no valid directory"
    else
        # valid directory
        #  strip trailing slash
        DAPSROOT=${DAPSROOT%/}
        BIN_DIR="${DAPSROOT}/bin"
        export PATH=$BIN_DIR:$PATH
        LIB_DIR="${DAPSROOT}/lib"
        LIBEXEC_DIR="${DAPSROOT}/libexec"
        CONFIG="${DAPSROOT}/etc/config"
        XML_CATALOG_FILES="$DAPSROOT/etc/catalog.xml"
    fi
else
    # default DAPSROOT
    # no need to set BIN_DIR here, since it should be in the default path
    DAPSROOT="$DAPSROOT_DEFAULT"
    LIB_DIR="$DEFAULT_LIB_DIR"
    LIBEXEC_DIR="$DEFAULT_LIBEXEC_DIR"
    CONFIG="$DEFAULT_CONFIG"
fi

# Now that everything is in place, source the functions, the system config
# and the user config (again)
source "$LIB_DIR/daps_functions"
source "$CONFIG"
if [[ -f $USER_CONFIG ]]; then
    source "$USER_CONFIG"
fi
recover_cmdl_values
sanitize_paths

#----------------------------------
# Run early commands that do not need to have an environment fully set up

#
# run help if requested
#
if [[ "${SCMD_ARGS[@]}" = "-h" ]]; then
    eval "${SUBCOMMANDS[$SUBCMD]} $SUBCMD ${SCMD_ARGS[@]}"
fi

# Sample call for early commands
#
#case "$SUBCMD" in
#    foo)
#      "${SUBCOMMANDS[$SUBCMD]}" "${SCMD_ARGS[@]}"
#      exit
#      ;;
#esac

#-------------------------------------
# Source DOCCONF and set up MAIN, DOC_DIR
#
# The black magic part of daps ... ;-)
#
# Three possibilities:
# 1. MAIN was set on the command line or via user config
# 2. DOCCONF was set on the command line
# 3. MAIN and DOCCONF were _not_ set
#
# Use MAIN_CMDL and DOCCONF_CMDL in the following in order to avoid that
# these get overwritten by chance with values from the DOCCONF files
# (DOCCONF should never be set in an ENV file and MAIN_CMDL should always
# overwrite a MAIN setting from DOCCONF)
# The real values will be set when calling recover_cmdl_values

# set DOCCONF_CMDL if DC-file was sourced
[[ -n $DOCCONF && -z $DOCCONF_CMDL ]] && DOCCONF_CMDL=$DOCCONF 

if [[ -z $DOCCONF_CMDL && -z $MAIN_CMDL ]]; then
# DOCCONF and MAIN were not set on the command line, check other possibilities
    if [[ -n $DOCCONF_NAME ]]; then
    # check if DOCCONF was sourced
    # takes precedence over a default set in config
        if [[ -e "$DOCCONF_NAME" ]]; then
            DOCCONF_CMDL=$(absolute_path "$DOCCONF_NAME")
            DOC_DIR=$(dirname "$DOCCONF_CMDL")
            if [[ 1 -le $VERBOSITY ]]; then
                ccecho "info" "Using previously sourced DOCCONF $DOCCONF_CMDL"
            fi
        else
            exit_on_error "Cannot find previously sourced DOCCONF \"$DOCCONF_NAME\".\nWhen sourcing the doc config, you either need to run $ME from the directory\nwhere you sourced the config, or you need to provide an absolute path when\nsourcing the doc config."
        fi
    elif [[ -n $DOCCONF_DEFAULT ]]; then
    # check if a default value was specified in the user/system config file
        if [[ -e $DOCCONF_DEFAULT ]]; then
            DOCCONF_CMDL=$(absolute_path "$DOCCONF_DEFAULT")
            DOC_DIR=$(dirname "$DOCCONF_CMDL")
            if [[ 1 -le $VERBOSITY ]]; then
                ccecho "info" "Using DOCCONF $DOCCONF_DEFAULT from config files"
            fi
        else
            exit_on_error "DOCCONF_DEFAULT \"$DOCCONF_DEFAULT\" not found in current directory.\nCheck your config file at $USER_CONFIG."
        fi
    else
    # try to automatically set DOCCONF
        autoset_docconf
    fi
elif [[ -n $MAIN_CMDL ]]; then
    # MAIN was set on the command line or in the user config
    set_mainfile "$MAIN_CMDL"
elif [[ -n $DOCCONF_CMDL ]]; then
    # check if DOCCONF is a regular file
    if [[ -e $DOCCONF_CMDL ]]; then
        DOCCONF_CMDL=$(absolute_path "$DOCCONF_CMDL")
        DOC_DIR=$(dirname "$DOCCONF_CMDL")
    else
        exit_on_error "The file \"$DOCCONF\" you specified with --docconf is not a valid file"
    fi
fi


[[ -z "$DOCCONF_CMDL" ]] && exit_on_error "Fatal: \$DOCCONF is not set. This should not have happened"
[[ -e "$DOCCONF_CMDL" ]] || exit_on_error "Fatal: Could not find DOCCONF \"$DOCCONF_CMDL\""

#
# FINALLY! Source the DOCCONF file, recover the command line values

[[ -n $DOCCONF_CMDL ]] && source $DOCCONF_CMDL
recover_cmdl_values
sanitize_paths

# If MAIN was not specified on the command line, set MAIN to an absolute
# path
if [[ -z "$MAIN_CMDL" ]]; then
    set_mainfile "$MAIN"
    MAIN="$MAIN_CMDL"
fi
# A final test
[[ -e "$MAIN" ]] || exit_on_error "Fatal: Could not find $MAIN"

#----------
# Values that need to be exported and are not set in the config
#

# book name
if [[ -n $PDFNAME ]]; then
    export BOOK="$PDFNAME"
else
    DC_FILE=$(basename $DOCCONF)
    export BOOK="${DC_FILE#${CONF_PREFIX}*}"
fi

# XML_CATALOG_FILES
if [[ -n $XML_CATALOG_FILES ]]; then
    export XML_CATALOG_FILES
fi

# ----------------------------------------------------------------------------
# Set paths
#
# set all basic paths that have not been set by now

#----------------------------------
# default BUILD_DIR if not specified on the command line
[[ -z $BUILD_DIR_CMDL ]] && BUILD_DIR=${DOC_DIR}/build

#----------------------------------
# DocBook Stylesheet locations
#
# get DocBook version first ...
DOCBOOK_VERSION=$(xsltproc \
    ${DAPSROOT}/daps-xslt/common/get-docbook-version.xsl $MAIN 2>/dev/null) || \
    { DOCBOOK_VERSION=4; ccecho "warn" \
      "Could not get DocBook version, assuming DocBook 4"; } 

# ... no resolve the style URI via catalogs
if [[ 5 = $DOCBOOK_VERSION ]]; then
    DOCBOOK_STYLES=$(xmlcatalog $XML_MAIN_CATALOG \
        $DOCBOOK5_STYLE_URI 2>/dev/null) || \
        exit_on_error "Could not determine the DocBook stylesheet location by\nresolving $DOCBOOK5_STYLE_URI\n via xmlcatalog"
    # also get the RNG scheme location
    DOCBOOK5_RNG=$(xmlcatalog $XML_MAIN_CATALOG \
        $DOCBOOK5_RNG_URI 2>/dev/null) || \
        exit_on_error "Could not determine the DocBook 5 schema location by\nresolving $DOCBOOK5_RNG_URI\n via xmlcatalog"
elif [[ 4 = $DOCBOOK_VERSION ]]; then
    DOCBOOK_STYLES=$(xmlcatalog $XML_MAIN_CATALOG \
        $DOCBOOK4_STYLE_URI 2>/dev/null) || \
        exit_on_error "Could not determine the DocBook stylesheet location by\nresolving $DOCBOOK4_STYLE_URI\n via xmlcatalog"
else
    exit_on_error "Fatal: Could not determine the DocBook version from $MAIN" 
fi

# remove the file:// string from the styles
# use ##*file:// rather than #file:// because sometimes xmlcatalog also outputs
# warnings to stdout which we would like to ignore. Fortunately the file:// url
# is always the last string
#
DOCBOOK_STYLES=${DOCBOOK_STYLES##*file://}
DOCBOOK5_RNG=${DOCBOOK5_RNG##*file://}

# ...and export
export DOCBOOK_STYLES DOCBOOK5_RNG DOCBOOK_VERSION

#----------------------------------
# Result directory / LOG directory
#
R_DIR="${BUILD_DIR}/${BOOK}/"
LOG_DIR="${R_DIR}/log"


#----------------------------------
# Sanity checks
#
[[ -z "$DOC_DIR" ]] && exit_on_error "Fatal: \$DOC_DIR is not set. This should not have happened. Please report a bug."
[[ -d "${DOC_DIR}/xml" ]] || exit_on_error "Fatal: Could not find DOC_DIR \"${DOC_DIR}/xml\"."
[[ -z "$DAPSROOT" ]] && exit_on_error "Fatal: \$DAPSROOT is not set. This should not have happened. Please report a bug."
[[ -d "$DAPSROOT" ]] || exit_on_error "Fatal: Could not find DAPSROOT \"${DAPSROOT}\"."

#-------------------------------------------------------------------
# Now export all variables set by the config file
export "${VARLIST[@]}"

#-------------------------------------------------------------------
# Finally, run the Subcommands
#

# By default we want to write a logfile, can be overwritten by
# subcommand function
#
WRITE_LOG=1

eval "${SUBCOMMANDS[$SUBCMD]} $SUBCMD ${SCMD_ARGS[@]}"


