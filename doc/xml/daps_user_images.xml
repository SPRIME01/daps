<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet
 href="urn:x-daps:xslt:profiling:docbook45-profile.xsl" 
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd"
[<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter id="cha.daps.user.img">
 <title>Image Handling</title>
 <para>
  <remark>taroth 2012-03-14: todo: also add advanced features like listings
  with daps etc.</remark>
 </para>
 <para>
  Depending on the output format you generate with &dapsacr; (PDF or HTML
  for example), the source images you provide and reference in your XML
  sources are automatically transformed into the appropriate output formats.
  For example, SVG images are converted to PNG for HTML builds, or color
  images to grayscale for black-and-white PDFs.<remark>taroth 2012-09-19:
  maybe it would make sense to include the basic information also
  here (by using phrase entities) and to remove the next sentence?</remark> 
  For basic information about
  image handling (such as supported formats, where to store the images in
  your documentation directory, and how to reference them in your XML
  files), refer to <xref linkend="sec.daps.quick.imgs"/>.
 </para>
 <sect1 id="sec.daps.user.imgs.types">
  <title>Supported Image Types</title>
  &daps-img-formats;
 </sect1>
 <sect1 id="sec.daps.user.imgs.usage">
  <title>Where to Use Which Image Type<remark>Make this a sect2? sknorr, 31-08-2012</remark></title>
  <sect2 id="sec.daps.user.imgs.usage.dia">
   <title>DIA</title>
   <para>
    The software <ulink url="https://live.gnome.org/Dia">Dia</ulink> is a diagram editor which can be used to draw
    entity-relationship diagrams, UML diagrams, and flowcharts. It stores these
    diagrams in a custom XML-based vector format called DIA.
   </para>
   <remark>taroth 2012-09-19: I would first mention what DIA is and then with
   which tool to create the format</remark>
   <para>
    Being a vector format, DIA is resolution-independent, meaning that an image
    in this format can be displayed or printed as large or small as you wish
    without artifacts.
   </para>
   <para>
    Dia makes it very easy to connect elements, to add text and to use simple
    fill and border colors. Although it can import <acronym>SVG</acronym> files as
    shapes, it is not useful for drawing shapes freely itself. It also makes it
    relatively hard to create complex or effect-laden vector illustrations and
    information graphics.
   </para>
   <para>
    DIA files are automatically compressed when saving, thus
    they are often quite small.
   </para>
  </sect2>
  <sect2 id="sec.daps.user.imgs.usage.eps">
   <title><acronym>EPS</acronym></title>
   <!--taroth 2012-09-19: using the acronym element in a title element leads to
   stylesheets problems in PDF output - please file a bug for toms-->
   <important>
    <title>Using EPS files is not recommended</title>
    <remark>taroth 2012-09-19: use title-style capitalization also for admonition
    titles, see http://svn.opensuse.org/svn/opensuse-doc/trunk/documents/styleguide/en/xml/opensuse_documentation_styleguide.xml,
    id=sec.edrules.cap</remark>
    <para>
     <acronym>EPS</acronym> support in DAPS is experimental and currently only
     supported in combination with the XEP formatter. Even then, it might lead
     to longer document creation times.
    </para>
   </important>
   <remark>taroth 2012-09-19: the admonition title appears a bit strange, provided 
   that we support the format, even if it is experimental</remark>
   <!--taroth 2012-09-19: how about rephrasing to something like this:
   Limitations for Using EPS Files
   <acronym>EPS</acronym> support in &dapsacr; is in experimental stage. Using 
   EPS files is only supported in combination with the XEP formatter and may
   lead to longer document creation times.-->
   <para>
    The <emphasis>Encapsulated Postscript</emphasis> format is a general purpose
    vector image format. As a Postscript-based format, it is similar to
    <acronym>PDF</acronym>. There is currently no mainstream Linux image editor
    software that creates <acronym>EPS</acronym> files natively, although a number
    of applications can export into it. <acronym>EPS</acronym> might occasionally
    serve as an exchange format with contributors that use Adobe* graphics software.
   </para>
   <para>
    Where feasible, it is recommended that you use <acronym>SVG</acronym> files
    instead of <acronym>EPS</acronym> files.
   </para>
  </sect2>
  <sect2 id="sec.daps.user.imgs.usage.fig">
   <title><acronym>FIG</acronym></title>
   <para>
    <acronym>FIG</acronym> is a vector image format that can be created with the
    software <ulink url="http://www.xfig.org">Xfig</ulink>. While you should
    create new illustrations as <acronym>SVG</acronym> files and new diagrams as
    <acronym>DIA</acronym>, the support for <acronym>FIG</acronym> files can help
    when working with legacy images.
   </para>
  </sect2>
  <sect2 id="sec.daps.user.imgs.usage.pdf">
   <title><acronym>PDF</acronym></title>
   <important>
    <title>Using PDF files is not recommended</title>
     <!--taroth 2012-09-19: use title-style capitalization, see remark above-->
    <para>
     <acronym>PDF</acronym> support in DAPS is experimental and currently only
     supported in combination with the XEP formatter. Even then, it might lead
     to longer document creation times.
    </para>
   </important>
   <para>
    The <emphasis>Portable Document File</emphasis> format is a general purpose,
    page-based fixed-layout document format. <acronym>PDF</acronym> is a
    Postscript-based format. There is a large number of Linux software that can
    export <acronym>PDF</acronym> files natively. <acronym>PDF</acronym> files
    can also be used as an exchange format with contributors that are unable to
    export to <acronym>SVG</acronym>.
   </para>
  </sect2>
  <sect2 id="sec.daps.user.imgs.usage.png">
   <title><acronym>PNG</acronym></title>
   <para>
    The <emphasis>Portable Network Graphics</emphasis> format can be used whenever
    you wish to use a raster, that is, point-based image. A good example for when
    to use <acronym>PNG</acronym> files are screenshots and photographs.
   </para>
   <para>
    <acronym>PNG</acronym> files can be created with a number of applications,
    among them is the GIMP graphics editor.
   </para>
   <tip>
    <title>Use <command>daps optipng</command> to make PNG files smaller</title>
     <!--taroth 2012-09-19: use title-style capitalization, see remark above-->
    <para>You can decrease the file size of PNG images without altering their
     look. This can be achieved by a &daps; command that removes unused colors 
     and alpha channels.
    </para>
    <para>
     To run <command>optipng</command> over an entire book's PNG images, use
     <command>daps -d DC-your-dc-file optipng</command>.
     <!--taroth 2012-09-19: please use a replaceable element and let's use a
     consistent naming scheme throughout the book: in the chapter before, I used
     <replaceable>PATH_TO_&dc;_FILE</replaceable> but we can also call it
     <replaceable>YOUR_&dc;_FILE</replaceable>-->
    </para>
   </tip>
  </sect2>
  <sect2 id="sec.daps.user.imgs.usage.svg">
   <title><acronym>SVG</acronym></title>
   <para>
    The <emphasis>Scalable Vector Graphics</emphasis> format is a general purpose,
    vector image format. <acronym>SVG</acronym> is an XML format which can be
    displayed in most browsers and edited in many graphics programs.
   </para>
   <para>
    A good open-source <acronym>SVG</acronym> editor is
    <ulink url="http://inkscape.org/">Inkscape</ulink>, which is
    available for most operating systems. You can also create <acronym>SVG</acronym>
    files from many Adobe* products, for instance, from Illustrator*. SVG is the
    preferred vector image format for &dapsacr;.
   </para>
   <important>
    <title>Save <emphasis>Plain SVG</emphasis> files</title>
    <para>
     If your SVG editor offers you the choice of saving your file in a custom
     SVG-based format or <emphasis>Plain SVG</emphasis> (or more formally,
     <emphasis>standard SVG</emphasis>), always use the plain version.
    </para>
    <para>
     The components used by &dapsacr; for working with SVG files might otherwise
     not be compatible with the files your graphics editor generates.
    </para>
   </important>
  </sect2>
 </sect1>
 <sect1>
  <title>Managing Images</title>
   <sect2 id="sec.daps.user.imgs.dir">
    <title>Organisation of the <code>images</code> Directory</title>
    <!--taroth 2012-09-19: the following contents is already part of the QSG,
    no problem to mention it here as well, but let's merge the contents and 
    use a phrase-entity-->
    <para>
     &dapsacr; requires you to use a specific directory structure for images. All
     images that you reference from your DocBook files must be stored in
     a sub-directory of the project directory named
     <filename>images/src/file_extension</filename>. For instance, <acronym>PNG</acronym>
     files must be stored under <filename>images/src/png</filename>. If you used
     <command>daps-init</command> to set up your project, the appropriate
     directories should already exist.
    </para>
    <important>
     <title>Use unique file names</title>
     <para>
      Always store just one file with a particular name within the
      <filename>images/src</filename> folder of a project. Having, for instance,
      a file called <filename>example.png</filename> and another called
      <filename>example.svg</filename> in the same project will often lead to
      questions like:
     </para>
     <itemizedlist>
      <listitem><para>Which file should be used where?</para></listitem>
      <listitem><para>Are both similarly named files current, or is one outdated?</para></listitem>
     </itemizedlist>
     <para>
      When invoking &dapsacr; with the parameter <command><parameter>-v</parameter></command>,
      a warning will be printed whenever a file name appears twice within a project.
     </para>
    </important>
    <important>
     <title>Avoid spaces in file names</title>
     <para>
      The <command>make</command> command on which &dapsacr; is built has trouble
      understanding spaces in file names 
     </para>
     <para>
      Instead, you can use either underscores (<filename>_</filename>), hyphens
      (<filename>-</filename>) or you can camel-case your file names
      (<filename>aCamelCasedFileName</filename>).
     </para>
    </important>
    <!--taroth 2012-09-19: the contents of the first admonition is already part
    of the QSG - how about merging both admonitions and use the same one in
    both? e.g.
    File Name Requirements
    - unique file names: ...
    - no spaces in file names: ...
    BTW, we could also turn this into a regular section to avoid having too many
    admonitions-->
    <para>
     It is a good idea to find a consistent file naming scheme. For instance, when
     documenting software, it might prove helpful to include the name of the
     application that a screenshot is made of at the beginning of the file name.
     You could also use prefixes like <filename>screenshot_</filename> and
     <filename>diagram_</filename> to separate between different types of images.
    </para>
   </sect2>
  <sect2>
   <title>Gaining an Overview over Images Used</title>
   <para>
    To find out which images are used and unused in a project or referenced in a
    DocBook file but missing from the file system, &dapsacr; offers
    a handful of sub-commands that check your project for such relationships.
    <remark>"Relationships" is really not a good word. Ideas for improvement
     welcome.--sknorr, 2012-09-17</remark>
   </para>
   <variablelist>
    <varlistentry>
     <term><command>daps <parameter>-d</parameter> DC-<replaceable>YOUR_DC_FILE</replaceable> projectgraphics</command></term>
     <listitem><para>Lists all graphics used by the DocBook files referenced in the
      current &dc; file.</para></listitem>
    </varlistentry>
    <varlistentry>
     <term><command>daps <parameter>-d</parameter> DC-<replaceable>YOUR_DC_FILE</replaceable> missinggraphics</command></term>
     <listitem><para>Lists all graphics that are referenced in your DocBook files,
     but could not be found in the file system. In case there are any missing
     graphics, you will not be able to build your project.</para></listitem>
    </varlistentry>
    <varlistentry>
     <term><command>daps <parameter>-d</parameter> DC-<replaceable>YOUR_DC_FILE</replaceable> remaininggraphics</command></term>
     <listitem><para>Lists all graphics that are not referenced in the given &dc;
      file.
     </para>
     <important>
      <title>Use a set to check for unnecessary graphics </title>
      <para>
       If you are storing multiple &dc; files in the same project folder, you
       should always use the &dc; file of a set containing all articles and books
       in the project folder to check whether graphics are indeed unnecessary.       
      </para>
     </important>
     </listitem>
    </varlistentry>    
   </variablelist>
   <para>
    In general, all of the above sub-commands should be used together with another
    command. By themselves, they do not generate output fit for on-screen reading.
    Instead, output will look like this:
   </para>
   <screen>/home/user/repository/documents/project/en/images/src/dia/example_dia.dia /home/
user/repository/documents/distribution/en/images/src/png/example_png1.png /home/
user/repository/documents/distribution/en/images/src/png/example_png2.png /home/
user/repository/documents/distribution/en/images/src/png/example_png3.png /home/
user/repository/documents/distribution/en/images/src/png/example_png4.png /home/
user/repository/documents/distribution/en/images/src/png/example_png5.png /home/
user/repository/documents/distribution/en/images/src/png/example_png6.png /home/
user/repository/documents/distribution/en/images/src/svg/example_svg.svg /home/u
ser/repository/documents/distribution/en/images/src/fig/example_fig.fig ...</screen>
   <para>
    To add a line break after each file name, use the
    <command><parameter>--pretty</parameter></command> parameter. For instance,
    to count the number of images used in a given output file, you could use
    the following (<command>wc</command> is a command used to count words, or in
    this case, lines):
   </para>
    <screen>$ <command>daps <parameter>-d</parameter> DC-<replaceable>YOUR_DC_FILE</replaceable> projectgraphics <parameter>--pretty</parameter> | wc <parameter>-l</parameter></command></screen>
      
  </sect2>
  <sect2>
   <title>Working with Generated Images</title>
   <para>
    &dapsacr; automatically generates appropriate image formats for each output
    format from your source files. If an image referenced from your DocBook
    files is changed, &dapsacr; will notice when trying to build for the next
    time and generate new versions of the image automatically.
   </para>
   <sect3>
    <title>Gaining an Overview over Images Generated</title>
    <para>
     As with source images, &dapsacr; can generate lists of generated images that
     have been generated for use with the various output formats.
    </para>
    <variablelist>
     <varlistentry>
      <term><command>daps <parameter>-d</parameter> DC-<replaceable>YOUR_DC_FILE</replaceable> xmlgraphics</command></term>
      <listitem><para>Lists all generated color images.</para></listitem>
     </varlistentry>
     <varlistentry>
      <term><command>daps <parameter>-d</parameter> DC-<replaceable>YOUR_DC_FILE</replaceable> xmlgraphics-bw</command></term>
      <listitem><para>Lists all generated black-and-white images.</para></listitem>
     </varlistentry>
    </variablelist>
   </sect3>
   <sect3>
    <title>Cleaning Up the Generated Images Directory</title>
    <para>
     In rare cases, such as for instance when a file previously had an incorrect
     timestamp or when you have changed your global &dapsacr; configuration, &dapsacr;
     might wrongly assume that an already generated file should be inserted into
     your output format when in reality the file should be re-generated. In such
     a case, you can use
     <command>daps -d DC-<replaceable>YOUR_DC_FILE</replaceable> clean-images</command>
     to delete all images generated for a certain &dc; file.
    </para>
   </sect3>   
  </sect2>
  
 </sect1>
 
 
</chapter>
