<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet
 href="urn:x-suse:xslt:profiling:docbook45-profile.xsl" 
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd"
[<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter id="cha.daps.user.features">
 <title>Conceptual Overview</title>
 
 <sect1 id="sec.daps.user.dbversions">
  <title>Supported DocBook Versions</title>
  <para>&daps-db-versions;</para>
 </sect1>
 <sect1 id="sec.daps.user.features">
 <title>Key Features</title>
  <para>&dapsacr; supports technical writers in the editing, translation and 
   publishing process of DocBook XML files:</para>
  <variablelist>
   <varlistentry>
    <term>Output Formats</term>
    <listitem>
     <para>&dapsacr; lets you publish your XML sources in a number of different 
     output formats, for example: HTML, HTML-single, PDF, &epub;, &webh;, text, 
       man pages, or MediaWiki. For details, refer to 
       <xref linkend="cha.daps.user.output"/>.<remark>taroth 2012-04-24: decide 
       where to point to: book chapter or QS?</remark>
       </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Custom Layouts</term>
    <listitem>
     <para>By default, &dapsacr; uses the DocBook stylesheets to generate the 
     output formats. But &dapsacr; also supports custom layouts for your 
     documentation projects (or for individual books within your set).
     <!--You do not need to define custom stylesheets for <emphasis>all</emphasis> 
     output formats&mdash;in case a custom layout cannot be found, &dapsacr; 
     will automatically fall back to the DocBook stylesheets.--> </para>
     <para>Apart from that, &dapsacr; allows you to change individual layout
     parameters by passing string parameters to xsltproc for HTML or PDF builds
     &mdash;without even touching the stylesheets. For details about custom 
     layouts, refer to <xref linkend="cha.daps.user.layout"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Editor Macros</term>
    <listitem>
     <para>For Emacs, &dapsacr; includes a set of macros for easy insertion of 
     complex DocBook elements like <sgmltag>variablelist</sgmltag>, 
     <sgmltag>figure</sgmltag>, <sgmltag>table</sgmltag> or <sgmltag>indexterm</sgmltag>. 
     Instead of inserting the child elements successively, you will get a 
     <quote>skeleton</quote> that includes all required child elements and 
     is ready to be filled with contents. For details, refer to 
     <xref linkend="cha.daps.user.edit"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Validating</term>
    <listitem>
     <para>Validating XML files within in a book or set exceeds validation of the
     current XML file, as links (<sgmltag>xref</sgmltag> elements) or XIncludes 
     need to be resolved, too. With &dapsacr;, you can check validity of all 
     files that belong to a documentation project with a single command. For details, 
     refer to <xref linkend="cha.daps.user.edit"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Spell Check</term>
    <listitem>
     <para>&dapsacr; supports spell checking of your XML sources with aspell from 
     the command line. <remark>taroth 2012-02-20: DEVs, is the following correct?</remark>
     Depending on the XML editor you use, you can also integrate a custom aspell
     dictionary into your editor. For details, refer to 
     <xref linkend="cha.daps.user.edit"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Link Checker</term>
    <listitem>
     <para>To make sure that all links in your XML sources are still available 
     (and do not give a <literal>404</literal> error or similar), &dapsacr; also
     includes a link checker (based on <literal>checkbot</literal>). Use it 
     to create a report of all links that caused some kind of warning or error.
     For details, refer to <xref linkend="cha.daps.user.edit"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Image Handling</term>
    <listitem>
     <para>&dapsacr; provides sophisticated image handling support. For example, 
     it can transform images referenced in your XML files into different
     formats, list all source images referenced in your XML files, list any 
     missing images or list the <emphasis>generated</emphasis> images used 
     for the various output formats. You can also forward those lists to your 
     preferred image viewer to conveniently browse through the images, or check
     if all image names are unique. For details, refer to 
     <xref linkend="cha.daps.user.img"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Profiling (Conditional Text)</term>
    <listitem>
     <para>If you have similar products to document and want to generate 
      multiple documentation variants from your XML files, you can do so
      with the help of conditional text (or <literal>profiling</literal>, as it 
      is called in DocBook). For example, you can profile certain parts of your 
      XML texts for different (processor) architectures, operating systems, 
      vendors or target groups. Use the <literal>PROF*</literal> keys defined 
      in &dapsconf-sys; to define which information should be included
      in the output. For details, refer to <xref linkend="cha.daps.user.edit"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Dynamic Product Names and Numbers</term>
    <listitem>
     <para>&dapsacr; allows to set product name and product number dynamically. 
     This enables you to use the same XML sources for different products. If you 
     use the entities &amp;productname; and &amp;productnumber; in your XML
     sources, &dapsacr; will automatically use the values 
     defined in the  <sgmltag>productname</sgmltag> and <sgmltag>productversion</sgmltag>
     elements within the <sgmltag>bookinfo</sgmltag> or
     <sgmltag>articleinfo</sgmltag>. For details, refer to 
     <xref linkend="cha.daps.user.edit"/>.   
  </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Review and Translation Processes</term>
    <listitem>
     <para>&dapsacr; offers a numbers of features to simplify review and 
     translation processes. For example, you can insert 
     <sgmltag>remark</sgmltag> elements in the source code and generate an output 
     format that either includes or suppresses these remarks. You can also 
     generate preview versions of your documentation with a <literal>DRAFT</literal>
     watermark appearing on the HTML or PDF output. If you use &dm; in addition to
     &dapsacr;, you can <quote>flag</quote> your XML files with meta-information
     (like workflow status). &dapsacr; offers an option to also display
     this meta-information in the generated output. For handing over your files 
     to review or translation, &dapsacr; can create tarballs of the XML
     sources and graphics. Alternatively, transform all files 
     included in your <sgmltag>book</sgmltag> or <sgmltag>set</sgmltag> into an
     XML bigfile. <!--If you have a huge documentation project of which only individual
     books or files are to be translated, you can mark them for translation
     with &dm;. The command <command>daps locdrop</command> will automatically 
     sort and pack those files into s separate tarball.--><remark>taroth 2012-03-02:
     todo - add link to one or more chapters, if appropriate</remark>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Packaging and Deployment</term>
    <listitem>
     <para>For deploying the documentation as RPM packages and integrating it 
     into KDE and GNOME desktop environments as well as into Web user interfaces
     (via JSP), &dapsacr; offers a number of options to produce the corresponding
     output: For example, you can create source packages, HTML tarballs, color 
     PDFs and desktop and document files with the <command>daps package-*</command>
     commands.<remark>taroth 2012-03-02: todo - add link to deployment chapter, 
     if appropriate</remark>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 id="sec.daps.user.config">
  <title>&dapsacr; Configuration</title>
 &daps-config;
 </sect1>
 <sect1 id="sec.daps.user.basics">
  <title>Defining Documentation Projects</title>
  <para>
   The easiest way to set up a new documentation project from scratch is to
   use the &dapsacr; initialization script <command>daps-init</command>. For
   instructions how to do so, refer to <xref linkend="pro.daps.init"/>. The
   script automatically creates the <xref linkend="sec.daps.user.basics.files" 
   xrefstyle="select:title"/> and <xref linkend="sec.daps.user.basics.dirstruct" 
   xrefstyle="select:title"/> that you need to get started with  &dapsacr;.
  </para>
  <sect2 id="sec.daps.user.basics.files">
   <title>Key Files</title>
   &daps-key-files;
  </sect2>
  <sect2 id="sec.daps.user.basics.dirstruct">
  <title>Directory Structure</title>
  <!--taroth 2012-04-26: cave, same contents in DAPS Quick 
  (art_daps_quick.xml, see id=sec.daps.quick.basics.dirstruct)-->
  <!--taroth 2012-04-26: impossible to source out to phrases-decl.ent and 
  include it multiple times (callout IDs!)-->
   <para>
    For &dapsacr; to work out of the box, your XML files and images must be
    organized in a specific structure within your documentation directory.
    <xref linkend="ex.daps.dir.doc"/> shows the required structure including
    the key files for a &dapsacr; documentation project. You can also create
    multiple documentation directories for individual documentation projects,
    but they all need the substructure outlined below.
   </para>
    
   <example id="ex.daps.dir.doc">
    <title>Directory Structure</title>
    <screen><replaceable>YOUR_DOC_DIR/</replaceable><co id="co.docdir.base"/>
  |--&dc;*<co id="co.docdir.dc"/>
     |--images/
     |   |--src/<co id="co.docdir.img.src"/>
     |   |  |--dia/
     |   |  |--eps/
     |   |  |--fig/
     |   |  |--pdf/
     |   |  |--png/
     |   |  |--svg/
     |--xml/<co id="co.docdir.xml"/> 
     |   |--MAIN*.xml<co id="co.docdir.main"/></screen>
   </example>
   <calloutlist>
    <callout arearefs="co.docdir.base">
     <para>
      <quote>Working directory</quote> for the respective documentation project.
     </para>
    </callout>
    <callout arearefs="co.docdir.dc">
     <para>
      &dc; file defining the documentation project. <!--For more information,
      refer to <xref linkend="sec.daps.user.oview.docproject"/>.--></para>
    </callout>
    <callout arearefs="co.docdir.img.src">
     <para>
      Top-level directory for any original images that you want to use in
      the documentation project. Contains subdirectories for images in
      various formats. Any images to be referenced in the XML sources must
      be put in the respective subdirectories. For information about referencing
      images, refer to <xref linkend="sec.daps.quick.imgs.refer"/>.
     </para>
    </callout>
    <callout arearefs="co.docdir.xml">
     <para>
      Directory holding the XML files for the documentation project. If you
      declare entities in an external file (for example, in
      <filename>entity-decl.ent</filename>), put the entity declaration file
      here, too.</para>
    </callout>
    <callout arearefs="co.docdir.main">
     <para>
      The main file of the documentation project. It contains
      <quote>references</quote> to other books, chapters, appendices, etc.
     </para>
    </callout>
   </calloutlist>
  </sect2>
 </sect1>
</chapter>
