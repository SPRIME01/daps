<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet
 href="urn:x-daps:xslt:profiling:docbook45-profile.xsl" 
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd"
[<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter id="cha.daps.user.modular">
 <title>Modularizing Documentation Projects</title>
 <para>
  This chapter describes:
  <itemizedlist>
  <listitem><para>how to create document variants by using profiling, and</para>
   </listitem>
   <listitem>
    <para>how to combine profiling and entities.</para>
   </listitem>
  </itemizedlist>
  <remark>taroth 2012-12-06: topics to add here for the future:
using XIncludes, using separate entity files</remark>
 </para>
 <!--<remark condition="clarity">
  2012-06-15 - fs:
  
  I would restructure this chapter a bit.
  
  First, this productname/productnumber stuff is not a DAPS feature, nor a
  different approach to profiling, it just combines the two DocBook features
  Profiling and Entities and thus adds even more flexibility to Profiling.
  Therefore I would add a section to the end of this chapter, something like
  "Combining Entities and Profiling" and then generally explain ho to use
  Profiling in entity definitions (most commonly via "phrase"). Afterwards
  present a short example using productname by showing the respective snippet
  from the entity declaration file and e.g. a single sentence para using the
  entity.  
  
  Second, I would suggest to restructure the chapter:
  
  1. General introduction to profiling with a simple example
  e.g. a simplelist with features for a basic and a professional edition
  of a software product (no callouts this time). Make sure people understand
  Profiling is a DocBook, not a DAPS feature
  
  simplelist>
  member>Common Feature 1 /member>
  member>Common Feature 2 /member>
  member>Common Feature 3 /member>
  member condition="basic">BasicFeature 1 /member>
  member condition="professional>ProFeature 1 /member>
  member condition="professional>ProFeature 2 /member>
  /simplelist>
  
  Plus the result in a two column table
  
  Add an important annotation explaining the need to really activate
  profiling when used in a document and show how the list would look like
  when profiling would not be activated at build time
  
  BTW: A note on Profiling attribute names
  They are just names that make it easier to recognize the purpose of the
  profiling attribute. It does not matter whether you use "os=foo", or
  "condition=foo" - the outcome is the same. You need several different
  attributes if you would like to combine them.
  Combining attributes is something that I would mention here as well:
  
  Assuming the professional edition product from the example above is also
  available as an OEM version for "OEMCompany" with additional features
  only available in the OEM edition:
  
  ...
  member condition="professional" vendor="oemcompany">
  OEMFeature 1
  /member>
  
  Note: I would rather _not_ use the attributes os and arch in the
  examples. Although names do not matter as explained above, these
  attribute names stand for something that is really special for Operating
  System vendors. The attribute concept is IMHO easier to understand when
  using condition and vendor.  
  
  
  2. Using profiling with DAPS
  
  Explain the prerequisites needed to use profiling with DAPS:
  * PI in the header of the MAIN (or, recommended to add a maximum
  flexibility, in the header of each XML file)
  * Activating profiling in  the DC file
  * supported attributes
  
  I would shorten the existing sections a bit, if possible, and move all
  the callout stuff and context to Section 3.
  
  3. Putting it both together
  
  The big example with the callouts. Since toms does not like your example
  ;-) you can probably reuse the example from 1. by putting
  it into a real document.
  
  4. Entities and Profiling as explained above
  
 </remark>-->
 <sect1 id="sec.daps.user.modular.profile">
  <title>Profiling&mdash;Support for Document Variants</title>
   
  &db-profiling-intro;
  &db-profiling; 

 <sect2 id="sec.daps.user.modular.profile.basics">
   <title>Introduction to DocBook Profiling</title>
   <para>DocBook offers profiling attributes for various purposes as illustrated
    in <ulink url="http://www.sagehill.net/docbookxsl/Profiling.html">
    <citetitle>Table 26.1. Profiling attributes</citetitle>
    </ulink>. Currently, not
    all of them are supported by &dapsacr;. For details, refer to 
    <xref linkend="sec.daps.user.modular.profile.daps"/>.</para>
   <para>Generally, profiling attributes can be used on a large number of 
   elements&mdash;from high-level elements like <sgmltag>book</sgmltag> 
   or <sgmltag>chapter</sgmltag> down to low-level elements like 
   <sgmltag>para</sgmltag>. With the <sgmltag>phrase</sgmltag> element, you can 
   even profile inline elements, like one sentence within a paragraph.<!--, see
   <xref linkend="ex.daps.profiling.inline"/>.-->
   </para>
   <para>Based on the conditions that you want to apply, select one or more 
   profiling attributes and add them to the text snippets that are conditional.
   The tagged snippets will only be included in the output if the required 
   condition is fulfilled. Any content that is valid for <emphasis>all</emphasis> 
   conditions does <emphasis>not</emphasis> need any profiling attributes. The 
   respective content will always be included in the output formats generated 
   from the XML sources. You are free in defining the attribute values 
   (<literal>condition="foo"</literal>), but they must be used consistently 
   in all files belonging to a documentation project.</para>
   <para>
    <xref linkend="ex.daps.profile.one"/> shows how to profile 
   product-specific information in a software description. Let us assume we have 
   to write documentation for the fictional software 
   <literal>Frog Sound Recordings</literal>. The software is available in 
   two editions: a basic edition for home users and a professional edition for 
   enterprise customers. Both editions share common features, but some features 
   are only available in the basic or the professional edition, respectively.</para>

   <example id="ex.daps.profile.one">
    <title>Product-specific Profiling (One Attribute)</title>
    <screen>&lt;simplelist&gt;
  &lt;member&gt;Common Feature 1&lt;/member&gt;
  &lt;member&gt;Common Feature 2&lt;/member&gt;
  &lt;member&gt;Common Feature 3&lt;/member&gt;
  &lt;member condition="basic"&gt;Basic Feature 1&lt;/member&gt;
  &lt;member condition="prof"&gt;Professional Feature 1&lt;/member&gt;
  &lt;member condition="prof"&gt;Professional Feature 2&lt;/member&gt;
&lt;/simplelist&gt;</screen>
   </example>
   <para>When generated for the basic edition or for the professional edition, 
   respectively, the example source code would result in the following 
   output:</para>
   <table id="tab.daps.profile.output.one" rowsep="1">
    <title>Output of <xref linkend="ex.daps.profile.one" xrefstyle="select:
     label"/>
    </title>
    <tgroup cols="2">
     <colspec colnum="1" colname="1" colwidth="50*"/>
     <colspec colnum="2" colname="2" colwidth="50*"/>
     <thead>
      <row>
       <entry colname="1">
        <para> Basic Edition </para>
       </entry>
       <entry colname="2">
        <para> Professional Edition </para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry colname="1">
        <para>Common Feature 1</para>
        <para>Common Feature 2</para>
        <para>Common Feature 3</para>
        <para>Basic Feature 1</para>
       </entry>
       <entry colname="2">
        <para>Common Feature 1</para>
        <para>Common Feature 2</para>
        <para>Common Feature 3</para>
        <para>Professional Feature 1</para>
        <para>Professional Feature 2</para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>If the profiling attributes are <emphasis>not</emphasis> processed during
   output, the source code in <xref linkend="ex.daps.profile.one"/> would
   result in the following (identical) output for both editions:</para>
   <table id="tab.daps.profile.output.one.without" rowsep="1">
    <title>Output of <xref linkend="ex.daps.profile.one" xrefstyle="select:
     label"/> (Without Profiling)</title>
    <tgroup cols="2">
     <colspec colnum="1" colname="1" colwidth="50*"/>
     <colspec colnum="2" colname="2" colwidth="50*"/>
     <thead>
      <row>
       <entry colname="1">
        <para> Basic Edition </para>
       </entry>
       <entry colname="2">
        <para> Professional Edition </para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry colname="1">
        <para>Common Feature 1</para>
        <para>Common Feature 2</para>
        <para>Common Feature 3</para>
        <para>Basic Feature 1</para>
        <para>Professional Feature 1</para>
        <para>Professional Feature 2</para>
       </entry>
       <entry colname="2">
        <para>Common Feature 1</para>
        <para>Common Feature 2</para>
        <para>Common Feature 3</para>
        <para>Basic Feature 1</para>
        <para>Professional Feature 1</para>
        <para>Professional Feature 2</para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>Let's suppose the professional edition of the software is also available 
    as OEM (original equipment manufacturer) version by the vendor 
    <literal>OEM Company</literal>. It contains additional features that are 
    only available in the OEM version:</para>
   <example id="ex.daps.profile.two">
    <title>Product-specific Profiling (Multiple Attributes)</title>
    <screen>&lt;simplelist&gt;
  &lt;member&gt;Common Feature 1&lt;/member&gt;
  &lt;member&gt;Common Feature 2&lt;/member&gt;
  &lt;member&gt;Common Feature 3&lt;/member&gt;
  &lt;member condition="basic"&gt;Basic Feature 1&lt;/member&gt;
  &lt;member condition="prof"&gt;Professional Feature 1&lt;/member&gt;
  &lt;member condition="prof"&gt;Professional Feature 2&lt;/member&gt;
  &lt;member condition="prof" vendor="oemcompany"&gt;OEM Feature 1&lt;/member&gt;
&lt;/simplelist&gt;</screen>
   </example>
   <para>When generated for the professional edition or for the professional 
    edition in the OEM version, respectively, the example source code would 
    result in the following output:</para>
   <table id="tab.daps.profile.output.two" rowsep="1">
    <title>Output of <xref linkend="ex.daps.profile.two" xrefstyle="select:
     label"/>
    </title>
    <tgroup cols="2">
     <colspec colnum="1" colname="1" colwidth="50*"/>
     <colspec colnum="2" colname="2" colwidth="50*"/>
     <thead>
      <row>
       <entry colname="1">
        <para>Professional Edition </para>
       </entry>
       <entry colname="2">
        <para> Professional Edition (OEM Version)</para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry colname="1">
        <para>Common Feature 1</para>
        <para>Common Feature 2</para>
        <para>Common Feature 3</para>
        <para>Professional Feature 1</para>
        <para>Professional Feature 2</para>
       </entry>
       <entry colname="2">
        <para>Common Feature 1</para>
        <para>Common Feature 2</para>
        <para>Common Feature 3</para>
        <para>Professional Feature 1</para>
        <para>Professional Feature 2</para>
        <para>OEM Feature 1</para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <remark>toms 2012-09-25: Maybe describe the use of two or more profiling
      values in _one_ attribute? Could be useful.
    </remark>
  </sect2>
  <sect2 id="sec.daps.user.modular.profile.daps">
   <title>Using Profiling with &dapsacr;</title>
   <para>To create multiple documentation variants of the same pool of DocBook 
    files with &dapsacr;, the following requirements need to be fulfilled:</para>
   <orderedlist>
    <listitem><!--XML Files: Profiling Attributes-->
     <para>
      <xref linkend="sec.daps.user.modular.profile.daps.pa" xrefstyle="select:title"/>
     </para>
    </listitem>
    <listitem><!--Main File: Processing Instruction-->
     <para>
      <xref linkend="sec.daps.user.modular.profile.daps.pi" xrefstyle="select: title"/>
     </para>
    </listitem>
    <listitem><!--&dc; File: Profiling Parameters-->
     <para>
      <xref linkend="sec.daps.user.modular.profile.daps.pp" xrefstyle="select: title"/>
     </para>
    </listitem>
   </orderedlist>
   <para>For a comprehensive example showing all requirements in detail,
 refer to <xref linkend="sec.daps.user.modular.profile.daps.ex"/>.</para>

   <sect3 id="sec.daps.user.modular.profile.daps.pa">
    <title>XML Files: Profiling Attributes</title>
    <para>In your DocBook XM files, only use profiling attributes that are supported 
    by &dapsacr;&mdash;refer to <xref linkend="tab.daps.profiling"/>. In &dapsacr;,
    each profiling attribute has a corresponding profiling parameter to be used 
    in the &dc; file. The profiling parameters define which profiling attributes 
    and values to interpret during generation of output.</para>

    <table id="tab.daps.profiling" rowsep="1">
     <title>Profiling Attributes (DocBook) and Profiling Parameters (&dapsacr;)</title>
     <tgroup cols="3">
      <colspec colnum="1" colname="1" colwidth="20*"/>
      <colspec colnum="2" colname="2" colwidth="50*"/>
      <colspec colnum="3" colname="3" colwidth="30*"/>
      <thead>
       <row>
        <entry colname="1">
         <para>
          Attribute Name
         </para>
        </entry>
        <entry colname="2">
         <para>
          Use
         </para>
        </entry>
        <entry colname="3">
         <para>
          Profiling Parameter
         </para>
        </entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry colname="1">
         <para>
          <sgmltag class="attribute">arch</sgmltag>
         </para>
        </entry>
        <entry colname="2">
         <para>Computer or chip architecture, such as <literal>i386</literal>.</para>
        </entry>
        <entry colname="3">
         <parameter>PROFARCH</parameter>
        </entry>
       </row>
       <row>
        <entry colname="1">
         <para>
          <sgmltag class="attribute">condition</sgmltag>
         </para>
        </entry>
        <entry colname="2">
         <para>No preassigned semantics, general purpose attribute.</para>
        </entry>
        <entry colname="3">
         <parameter>PROFCONDITION</parameter>
        </entry>
       </row>
       <row>
        <entry colname="1">
         <para>
          <sgmltag class="attribute">os</sgmltag>
         </para>
        </entry>
        <entry colname="2">
         <para>Operating system.</para>
        </entry>
        <entry colname="3">
         <parameter>PROFOS</parameter>
        </entry>
       </row>
       <row>
        <entry colname="1">
         <para>
          <sgmltag class="attribute">vendor</sgmltag>
         </para>
        </entry>
        <entry colname="2">
         <para>Product vendor.</para>
        </entry>
        <entry colname="3">
         <parameter>PROFVENDOR</parameter>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </sect3>
   <sect3 id="sec.daps.user.modular.profile.daps.pi">
    <title>Main File: Processing Instruction</title>
    <para> 
      To activate generation of profiled output in &dapsacr;, the following 
      processing instruction (PI) must be included in the header of the Main file:
      </para>
    <screen>href="urn:x-daps:xslt:profiling:docbook45-profile.xsl" type="text/xml"</screen>
    <para>The Main file of a documentation project is the one that is referenced 
      by the <parameter>MAIN</parameter> parameter in the &dc; file. If the processing 
      instruction is missing in the Main file, any profiling parameters in the &dc; 
      file will be ignored during generation of the output. </para>
    <tip>
     <title>Include PI in All XML Files</title>
     <para>For any documentation projects that need profiling, we advise to
        include the PI in all XML files. Otherwise you might forget to move the
        PI in case of restructuring the XML sources. Having the PI in all XML
        files does not hurt: Generation of profiled output is only triggered if
        your &dc; files contain profiling parameters. </para>
    </tip>
   </sect3>
   <sect3 id="sec.daps.user.modular.profile.daps.pp">
    <title>&dc; Files: Profiling Parameters</title>
    <para>Depending on the profiling attributes used in your XML files, a &dc;
       file may contain multiple profiling parameters, see 
       <xref linkend="tab.daps.profiling"/>. Profiling parameters define which 
       of the profiling attributes should be interpreted by &dapsacr;
       when generating output. For each profiling parameter, set the respective 
       attribute values for which you want to filter during the profiling process. 
       The spelling of the values must be the same that is used in the XML
       files.</para>
   </sect3>

   <sect3 id="sec.daps.user.modular.profile.daps.ex">
    <title>Profiling Example</title>
    <para>In the following, find a  comprehensive example that shows the basic 
    &dapsacr; profiling requirements in more detail. It is based on the examples in
    <xref linkend="sec.daps.user.modular.profile.basics"/> about the fictional
    software <literal>Frog Sound Recordings</literal> which is available
    in a basic edition, a professional edition and a professional OEM edition, 
    shipped by an OEM vendor. The following example shows <emphasis>all</emphasis> 
    files that you need to consider (XML files, Main file, and &dc; file). </para>
    <example id="ex.daps.xml.pa">
     <title>XML File With Profiling Attributes</title>
     <screen>
      
      
      
      <?dbsuse-fo font-size="0.70em"?>&lt;?xml version="1.0" encoding="utf-8"?&gt;
[...] 
 
&lt;chapter id="frog.features"&gt;
 [...]
 &lt;simplelist&gt;
   &lt;member&gt;Common Feature 1&lt;/member&gt; <co id="co.daps.xml.no.prof.attr"/>
   &lt;member&gt;Common Feature 2&lt;/member&gt; <xref linkend="co.daps.xml.no.prof.attr" xrefstyle="select:label nopage"/>
   &lt;member&gt;Common Feature 3&lt;/member&gt; <xref linkend="co.daps.xml.no.prof.attr" xrefstyle="select:label nopage"/>
   &lt;member condition="basic"&gt;Basic Feature 1&lt;/member&gt; <co id="co.daps.xml.profcond.value1"/>
   &lt;member condition="prof"&gt;Professional Feature 1&lt;/member&gt; <co id="co.daps.xml.profcond.value2"/>
   &lt;member condition="prof"&gt;Professional Feature 2&lt;/member&gt; <xref linkend="co.daps.xml.profcond.value2" xrefstyle="select:label nopage"/>
   &lt;member condition="prof" vendor="oemcompany"&gt;OEM Feature 1&lt;/member&gt; <co id="co.daps.xml.profcond.profvendor"/>
 &lt;/simplelist&gt; 
 [...]
&lt;/chapter&gt;</screen>
     <calloutlist>
      <callout arearefs="co.daps.xml.no.prof.attr">
       <para>Unprofiled listitems. The common features 1-3 are available in all
       software editions or versions.</para>
      </callout>
      <callout arearefs="co.daps.xml.profcond.value1">
       <para>Listitem profiled with attribute 
       <sgmltag class="attribute">condition</sgmltag> and attribute value 
       <literal>basic</literal>. <literal>Basic&nbsp;Feature&nbsp;1</literal>
       is only available in the basic software edition for home users.</para>
      </callout>
      <callout arearefs="co.daps.xml.profcond.value2">
       <para>Listitem profiled with attribute 
       <sgmltag class="attribute">condition</sgmltag> and attribute value 
       <literal>prof</literal>. 
       <literal>Professional&nbsp;Feature&nbsp;1</literal>
       and <literal>Professional&nbsp;Feature&nbsp;2</literal> are only available
       in the professional software edition for enterprise customers.</para>
      </callout>
      <callout arearefs="co.daps.xml.profcond.profvendor">
       <para>Listitem profiled with two attributes: Attribute 
         <sgmltag class="attribute">condition</sgmltag> with attribute value 
           <literal>prof</literal> and attribute 
           <sgmltag class="attribute">vendor</sgmltag> with attribute value 
           <literal>oemcompany</literal>. <literal>OEM&nbsp;Feature&nbsp;1</literal> 
           is only available in the professional OEM software edition for 
           enterprise customers.</para>
      </callout>
     </calloutlist>
    </example>
    <example id="ex.daps.main.pi">
     <title>Main File With PI for Profiling </title>
     <screen>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;?xml-stylesheet 
 href="urn:x-daps:xslt:profiling:docbook45-profile.xsl" <co id="co.daps.main.pi.profiling"/> 
 type="text/xml" <xref linkend="co.daps.main.pi.profiling" xrefstyle="select:label nopage"/>
 title="Profiling step"?&gt; <xref linkend="co.daps.main.pi.profiling" xrefstyle="select:label nopage"/>
&lt;!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" 
                         "http://www.docbook.org/xml/4.5/docbookx.dtd"
[&lt;!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]&gt;  

&lt;!--the following article is contained in the file art_frog.xml--&gt;

&lt;article lang="en" id="art.frog"&gt; 
 &lt;title&gt;Frog Sound Recordings&lt;/title&gt;
 &lt;subtitle&gt;Product Description&lt;/subtitle&gt;
 [...]
&lt;/article&gt;</screen>
     <calloutlist>
      <callout arearefs="co.daps.main.pi.profiling">
       <para>Processing instruction (PI) in the header of the Main file. If it 
       is missing, any profiling parameters in the &dc; file will be ignored.
       </para>
       <para>
        <remark>taroth 2012-10-19: todo - also explain the other lines of 
       the screen?</remark>
       </para>
      </callout>
     </calloutlist>
    </example>

    <example id="ex.daps.dc.pa.home">
     <title>&dc; File with Profiling for Home Edition</title>
     <screen>## Doc Config File for Frog Sound Recordings
## (Home Edition)

## Mandatory Parameters
MAIN="art_frog.xml" <co id="co.dc.pa.main1"/>

## Profiling
PROFCONDITION="basic" <co id="co.dc.pa.profcond.basic"/>
[...]</screen>
     <calloutlist>
      <callout arearefs="co.dc.pa.main1">
       <para>
        <parameter>MAIN</parameter> parameter referencing the Main file. 
       See <xref linkend="ex.daps.main.pi"/>.</para>
      </callout>
      <callout arearefs="co.dc.pa.profcond.basic">
       <para>&dapsacr; profiling parameter for the 
       <sgmltag class="attribute">condition</sgmltag> profiling attribute. It 
       defines that XML elements tagged with 
       <sgmltag class="attribute">condition="basic"</sgmltag> are included in 
       the output.</para>
      </callout>
     </calloutlist>
    </example>

    <example id="ex.daps.dc.pa.prof">
     <title>&dc; File with Profiling for Professional Edition</title>
     <screen>## Doc Config File for Frog Sound Recordings
## (Professional Edition)

## Mandatory Parameters
MAIN="art_frog.xml" <co id="co.dc.pa.main2"/>

## Profiling
PROFCONDITION="prof" <co id="co.dc.pa.profcond.prof1"/>
[...]</screen>
     <calloutlist>

      <callout arearefs="co.dc.pa.main2">
       <para>
        <parameter>MAIN</parameter> parameter referencing the Main file. 
       See <xref linkend="ex.daps.main.pi"/>.</para>
      </callout>
      <callout arearefs="co.dc.pa.profcond.prof1">
       <para>&dapsacr; profiling parameter for the 
       <sgmltag class="attribute">condition</sgmltag> profiling attribute. It 
       defines that XML elements tagged with 
       <sgmltag class="attribute">condition="prof"</sgmltag> are included in 
       the output.</para>
      </callout>
     </calloutlist>
    </example>

    <example id="ex.daps.dc.pa.prof.oem">
     <title>&dc; File with Profiling for Professional Edition (OEM Version)</title>
     <screen>## Doc Config File for Frog Sound Recordings 
## (Professional Edition, OEM Version)

## Mandatory Parameters
MAIN="art_frog.xml" <co id="co.dc.pa.main3"/>

## Profiling
PROFCONDITION="prof" <co id="co.dc.pa.profcond.prof2"/>
PROFVENDOR="oemcompany" <co id="co.dc.pa.profvendor.oem"/>
[...]</screen>
     <calloutlist>
      <callout arearefs="co.dc.pa.main3">
       <para>
        <parameter>MAIN</parameter> parameter referencing the Main file. 
       See <xref linkend="ex.daps.main.pi"/>.</para>
      </callout>
      <callout arearefs="co.dc.pa.profcond.prof2">
       <para>&dapsacr; profiling parameter for the 
       <sgmltag class="attribute">condition</sgmltag> profiling attribute. It 
       defines that XML elements tagged with 
       <sgmltag class="attribute">condition="prof"</sgmltag> are included in 
       the output.</para>
      </callout>
      <callout arearefs="co.dc.pa.profvendor.oem">
       <para>&dapsacr; profiling parameter for the 
       <sgmltag class="attribute">vendor</sgmltag> profiling attribute. It 
       defines that XML elements tagged with 
       <sgmltag class="attribute">vendor="oemcompany"</sgmltag> are included in 
       the output.</para>
      </callout>
     </calloutlist>
    </example>
   </sect3>
  </sect2>
 </sect1>
 <sect1 id="sec.daps.user.modular.productentities">
  <title>Combining Entities and Profiling</title>
  <para>For maximum flexibility in generating documentation variants from the same
  source, &dapsacr; also supports the combination of entities and profiling. For
  modularization, it is useful to declare entities in a separate file, for example, 
  <filename>entity-decl.ent</filename>, and to re-use it in multiple documentation 
  projects. For multiple use of entities like <literal>&amp;productname;</literal>
  or <literal>&amp;productnumber;</literal>, declare them in a separate file and
  add profiling within the entities as shown in <xref linkend="ex.daps.ent.decl.profiling"/>. 
  During generation of output, &dapsacr; then automatically replaces the entities 
  with different values during output, depending on the context.</para>

  <example id="ex.daps.ent.decl.profiling">
   <title>Separate Entity File with Profiling Attributes</title>
   <screen>
    <?dbsuse-fo font-size="0.65em"?>&lt;!--the following declarations are contained in the file entity-decl.ent --&gt;

&lt;!ENTITY productname  
 '&lt;phrase cond="basic"&gt;Frog Sound Recordings (Basic)&lt;/phrase&gt;
  &lt;phrase cond="prof"&gt;Frog Sound Recordings (Professional)&lt;/phrase&gt;
  &lt;phrase cond="prof" vendor="oemcompany"&gt;Gecko Sound Recording (Professional)&lt;/phrase&gt;'&gt;

&lt;!ENTITY productnumber  
 '&lt;phrase cond="basic"&gt;1.0&lt;/phrase&gt;
  &lt;phrase cond="prof"&gt;4.2&lt;/phrase&gt;
  &lt;phrase cond="prof" vendor="oemcompany"&gt;4.21&lt;/phrase&gt;'&gt;</screen>
  </example>
  <para>For example, you can use both entities of 
  <xref linkend="ex.daps.ent.decl.profiling" xrefstyle="select:label"/> 
  in a product description like the following:</para>
  
  <example id="ex.daps.art.prof.ent">
   <title>XML File with Entities <literal>&amp;productname;</literal> and
   <literal>&amp;productnumber;</literal>
   </title>
   <screen>
    <?dbsuse-fo font-size="0.65em"?>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;?xml-stylesheet 
 href="urn:x-daps:xslt:profiling:docbook45-profile.xsl" <co id="co.daps.main.pi.profiling2"/>
 type="text/xml" <xref linkend="co.daps.main.pi.profiling2" xrefstyle="select:label nopage"/>
 title="Profiling step"?&gt; <xref linkend="co.daps.main.pi.profiling2" xrefstyle="select:label nopage"/>
&lt;!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" 
                         "http://www.docbook.org/xml/4.5/docbookx.dtd"
[&lt;!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]&gt;  

&lt;!--the following article is contained in the file art_frog.xml--&gt;
&lt;article lang="en" id="art.frog"&gt; 
 &lt;title&gt;Frog Sound Recordings&lt;/title&gt;
 &lt;subtitle&gt;Product Description&lt;/subtitle&gt;
  &lt;abstract&gt;
   &lt;para&gt; <co id="co.daps.main.product.entities"/>
    &amp;productname; &amp;productnumber; is a software for recording, editing, 
    and mixing audio data.
   &lt;/para&gt; 
  &lt;/abstract&gt;
 [...]
&lt;/article&gt;</screen>
   <calloutlist>
    <callout arearefs="co.daps.main.pi.profiling2">
     <para>Processing instruction (PI) in the header of the Main file. If it 
       is missing, any profiling parameters in the &dc; file will be ignored.
       </para>
    </callout>
    <callout arearefs="co.daps.main.product.entities">
     <para>Paragraph containing the entities <literal>&amp;productname;</literal> 
     and <literal>&amp;productnumber;</literal>. In any output format, the entities 
     will automatically be replaced with different values, depending on the profiling 
     parameters contained in the &dc; file that you use for generating the output. 
     For an example, refer to <xref linkend="tab.daps.profile.output.four" 
     xrefstyle="select:label"/>. </para>
    </callout>
   </calloutlist>
  </example>
  <para><xref linkend="tab.daps.profile.output.four" 
     xrefstyle="select:label"/> shows output variants that can be generated 
     from the XML source code shown in <xref linkend="ex.daps.art.prof.ent" 
     xrefstyle="select:label"/> plus the entity declaration in 
     <xref linkend="ex.daps.ent.decl.profiling" 
     xrefstyle="select:label"/> by using different &dc; files.</para>
  <table id="tab.daps.profile.output.four" rowsep="1">
   <title>Output Variants of <xref linkend="ex.daps.art.prof.ent" 
   xrefstyle="select:label"/>
   </title>
   <tgroup cols="2">
    <colspec colnum="1" colname="1" colwidth="50*"/>
    <colspec colnum="2" colname="2" colwidth="50*"/>
    <thead>
     <row>
      <entry colname="1">
       <para>&dc; File</para>
      </entry>
      <entry colname="2">
       <para>Output</para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
        <xref linkend="ex.daps.dc.pa.home" xrefstyle="select:title"/>
       </para>
      </entry>
      <entry>
       <para>Frog Sound Recordings (Basic)&nbsp;1.0 is a software for recording,
       editing, and mixing audio data.</para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <xref linkend="ex.daps.dc.pa.prof" xrefstyle="select:title"/>
       </para>
      </entry>
      <entry>
       <para>Frog Sound Recordings (Professional)&nbsp;4.2 is a software for 
       recording, editing, and mixing audio data.</para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        <xref linkend="ex.daps.dc.pa.prof.oem" xrefstyle="select:title"/>
       </para>
      </entry>
      <entry>
       <para>Gecko Sound Recordings (Professional)&nbsp;4.21 is a software for 
       recording, editing, and mixing audio data.</para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  <para>
   <remark>taroth 2012-12-06: open issue - check with fs and toms why/if we 
  need productname/productnumber in setinfo/bookinfo/articleinfo - toms' answer:
  https://sourceforge.net/p/daps/tickets/48/</remark>
  </para>
 </sect1>

</chapter>
