<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet
 href="urn:x-daps:xslt:profiling:docbook45-profile.xsl" 
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd"
[<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter id="cha.daps.user.modular">
 <title>Modularizing Documentation Projects</title>
 <para>
  This chapter describes:
  <itemizedlist>
   <!--<listitem>
    <para>how to use XIncludes,</para>
   </listitem>--><listitem><para>how to create document variants by using profiling, and</para>
   </listitem>
   <listitem>
    <para>how to combine profiling and entities.</para>
   </listitem>
  </itemizedlist>
 </para>
 <!--<remark condition="clarity">
  2012-06-15 - fs:
  
  I would restructure this chapter a bit.
  
  First, this productname/productnumber stuff is not a DAPS feature, nor a
  different approach to profiling, it just combines the two DocBook features
  Profiling and Entities and thus adds even more flexibility to Profiling.
  Therefore I would add a section to the end of this chapter, something like
  "Combining Entities and Profiling" and then generally explain ho to use
  Profiling in entity definitions (most commonly via "phrase"). Afterwards
  present a short example using productname by showing the respective snippet
  from the entity declaration file and e.g. a single sentence para using the
  entity.  
  
  Second, I would suggest to restructure the chapter:
  
  1. General introduction to profiling with a simple example
  e.g. a simplelist with features for a basic and a professional edition
  of a software product (no callouts this time). Make sure people understand
  Profiling is a DocBook, not a DAPS feature
  
  simplelist>
  member>Common Feature 1 /member>
  member>Common Feature 2 /member>
  member>Common Feature 3 /member>
  member condition="basic">BasicFeature 1 /member>
  member condition="professional>ProFeature 1 /member>
  member condition="professional>ProFeature 2 /member>
  /simplelist>
  
  Plus the result in a two column table
  
  Add an important annotation explaining the need to really activate
  profiling when used in a document and show how the list would look like
  when profiling would not be activated at build time
  
  BTW: A note on Profiling attribute names
  They are just names that make it easier to recognize the purpose of the
  profiling attribute. It does not matter whether you use "os=foo", or
  "condition=foo" - the outcome is the same. You need several different
  attributes if you would like to combine them.
  Combining attributes is something that I would mention here as well:
  
  Assuming the professional edition product from the example above is also
  available as an OEM version for "OEMCompany" with additional features
  only available in the OEM edition:
  
  ...
  member condition="professional" vendor="oemcompany">
  OEMFeature 1
  /member>
  
  Note: I would rather _not_ use the attributes os and arch in the
  examples. Although names do not matter as explained above, these
  attribute names stand for something that is really special for Operating
  System vendors. The attribute concept is IMHO easier to understand when
  using condition and vendor.  
  
  
  2. Using profiling with DAPS
  
  Explain the prerequisites needed to use profiling with DAPS:
  * PI in the header of the MAIN (or, recommended to add a maximum
  flexibility, in the header of each XML file)
  * Activating profiling in  the DC file
  * supported attributes
  
  I would shorten the existing sections a bit, if possible, and move all
  the callout stuff and context to Section 3.
  
  3. Putting it both together
  
  The big example with the callouts. Since toms does not like your example
  ;-) you can probably reuse the example from 1. by putting
  it into a real document.
  
  4. Entities and Profiling as explained above
  
 </remark>-->
 <sect1 id="sec.daps.user.modular.profile">
  <title>Profiling&mdash;Support for Document Variants</title>
   
  &db-profiling-intro;
  &db-profiling; 

 <sect2 id="sec.daps.user.modular.profile.basics">
   <title>Introduction to DocBook Profiling</title>
   <para>DocBook offers profiling attributes for various purposes as illustrated
    in <ulink url="http://www.sagehill.net/docbookxsl/Profiling.html">
    <citetitle>Table 26.1. Profiling attributes</citetitle>
    </ulink>. Currently, not
    all of them are supported by &dapsacr;. For details, refer to 
    <xref linkend="sec.daps.user.modular.profile.daps"/>.</para>
   <para>Generally, profiling attributes can be used on a large number of 
   elements&mdash;from high-level elements like <sgmltag>book</sgmltag> 
   or <sgmltag>chapter</sgmltag> down to low-level elements like 
   <sgmltag>para</sgmltag>. With the <sgmltag>phrase</sgmltag> element, you can 
   even profile inline elements, like one sentence within a paragraph.<!--, see
   <xref linkend="ex.daps.profiling.inline"/>.-->
   </para>
   <para>Based on the conditions that you want to apply, select one or more 
   profiling attributes and add them to the text snippets that are conditional.
   The tagged snippets will only be included in the output if the required 
   condition is fulfilled. Any content that is valid for <emphasis>all</emphasis> 
   conditions does <emphasis>not</emphasis> need any profiling attributes. The 
   respective content will always be included in the output formats generated 
   from the XML sources. You are free in defining the attribute values 
   (<literal>condition="foo"</literal>), but they must be used consistently 
   in all files belonging to a documentation project.</para>
   <para>
    <xref linkend="ex.daps.profile.one"/> shows how to profile 
   product-specific information in a software description. Let us assume we have 
   to write documentation for the fictional software 
   <literal>Frog Sound Recordings</literal>. The software is available in 
   two editions: a basic edition for home users and a professional edition for 
   enterprise customers. Both editions share common features, but some features 
   are only available in the basic or the professional edition, respectively.</para>

   <example id="ex.daps.profile.one">
    <title>Product-specific Profiling (One Attribute)</title>
    <screen>&lt;simplelist&gt;
  &lt;member&gt;Common Feature 1&lt;/member&gt;
  &lt;member&gt;Common Feature 2&lt;/member&gt;
  &lt;member&gt;Common Feature 3&lt;/member&gt;
  &lt;member condition="basic"&gt;Basic Feature 1&lt;/member&gt;
  &lt;member condition="professional"&gt;Professional Feature 1&lt;/member&gt;
  &lt;member condition="professional"&gt;Professional Feature 2&lt;/member&gt;
&lt;/simplelist&gt;</screen>
   </example>
   <para>When generated for the basic edition or for the professional edition, 
   respectively, the example source code would result in the following 
   output:</para>
   <table id="tab.daps.profile.output.one" rowsep="1">
    <title>Output of <xref linkend="ex.daps.profile.one" xrefstyle="select:
     label"/>
    </title>
    <tgroup cols="2">
     <colspec colnum="1" colname="1" colwidth="50*"/>
     <colspec colnum="2" colname="2" colwidth="50*"/>
     <thead>
      <row>
       <entry colname="1">
        <para> Basic Edition </para>
       </entry>
       <entry colname="2">
        <para> Professional Edition </para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry colname="1">
        <para>Common Feature 1</para>
        <para>Common Feature 2</para>
        <para>Common Feature 3</para>
        <para>Basic Feature 1</para>
       </entry>
       <entry colname="2">
        <para>Common Feature 1</para>
        <para>Common Feature 2</para>
        <para>Common Feature 3</para>
        <para>Professional Feature 1</para>
        <para>Professional Feature 2</para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>If the profiling attributes are <emphasis>not</emphasis> processed during
   output, the source code in <xref linkend="ex.daps.profile.one"/> would
   result in the following (identical) output for both editions:</para>
   <table id="tab.daps.profile.output.one.without" rowsep="1">
    <title>Output of <xref linkend="ex.daps.profile.one" xrefstyle="select:
     label"/> (Without Profiling)</title>
    <tgroup cols="2">
     <colspec colnum="1" colname="1" colwidth="50*"/>
     <colspec colnum="2" colname="2" colwidth="50*"/>
     <thead>
      <row>
       <entry colname="1">
        <para> Basic Edition </para>
       </entry>
       <entry colname="2">
        <para> Professional Edition </para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry colname="1">
        <para>Common Feature 1</para>
        <para>Common Feature 2</para>
        <para>Common Feature 3</para>
        <para>Basic Feature 1</para>
        <para>Professional Feature 1</para>
        <para>Professional Feature 2</para>
       </entry>
       <entry colname="2">
        <para>Common Feature 1</para>
        <para>Common Feature 2</para>
        <para>Common Feature 3</para>
        <para>Basic Feature 1</para>
        <para>Professional Feature 1</para>
        <para>Professional Feature 2</para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>Let's suppose the professional edition of the software is also available 
    as OEM (original equipment manufacturer) version by the vendor 
    <literal>OEM Company</literal>. It contains additional features that are 
    only available in the OEM version:</para>
   <example id="ex.daps.profile.two">
    <title>Product-specific Profiling (Multiple Attributes)</title>
    <screen>&lt;simplelist&gt;
  &lt;member&gt;Common Feature 1&lt;/member&gt;
  &lt;member&gt;Common Feature 2&lt;/member&gt;
  &lt;member&gt;Common Feature 3&lt;/member&gt;
  &lt;member condition="basic"&gt;Basic Feature 1&lt;/member&gt;
  &lt;member condition="professional"&gt;Professional Feature 1&lt;/member&gt;
  &lt;member condition="professional"&gt;Professional Feature 2&lt;/member&gt;
  &lt;member condition="professional" vendor="oemcompany"&gt;OEM Feature 1&lt;/member&gt;
&lt;/simplelist&gt;</screen>
   </example>
   <para>When generated for the professional edition or for the professional 
    edition in the OEM version, respectively, the example source code would 
    result in the following output:</para>
   <table id="tab.daps.profile.output.two" rowsep="1">
    <title>Output of <xref linkend="ex.daps.profile.two" xrefstyle="select:
     label"/>
    </title>
    <tgroup cols="2">
     <colspec colnum="1" colname="1" colwidth="50*"/>
     <colspec colnum="2" colname="2" colwidth="50*"/>
     <thead>
      <row>
       <entry colname="1">
        <para>Professional Edition </para>
       </entry>
       <entry colname="2">
        <para> Professional Edition (OEM Version)</para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry colname="1">
        <para>Common Feature 1</para>
        <para>Common Feature 2</para>
        <para>Common Feature 3</para>
        <para>Professional Feature 1</para>
        <para>Professional Feature 2</para>
       </entry>
       <entry colname="2">
        <para>Common Feature 1</para>
        <para>Common Feature 2</para>
        <para>Common Feature 3</para>
        <para>Professional Feature 1</para>
        <para>Professional Feature 2</para>
        <para>OEM Feature 1</para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <remark>toms 2012-09-25: Maybe describe the use of two or more profiling
      values in _one_ attribute? Could be useful.
    </remark>
  </sect2>
  <sect2 id="sec.daps.user.modular.profile.daps">
   <title>Using Profiling with &dapsacr;</title>
   <para>To create multiple documentation variants of the same pool of DocBook 
    files with &dapsacr;, the following requirements need to be fulfilled:</para>
   <orderedlist>
    <listitem><!--XML Files: Profiling Attributes-->
     <para>
      <xref linkend="sec.daps.user.modular.profile.daps.pa" xrefstyle="select:title"/>
     </para>
    </listitem>
    <listitem><!--Main File: Processing Instruction-->
     <para>
      <xref linkend="sec.daps.user.modular.profile.daps.pi" xrefstyle="select: title"/>
     </para>
    </listitem>
    <listitem><!--&dc; File: Profiling Parameters-->
     <para>
      <xref linkend="sec.daps.user.modular.profile.daps.pp" xrefstyle="select: title"/>
     </para>
    </listitem>
   </orderedlist>
   <para>For a comprehensive example showing all requirements in detail,
 refer to <xref linkend="sec.daps.user.modular.profile.daps.ex"/>.</para>

   <sect3 id="sec.daps.user.modular.profile.daps.pa">
    <title>XML Files: Profiling Attributes</title>
    <para>In your DocBook XM files, only use profiling attributes that are supported 
    by &dapsacr;&mdash;refer to <xref linkend="tab.daps.profiling"/>. In &dapsacr;,
    each profiling attribute has a corresponding profiling parameter to be used 
    in the &dc; file. The profiling parameters define which profiling attributes 
    and values to interpret during generation of output.</para>

    <table id="tab.daps.profiling" rowsep="1">
     <title>Profiling Attributes (DocBook) and Profiling Parameters (&dapsacr;)</title>
     <tgroup cols="3">
      <colspec colnum="1" colname="1" colwidth="20*"/>
      <colspec colnum="2" colname="2" colwidth="50*"/>
      <colspec colnum="3" colname="3" colwidth="30*"/>
      <thead>
       <row>
        <entry colname="1">
         <para>
          Attribute Name
         </para>
        </entry>
        <entry colname="2">
         <para>
          Use
         </para>
        </entry>
        <entry colname="3">
         <para>
          Profiling Parameter
         </para>
        </entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry colname="1">
         <para>
          <sgmltag class="attribute">arch</sgmltag>
         </para>
        </entry>
        <entry colname="2">
         <para>Computer or chip architecture, such as <literal>i386</literal>.</para>
        </entry>
        <entry colname="3">
         <parameter>PROFARCH</parameter>
        </entry>
       </row>
       <row>
        <entry colname="1">
         <para>
          <sgmltag class="attribute">condition</sgmltag>
         </para>
        </entry>
        <entry colname="2">
         <para>No preassigned semantics, general purpose attribute.</para>
        </entry>
        <entry colname="3">
         <parameter>PROFCONDITION</parameter>
        </entry>
       </row>
       <row>
        <entry colname="1">
         <para>
          <sgmltag class="attribute">os</sgmltag>
         </para>
        </entry>
        <entry colname="2">
         <para>Operating system.</para>
        </entry>
        <entry colname="3">
         <parameter>PROFOS</parameter>
        </entry>
       </row>
       <row>
        <entry colname="1">
         <para>
          <sgmltag class="attribute">vendor</sgmltag>
         </para>
        </entry>
        <entry colname="2">
         <para>Product vendor.</para>
        </entry>
        <entry colname="3">
         <parameter>PROFVENDOR</parameter>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </sect3>
   <sect3 id="sec.daps.user.modular.profile.daps.pi">
    <title>Main File: Processing Instruction</title>
    <para> 
      To activate generation of profiled output in &dapsacr;, the following 
      processing instruction (PI) must be included in the header of the Main file:
      </para>
    <screen>href="urn:x-daps:xslt:profiling:docbook45-profile.xsl" type="text/xml"</screen>
    <para>The Main file of a documentation project is the one that is referenced 
      by the <parameter>MAIN</parameter> parameter in the &dc; file. If the processing 
      instruction is missing in the Main file, any profiling parameters in the &dc; 
      file will be ignored during generation of the output. </para>
    <tip>
     <title>Include PI in All XML Files</title>
     <para>For any documentation projects that need profiling, we advise to
        include the PI in all XML files. Otherwise you might forget to move the
        PI in case of restructuring the XML sources. Having the PI in all XML
        files does not hurt: Generation of profiled output is only triggered if
        your &dc; files contain profiling parameters. </para>
    </tip>
   </sect3>
   <sect3 id="sec.daps.user.modular.profile.daps.pp">
    <title>&dc; Files: Profiling Parameters</title>
    <para>Depending on the profiling attributes used in your XML files, a &dc;
       file may contain multiple profiling parameters, see 
       <xref linkend="tab.daps.profiling"/>. Profiling parameters define which 
       of the profiling attributes should be interpreted by &dapsacr;
       when generating output. For each profiling parameter, set the respective 
       attribute values for which you want to filter during the profiling process. 
       The spelling of the values must be the same that is used in the XML
       files.</para>
   </sect3>

   <sect3 id="sec.daps.user.modular.profile.daps.ex">
    <title>Profiling Example</title>
    <para>In the following, find a  comprehensive example that shows the basic 
    &dapsacr; profiling requirements in more detail. It is based on the examples in
    <xref linkend="sec.daps.user.modular.profile.basics"/> about the fictional
    software <literal>Frog Sound Recordings</literal> which is available
    in a basic edition, a professional edition and a professional OEM edition, 
    shipped by an OEM vendor. The following example shows <emphasis>all</emphasis> 
    files that you need to consider (XML files, Main file, and &dc; file). </para>
    <example id="ex.daps.xml.pa">
     <title>XML File With Profiling Attributes</title>
     <screen>
      
      <?dbsuse-fo font-size="0.70em"?>&lt;?xml version="1.0" encoding="utf-8"?&gt;
[...] 
 
&lt;chapter id="frog.features"&gt;
 [...]
 &lt;simplelist&gt;
   &lt;member&gt;Common Feature 1&lt;/member&gt; <co id="co.daps.xml.no.prof.attr"/>
   &lt;member&gt;Common Feature 2&lt;/member&gt; <xref linkend="co.daps.xml.no.prof.attr" xrefstyle="select:label nopage"/>
   &lt;member&gt;Common Feature 3&lt;/member&gt; <xref linkend="co.daps.xml.no.prof.attr" xrefstyle="select:label nopage"/>
   &lt;member condition="basic"&gt;Basic Feature 1&lt;/member&gt; <co id="co.daps.xml.profcond.value1"/>
   &lt;member condition="professional"&gt;Professional Feature 1&lt;/member&gt; <co id="co.daps.xml.profcond.value2"/>
   &lt;member condition="professional"&gt;Professional Feature 2&lt;/member&gt; <xref linkend="co.daps.xml.profcond.value2" xrefstyle="select:label nopage"/>
   &lt;member condition="professional" vendor="oemcompany"&gt;OEM Feature 1&lt;/member&gt; <co id="co.daps.xml.profcond.profvendor"/>
 &lt;/simplelist&gt; 
 [...]
&lt;/chapter&gt;</screen>
     <calloutlist>
      <callout arearefs="co.daps.xml.no.prof.attr">
       <para>Unprofiled listitems. The common features 1-3 are available in all
       software editions or versions.</para>
      </callout>
      <callout arearefs="co.daps.xml.profcond.value1">
       <para>Listitem profiled with attribute 
       <sgmltag class="attribute">condition</sgmltag> and attribute value 
       <literal>basic</literal>. <literal>Basic&nbsp;Feature&nbsp;1</literal>
       is only available in the basic software edition for home users.</para>
      </callout>
      <callout arearefs="co.daps.xml.profcond.value2">
       <para>Listitem profiled with attribute 
       <sgmltag class="attribute">condition</sgmltag> and attribute value 
       <literal>professional</literal>. 
       <literal>Professional&nbsp;Feature&nbsp;1</literal>
       and <literal>Professional&nbsp;Feature&nbsp;2</literal> are only available
       in the professional software edition for enterprise customers.</para>
      </callout>
      <callout arearefs="co.daps.xml.profcond.profvendor">
       <para>Listitem profiled with two attributes: Attribute 
         <sgmltag class="attribute">condition</sgmltag> with attribute value 
           <literal>professional</literal> and attribute 
           <sgmltag class="attribute">vendor</sgmltag> with attribute value 
           <literal>oemcompany</literal>. <literal>OEM&nbsp;Feature&nbsp;1</literal> 
           is only available in the professional OEM software edition for 
           enterprise customers.</para>
      </callout>
     </calloutlist>
    </example>
    <example id="ex.daps.main.pi">
     <title>Main File With PI for Profiling </title>
     <screen>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;?xml-stylesheet 
 href="urn:x-daps:xslt:profiling:docbook45-profile.xsl" <co id="co.daps.main.pi.profiling"/> 
 type="text/xml" <xref linkend="co.daps.main.pi.profiling" xrefstyle="select:label nopage"/>
 title="Profiling step"?&gt; <xref linkend="co.daps.main.pi.profiling" xrefstyle="select:label nopage"/>
&lt;!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" 
                         "http://www.docbook.org/xml/4.5/docbookx.dtd"
[&lt;!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]&gt;  

&lt;!--the following article is contained in the file art_frog.xml--&gt;

&lt;article lang="en" id="art.frog"&gt; 
 &lt;title&gt;Frog Sound Recordings&lt;/title&gt;
 &lt;subtitle&gt;Product Description&lt;/subtitle&gt;
 [...]
&lt;/article&gt;</screen>
     <calloutlist>
      <callout arearefs="co.daps.main.pi.profiling">
       <para>Processing instruction (PI) in the header of the Main file. If it 
       is missing, any profiling parameters in the &dc; file will be ignored.
       </para>
       <para>
        <remark>taroth 2012-10-19: todo - also explain the other lines of 
       the screen?</remark>
       </para>
      </callout>
     </calloutlist>
    </example>

    <example id="ex.daps.dc.pa.home">
     <title>&dc; File with Profiling for Home Edition</title>
     <screen>## Doc Config File for Frog Sound Recordings
## (Home Edition)

## Mandatory Parameters
MAIN="art_frog.xml" <co id="co.dc.pa.main1"/>

## Profiling
PROFCONDITION="basic" <co id="co.dc.pa.profcond.basic"/>
[...]</screen>
     <calloutlist>
      <callout arearefs="co.dc.pa.main1">
       <para><parameter>MAIN</parameter> parameter referencing the Main file. 
       See <xref linkend="ex.daps.main.pi"/>.</para>
      </callout>
      <callout arearefs="co.dc.pa.profcond.basic">
       <para>&dapsacr; profiling parameter for the 
       <sgmltag class="attribute">condition</sgmltag> profiling attribute. It 
       defines that XML elements tagged with 
       <sgmltag class="attribute">condition="basic"</sgmltag> are included in 
       the output.</para>
      </callout>
     </calloutlist>
    </example>

    <example id="ex.daps.cd.pa.prof">
     <title>&dc; File with Profiling for Professional Edition</title>
     <screen>## Doc Config File for Frog Sound Recordings
## (Professional Edition)

## Mandatory Parameters
MAIN="art_frog.xml" <co id="co.dc.pa.main2"/>

## Profiling
PROFCONDITION="professional" <co id="co.dc.pa.profcond.prof1"/>
[...]</screen>
 <calloutlist>
      
      <callout arearefs="co.dc.pa.main2">
       <para><parameter>MAIN</parameter> parameter referencing the Main file. 
       See <xref linkend="ex.daps.main.pi"/>.</para>
      </callout>
      <callout arearefs="co.dc.pa.profcond.prof1">
       <para>&dapsacr; profiling parameter for the 
       <sgmltag class="attribute">condition</sgmltag> profiling attribute. It 
       defines that XML elements tagged with 
       <sgmltag class="attribute">condition="professional"</sgmltag> are included in 
       the output.</para>
      </callout>
     </calloutlist>
    </example>

    <example id="ex.daps.cd.pa.prof.oem">
     <title>&dc; File with Profiling for Professional Edition (OEM Version)</title>
     <screen>## Doc Config File for Frog Sound Recordings 
## (Professional Edition, OEM Version)

## Mandatory Parameters
MAIN="art_frog.xml" <co id="co.dc.pa.main3"/>

## Profiling
PROFCONDITION="professional" <co id="co.dc.pa.profcond.prof2"/>
PROFVENDOR="oemcompany" <co id="co.dc.pa.profvendor.oem"/>
[...]</screen>
 <calloutlist>
      <callout arearefs="co.dc.pa.main3">
       <para><parameter>MAIN</parameter> parameter referencing the Main file. 
       See <xref linkend="ex.daps.main.pi"/>.</para>
      </callout>
      <callout arearefs="co.dc.pa.profcond.prof2">
       <para>&dapsacr; profiling parameter for the 
       <sgmltag class="attribute">condition</sgmltag> profiling attribute. It 
       defines that XML elements tagged with 
       <sgmltag class="attribute">condition="professional"</sgmltag> are included in 
       the output.</para>
      </callout>
      <callout arearefs="co.dc.pa.profvendor.oem">
       <para>&dapsacr; profiling parameter for the 
       <sgmltag class="attribute">vendor</sgmltag> profiling attribute. It 
       defines that XML elements tagged with 
       <sgmltag class="attribute">vendor="oemcompany"</sgmltag> are included in 
       the output.</para>
      </callout>
     </calloutlist>
    </example>
   </sect3>
  </sect2>
 </sect1>
 <sect1 id="sec.daps.user.modular.productentities">
  <title>Combining Entities and Profiling</title>
  <para></para>
  
    <example id="ex.daps.main.decl">
     <title>External Entity File with Profiling Attributes</title>
     <screen>
      <remark>taroth 2012-06-22: FIXME</remark>
     </screen>
    </example>

 </sect1>
 
 <!--<sect2 id="sec.daps.user.modular.profiling.attributes">
  <title>Using Profiling Attributes in XML Files</title>
  
  <remark>toms 2012-06-15: The following example is a bit unfortunate
  as the os attribute in xi:include is by definition not allowed.
  Actually it is a "hack". ;)
  Better show a chapter that contains some paras with and without os.
  This is more compatible.
  </remark>
  
  <example id="ex.daps.profiling">
  <title>Profiling Articles Within a Book</title>
  <screen>&lt;?xml version="1.0" encoding="utf-8"?&gt;
  [...]    
  &lt;book lang="en" id="book.quickstarts"&gt;
  &lt;bookinfo&gt;
  &lt;title&gt;Quick Start Manuals&lt;/title&gt;
  &lt;productname&gt;&amp;productname;&lt;/productname&gt;
  &lt;productnumber&gt;&amp;productnumber;&lt;/productnumber&gt;
  &lt;date&gt;&lt;?dbtimestamp format="B d, Y"?&gt;&lt;/date&gt;
  &lt;xi:include href="common_copyright_gfdl.xml" <co id="co.daps.prof.all"/> 
  xmlns:xi="http://www.w3.org/2001/XInclude"/&gt; 
  &lt;/bookinfo&gt;
  &lt;xi:include os="sled;osuse" href="art_kde_quick.xml" <co id="co.daps.prof.sled.osuse"/>
  xmlns:xi="http://www.w3.org/2001/XInclude"/&gt; 
  &lt;xi:include os="sled;osuse" href="art_gnome_quick.xml" <xref linkend="co.daps.prof.sled.osuse" xrefstyle="select:label nopage"/>
  xmlns:xi="http://www.w3.org/2001/XInclude" /&gt; 
  &lt;xi:include os="sled" href="art_sled_install_quick.xml" <co id="co.daps.prof.sled"/>
  xmlns:xi="http://www.w3.org/2001/XInclude"  /&gt; 
  &lt;xi:include os="sles" href="art_sles_install_quick.xml" <co id="co.daps.prof.sles"/>
  xmlns:xi="http://www.w3.org/2001/XInclude" /&gt; 
  &lt;xi:include os="sled;sles;osuse" href="art_apparmor_quick.xml" <co id="co.daps.prof.sled.sles.osuse"/> 
  xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;  
  &lt;xi:include os="sled;sles" href="art_audit_quick.xml" <co id="co.daps.prof.sled.sles"/>  
  xmlns:xi="http://www.w3.org/2001/XInclude" /&gt; 
  &lt;xi:include os="sled" href="art_libreoffice_quick.xml" <xref linkend="co.daps.prof.sled" xrefstyle="select:label nopage"/> 
  xmlns:xi="http://www.w3.org/2001/XInclude" /&gt; 
  &lt;xi:include os="sles" href="art_lxc_quick.xml" <xref linkend="co.daps.prof.sles" xrefstyle="select:label nopage"/>
  xmlns:xi="http://www.w3.org/2001/XInclude" /&gt; 
  &lt;/book&gt;</screen>
  </example>
  <para>The example above shows a book named 
  <citetitle>Quick Start Manuals</citetitle> that contains a number of articles, 
  for example <citetitle>KDE Quick Start</citetitle> and
  <citetitle>LXC Quick Start</citetitle>. The <literal>os</literal> attribute 
  is used for profiling contents according to products. The attribute values 
  refer to the following products:</para>
  <itemizedlist>
  <listitem>
  <para>
  <literal>os="sled"</literal>: &sled;</para>
  </listitem>
  <listitem>
  <para>
  <literal>os="sles"</literal>: &sles;</para>
  </listitem>
  <listitem>
  <para>
  <literal>os="osuse"</literal>: &osuse;</para>
  </listitem>
  </itemizedlist>
  <calloutlist>
  <callout arearefs="co.daps.prof.all">
  <para>This XInclude does not contain any profiling attributes, meaning the 
  contents of this file will always be included in the output.</para>
  </callout>
  <callout arearefs="co.daps.prof.sled.osuse">
  <para>This XInclude is profiled for both &sled; and &osuse;: If the book
  <citetitle>GNOME Quick Start</citetitle> is generated for &sled; or &osuse;, 
  the articles <citetitle>KDE Quick Start</citetitle> and 
  <citetitle>GNOME Quick Start</citetitle> will be included in the book. 
  If the same book is generated for &sles;, this articles will be excluded.
  </para>
  </callout>
  <callout arearefs="co.daps.prof.sled">
  <para>This XInclude is profiled for &sled;. This means if the book 
  <citetitle>Quick Start Manuals</citetitle> is generated for &sled;, the 
  articles <citetitle>SLED Installation Quick Start</citetitle> and 
  <citetitle>LibreOffice Quick Start</citetitle> will be included.
  For &osuse; and &sles;, this articles will be excluded from the book.</para>
  </callout>
  <callout arearefs="co.daps.prof.sles">
  <para>This XInclude is profiled for &sles;. This means if the book 
  <citetitle>Quick Start Manuals</citetitle> is generated for &sles;, the 
  articles <citetitle>SLES Installation Quick Start</citetitle> and 
  <citetitle>LXC Quick Start</citetitle> will be included. For
  &osuse; and &sled;, this articles will be excluded from the book.</para>
  </callout>
  <callout arearefs="co.daps.prof.sled.sles.osuse">
  <para>This XInclude is profiled for all three products: &sles;, &sled;, and
  &osuse;, meaning the article <citetitle>AppArmor Quick Start</citetitle> will
  be included in the book <citetitle>Quick Start Manuals</citetitle> 
  for all of these products. </para>
  </callout>
  <callout arearefs="co.daps.prof.sled.sles">
  <para>This XInclude is profiled for both &sled; and &sles;. This means if 
  the book <citetitle>Quick Start Manuals</citetitle> is generated for &sles;
  or &sled;, the article <citetitle>Audit Quick Start</citetitle> will be 
  included. For &osuse;, this article will be excluded from the book.</para>
  </callout>
  </calloutlist>
  <para>The following example demonstrates how to profile inline
  elements, like one sentence or a cross-reference in a paragraph:</para>
  <example id="ex.daps.profiling.inline">
  <title>Profiling Inline Elements</title>
  <screen>&lt;para&gt;If you choose this option, your credentials are stored in
  KWalletManager. <co id="co.daps.prof.inline.start"/>&lt;phrase os="sled"&gt;For more information on 
  KWalletManager, see &lt;xref linkend="cha.kde.kwallet"/&gt;.&lt;/phrase&gt;<co id="co.daps.prof.inline.end"/> 
  &lt;/para&gt;
  </screen>
  </example>
  <calloutlist>
  <callout arearefs="co.daps.prof.inline.start">
  <para>Start tag of a <sgmltag>phrase</sgmltag> element with 
  a profiling attribute:  <literal>os=sled"</literal>. The 
  <sgmltag>phrase</sgmltag> element is used 
  to profile contents within a <sgmltag>para</sgmltag> element
  &mdash;in this  case a sentence containing a cross-reference.</para>
  </callout>
  <callout arearefs="co.daps.prof.inline.end">
  <para>End tag of the profiled <sgmltag>phrase</sgmltag> element.</para>
  </callout>
  </calloutlist>
  
  <remark>toms 2012-06-15: Maybe better add a list and show what's
  going on with and without the os profiling attribute? Something
  like itemizedlist/listitem/para with screen.</remark>
  
  <para>If the XML file containing this text snippet is profiled for &sled;
  (<literal>os="sled"</literal>), both sentences will be included in the output:
  <literal>If you choose this options, your credentials are stored in 
  KWalletManager. For more information on KWalletManager, see Chapter 8, 
  Managing Passwords with KWallet Manager (KDE User Guide).</literal>
  In all other cases, the content of the profiled <sgmltag>phrase</sgmltag>
  element is omitted and the output will be as follows:
  <literal>If you choose this options, your credentials are stored in 
  KWalletManager.</literal>
  </para>
  <para>For more details about using profiling attributes, refer to 
  <ulink url="http://www.sagehill.net/docbookxsl/Profiling.html"/>.</para>
  </sect2>
  <sect2 id="sec.daps.user.modular.profiling.pi">
  <title>Adding a Processing Instruction to the Main File</title>
  <para>For the profiling process to take effect, &dapsacr; needs a certain
  processing instruction (PI):</para>
  
  <para>For all documentation projects that need profiling, add 
  this line to the header (prolog) of the Main<remark>toms
  2012-06-15: Main: upper case or lower case?</remark> file that is 
  referenced by the <parameter>MAIN</parameter> parameter 
  in the &dc; file.</para>
  
  <remark>toms 2012-06-15: I would describe the components of the
  PI (?xml-stylesheet, href, type). A single callout is a bit useless
  IMHO. :) Futhermore, I would only include the header without any
  root element, which restricts the focus on the very important
  line(s).</remark>
  
  <example id="ex.daps.main.profiling">
  <title>Main File with Processing Instruction for Profiling </title>
  <screen>&lt;?xml version="1.0" encoding="utf-8"?&gt;
  &lt;?xml-stylesheet
  href="urn:x-daps:xslt:profiling:docbook45-profile.xsl" type="text/xml" <co id="co.daps.profile.main"/> 
  title="Profiling step" ?&gt;
  &lt;!DOCTYPE set PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd"
  [&lt;!ENTITY % entities SYSTEM "entity-decl.ent"&gt;
  %entities;
  ]&gt;
  
  &lt;set lang="en"&gt;
  &lt;title&gt;&dapsacr; Documentation&lt;/title&gt;
  &lt;xi:include href="book_daps_user.xml" 
  xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;
  &lt;xi:include href="book_daps_quickstarts.xml" 
  xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;
  &lt;!&#45;&#45;&lt;xi:include href="book_daps_developer.xml" 
  xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;&#45;&#45;&gt;             
  &lt;/set&gt;</screen>
  </example>
  <calloutlist>
  <callout arearefs="co.daps.profile.main">
  <para>Processing instruction line for  profiling. </para>
  </callout>
  </calloutlist>
  <note>
  <title>Only Required in the Main File</title>
  <para>You may also add the processing instruction line to all files of your
  documentation project, it does not hurt. But &dapsacr; only checks the Main 
  file referenced in the &dc; file for this processing instruction. If it is 
  missing there, any profiling parameters in the &dc; file will be ignored 
  during generation of the output.</para>
  </note>
  </sect2>
  
  <sect2 id="sec.daps.user.modular.profiling.params">
  <title>Adding Profiling Parameters to the &dc; File</title>
  <para>If using profiling attributes in your XML sources, you need to define 
  which of them should be interpreted by &dapsacr; during generation of output.
  For this purpose, add profiling parameters (<parameter>PROF*</parameter>) to the 
  &dc; files of the documentation projects that need profiling. Depending on the
  profiling attributes used in your XML files, a &dc; file may contain multiple 
  profiling parameters. For a list of DocBook profiling attributes supported by
  &dapsacr; and the corresponding &dapsacr; parameters, refer to 
  <xref linkend="sec.daps.user.modular.profiling.supported"/>.</para>
  <para>For each profiling parameter, set the respective attribute values for 
  which you want to filter during the profiling process. The spelling 
  of the values must be the same that is used in the XML files. You can also assign 
  multiple attribute values to a profiling parameter&mdash;for example, if you 
  want to cover multiple processor architectures in the same document. 
  A &dc; file containing the following line <literal>PROFARCH=s390;systemz</literal>
  would create an output that contains all contents profiled for either 
  <literal>s390</literal> or <literal>systemz</literal> architectures or both.
  <remark>toms 2012-06-15: maybe add: "..., but not x86_64.</remark>
  </para>
  <para>Create an individual &dc; file for each document variant that you want 
  to generate from a pool of common XML files. 
  <xref linkend="ex.daps.profiling.dc.osuse" xrefstyle="select:label"/> and 
  <xref linkend="ex.daps.profiling.dc.sles" xrefstyle="select:label"/> show 
  two Main files that can be used to generate 
  product-specific documentation from the XML file in 
  <xref linkend="ex.daps.profiling"/>.
  </para>
  <example id="ex.daps.profiling.dc.osuse">
  <title>Profiling Parameters in Product-specific &dc; File (&osuse;)</title>
  <screen>## Doc Config File for openSUSE Quick Start Guide
  
  ## Mandatory Parameters
  MAIN="MAIN.opensuse.xml"
  
  ## Optional Parameters
  ROOTID="book.quickstarts"
  
  ## Profiling
  PROFOS="osuse" <co id="daps.param.profos.osuse"/>
  PROFARCH="x86;i586" <co id="daps.param.profarch.osuse"/>
  
  [...]</screen>
  </example>
  <calloutlist>
  <callout arearefs="daps.param.profos.osuse">
  <para>Profiling parameter. Filters the XML files of the documentation 
  project for elements with a <literal>os="osuse"</literal> profiling
  attribute and includes their content in the generated output. 
  </para>
  </callout>
  <callout arearefs="daps.param.profarch.osuse">
  <para>Profiling parameter. Filters the XML files of the documentation 
  project for elements with a <literal>arch="x86"</literal> or 
  <literal>arch="i586"</literal> profiling attribute or <sgmltag>arch</sgmltag>
  attributes that includes both attribute values. Includes their content in 
  the generated output. 
  </para>
  </callout>
  </calloutlist>
  <para>You can use this &dc; file to generate an &osuse;-specific version
  of the <citetitle>Quick Start Manuals</citetitle> displayed in
  <xref linkend="ex.daps.profiling"/>. It will contain all Quick
  Starts that are profiled with <literal>os="osuse"</literal>. 
  </para>
  <example id="ex.daps.profiling.dc.sles">
  <title>Profiling Parameters in Product-specific &dc; File (&sles;)</title>
  <screen>## Doc Config File for SLES Quick Start Guide
  
  ## Mandatory Parameters
  MAIN="MAIN.SLES.xml"
  
  ## Optional Parameters
  ROOTID="book.quickstarts"
  
  ## Profiling
  PROFOS="sles" <co id="daps.param.profos.sles"/>
  PROFARCH="s390;systemz" <co id="daps.param.profarch.sles"/>
  
  [...]</screen>
  <calloutlist>
  <callout arearefs="daps.param.profos.sles">
  <para>Profiling parameter. Filters the XML files of the documentation 
  project for elements with a <literal>os="sles"</literal> profiling
  attribute and includes their content in the generated output. 
  </para>
  </callout>
  <callout arearefs="daps.param.profarch.sles">
  <para>Profiling parameter. Filters the XML files of the documentation 
  project for elements with a <literal>arch="s390"</literal> or 
  <literal>arch="systemz"</literal> profiling attribute or <sgmltag>arch</sgmltag>
  attributes that includes both attribute values. Includes their content in 
  the generated output. 
  </para>
  </callout>
  </calloutlist>
  </example>
  <para>You can use this &dc; file to generate a &sles;-specific version
  of the <citetitle>Quick Start Manuals</citetitle> displayed in
  <xref linkend="ex.daps.profiling"/>. It will contain all Quick
  Starts that are profiled with <literal>os="sles"</literal>.</para>
  </sect2>-->

</chapter>
