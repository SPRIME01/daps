<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet
 href="urn:x-daps:xslt:profiling:docbook45-profile.xsl" 
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd"
[<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter id="cha.daps.user.edit">
 <title>Editing DocBook-XML</title>
 <abstract>
  &daps-editor;
 </abstract>
<!--taroth 2012-03-08: building an appliance with a pre-configured jedit would
     be a great idea-->
<!--taroth 2012-03-08: another idea: add an appendix chapter with configuration
     tips/instructions for individual editors?-->
 <sect1 id="sec.daps.user.edit.basics">
  <title>Basic Structural Elements</title>
&db-structure-elements;
 </sect1>
 <sect1 id="sec.daps.user.edit.macros">
  <title>Editor Macros for Inserting Complex Elements</title>
  <remark>taroth 2012-06-15: todo - move to appendix as discussed with Frank today</remark>
  <para>
   XML elements can be nested to a high extend. Some constructs like
   <sgmltag>variablelist</sgmltag>, <sgmltag>table</sgmltag> or
   <sgmltag>image</sgmltag> can have a lot of child elements&mdash;some of them
   required, some optional.
   If you
   have an editor with schema support, it will tell you which elements are
   allowed at the current cursor position, but nevertheless it is cumbersome
   if you need to insert the child elements of complex XML constructs
   consecutively.
  </para>

  <para>
   Most editors allow you to define or record macros which you can use for
   automatically inserting empty <quote>skeletons</quote> for a complex XML
   construct as illustrated by <xref linkend="ex.daps.user.vle"/>.
  </para>

  <example id="ex.daps.user.vle">
   <title>A <sgmltag>varlistentry</sgmltag> Element</title>
   <screen>&lt;varlistentry&gt;
  &lt;term&gt;&lt;/term&gt;
  &lt;listitem&gt;
    &lt;para&gt;&lt;/para&gt;
  &lt;/listitem&gt;
&lt;/varlistentry&gt;</screen>
  </example>

  <para>
   For Emacs, &dapsacr; already includes macros for adding elements such as
   <sgmltag>listitem</sgmltag>, <sgmltag>figure</sgmltag>,
   <sgmltag>indexterm</sgmltag> etc. The macros are defined in
   <filename>docbook_macros.el</filename> and are added to your system during
   the installation of &dapsacr;. They require that you use one of
   Emacs' main XML editing modes, either <literal>nxml</literal> or
   <literal>psgml</literal>.
  </para>

  <procedure>
   <title>Configuring Emacs to Use the DocBook Macros</title>
   <step>
    <para>
     To load the DocBook macros, open your Emacs customization file
     (<filename>~/.emacs</filename> or <filename>~/.gnu-emacs</filename>).
    </para>
   </step>
   <step>
    <para>
     Insert the following line:
    </para>
    <screen>(load "/usr/share/emacs/site-lisp/docbook_macros.el" t t)</screen>
   </step>
   <step>
    <para>
     Save the Emacs customization file and restart Emacs.
    </para>
   </step>
  </procedure>

  <para>
   For an overview, which macros are available and how to use them, refer to
   <ulink url="http://en.opensuse.org/openSUSE:Documentation_Emacs_Docbook_Macros"></ulink>.
  </para>
 </sect1>

 <sect1 id="sec.daps.user.edit.spell">
  <title>Spell Checking</title>

  <para>&dapsacr; comes with a spell checker that is optimized for DocBook
  documents: Tags and attributes are excluded from the check so that you can
  focus on the content of the document. The spell checker is based on &aspell;
  and can be run from the command line. By default, it starts in interactive
  mode, but you can also run it in <quote>batch</quote> mode where it dumps 
  a sorted list of misspelled words to standard output. &dapsacr; also allows 
  you to specify a custom dictionary and the language to use for spelling.
  </para>
  <para>
   In the following, find some examples on how to spell check with
   &dapsacr;. All options discussed below can be combined with each other,
   except for <option>--file</option> and <option>--rootid</option> which
   exclude each other.
  </para>
  <note>
   <title>
    <command>spellcheck</command> Options and XIncludes</title>
   <para>All options discussed below can be combined with each other,
   except for <option>--file</option> and <option>--rootid</option> which
   exclude each other.</para>
   <para>The <command>spellcheck</command> command always follows 
   <sgmltag>xi:includes</sgmltag>, even when using the <option>--file</option>
   option.
   </para>
  </note>
  <variablelist>
   <varlistentry>
    <term>Spell Checking Files in a Documentation Project</term>
    <listitem>
     <screen>daps -d <replaceable>PATH_TO_&dc;_FILE</replaceable> spellcheck</screen>
     <para>
      Spell checks all files in the documentation project with the default
      dictionary (<literal>en_US</literal>). One by one, the files are opened
      in interactive mode and checked with &aspell;. To abort spell checking
      of the current file, press <keycap>X</keycap>. The spell check continues
      with the next file in the project.
     </para>
     <para>
      Uses the ROOTID defined in the specified &dc; file as starting point. You
      can restrict the spell check to parts of the set, such as a
      <sgmltag>book</sgmltag>, <sgmltag>article</sgmltag>,
      <sgmltag>glossary</sgmltag>, <sgmltag>appendix</sgmltag>,
      <sgmltag>part</sgmltag>, or <sgmltag>chapter</sgmltag> element. To do
      so, specify the ID of the respective element with the
      <option>--rootid</option> option:
     </para>
     <screen>daps -d <replaceable>PATH_TO_&dc;_FILE</replaceable> spellcheck --rootid=<replaceable>ID</replaceable>
     </screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Spell Checking a Single XML File</term>
    <listitem>
     <screen>daps -d <replaceable>PATH_TO_&dc;_FILE</replaceable> spellcheck --file <replaceable>PATH_TO_XML_FILE</replaceable>
     </screen>
     <para>Checks the specified file with the default dictionary. Suggests
     alternative spellings for each misspelled word and waits for user
     interaction.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Spell Checking XML Files in Languages Other than English</term>
    <listitem>
     <screen>daps -d <replaceable>PATH_TO_&dc;_FILE</replaceable> spellcheck --lang=<replaceable>LANG</replaceable> \
[--file <replaceable>PATH_TO_XML_FILE</replaceable>]</screen>
     <para>
      Checks the specified documentation project or file with the dictionary
      for <replaceable>LANG</replaceable> (make sure the specified &aspell;
      dictionary is installed). Suggests alternative spellings for each
      misspelled word and waits for user interaction. The language code used for
      the <option>--lang</option> option is the same that is used for
      the <envar>LANG</envar> environment variable and matches the directory
      names in <filename>/usr/share/locale</filename>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Spell Checking XML Files in Batch Mode</term>
    <listitem>
     <screen>daps -d <replaceable>PATH_TO_&dc;_FILE</replaceable> spellcheck --list \
[--file <replaceable>PATH_TO_XML_FILE</replaceable>]</screen>
     <para>Checks the specified documentation project or file. Returns a list
     of misspelled words to standard output. You can use the
     <option>--list</option> option to easily collect a list of words that are
     unknown to &aspell; and use this output as basis for a custom &aspell;
     word list or dictionary.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Spell Checking XML Files with an Additional Custom Dictionary</term>
    <listitem>
     <screen>daps -d <replaceable>PATH_TO_&dc;_FILE</replaceable> spellcheck --extra-dict=<replaceable>PATH_TO_CUSTOM_DICT</replaceable> \
[--file <replaceable>PATH_TO_XML_FILE</replaceable>]</screen>
     <para>
      Checks the specified the specified documentation project or file with
      the default dictionary plus the additional custom dictionary specified
      with <option>--extra-dict</option>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  


  <para>
   For your convenience, you can also integrate &daps-spell; (plus a custom
   &aspell; dictionary, if needed) into your XML editor, so that spelling is
   checked <quote>on the fly</quote> during editing. Consult your editor's
   documentation on how to integrate a custom dictionary. If you use &jedit;,
   proceed as outlined in <xref linkend="pro.daps.spellcheck.jedit"/>.
  </para>

  <remark>toms 2012-06-15: Restructure the following procedure into
     smaller pieces like steps and substeps? Or in sections? 15 steps
     seems a bit overwhelming. :)</remark>
  <procedure id="pro.daps.spellcheck.jedit">
   <title>Integrating &daps-spell; into &jedit;</title>
   <para>
    <remark>taroth 2012-05-24: check and adjust as the spellchecker will
   evolve in the future</remark>
   </para>
   <step>
    <para>Start &jedit; and select <menuchoice><guimenu>Plugins</guimenu>
      <guimenu>Plugin Manager</guimenu>
     </menuchoice>.
    </para>
   </step>
   <step>
    <para>If the <guimenu>Spell Check</guimenu> plug-in is not already
    installed, install and activate it.
    </para>
   </step>
   <step>
    <para>Close and restart &jedit;.</para>
   </step>
   <step>
    <para>Select <menuchoice>
      <guimenu>Plugins</guimenu>
      <guimenu>Plugin Options</guimenu>
     </menuchoice>.</para>
   </step>
   <step>
    <para>In the left navigation pane, select <menuchoice>
      <guimenu>Spell Check</guimenu>
      <guimenu>General</guimenu>
     </menuchoice>.</para>
   </step>
   <step>
    <para>Set <guimenu>Spell-checking engine</guimenu> to
      <guimenu>Aspell</guimenu> and select the <guimenu>Dictionary to
      use</guimenu>, for example <literal>en_US</literal>. </para>
   </step>
   <step>
    <para>If the desired dictionary does not appear in the drop-down list,
     install the respective &aspell; dictionary for the language and
     click <guimenu>Refresh list</guimenu>. </para>
   </step>
   <step>
    <para>In the left navigation pane, switch to <menuchoice>
      <guimenu>Spell Check</guimenu>
      <guimenu>Syntax handling</guimenu>
     </menuchoice>.</para>
   </step>
   <step>
    <para>In the table, activate the <guimenu>markup</guimenu> entry and click
      <guimenu>Edit</guimenu> next to it.</para>
   </step>
   <step>
    <para>In the <guimenu>Token types picker</guimenu>, activate the following
    entries:</para>
    <itemizedlist>
     <listitem>
      <para>NULL</para>
     </listitem>
     <listitem>
      <para>COMMENT1</para>
     </listitem>
     <listitem>
      <para>LITERAL1</para>
     </listitem>
    </itemizedlist>
   </step>
   <step>
    <para>In the left navigation pane, switch to <menuchoice>
      <guimenu>Spell Check</guimenu>
      <guimenu>Aspell Engine</guimenu>
     </menuchoice>.</para>
   </step>
   <step>
    <para>Set the path to the <guimenu>Aspell executable filename</guimenu>.  
    Select <guimenu>Enable markup mode</guimenu>.</para>
   </step>
   <step>
    <para>To use an additional custom &aspell; dictionary, specify the path to the
     custom dictionary in the input field below <guimenu>Additional
     parameters</guimenu>:</para>
    <screen>--extra-dicts=<replaceable>PATH_TO_CUSTOM_DICT</replaceable>
    </screen>
    <para>For example:</para>
    <screen>--extra-dicts=/home/tux/custom_aspell.rws</screen>
   </step>
   <step>
    <para>Confirm your settings in the plugin options dialog with
      <guimenu>OK</guimenu> or <guimenu>Apply</guimenu>.</para>
   </step>
   <step>
    <para>To execute a spell check during editing, select <menuchoice>
      <guimenu>Plugins</guimenu>
      <guimenu>Spell Check</guimenu>
      <guimenu>Highlight misspelled words</guimenu>
     </menuchoice> (or use the keyboard shortcut assigned to that menu
     item).</para>
   </step>
  </procedure>
 </sect1>
 <sect1 id="sec.daps.user.edit.chklink">
  <title>Checking Links to Web Pages</title>
  <para>
   To make sure that all external links (such as http, https and ftp links) in
   your XML sources are valid (and do not give a <literal>404</literal> error
   or similar), &dapsacr; also includes a link checker (based on
   <literal>checkbot</literal>, see <command>man 1 checkbot</command> for more
   information).  It searches for the <sgmltag class="attribute">url</sgmltag>
   attribute in <sgmltag>ulink</sgmltag> elements and checks links included
   there.  Use it to create a report of all links that caused some kind of
   warning or error:</para>
  <variablelist>
   <varlistentry>
    <term>Checking Links in a Documentation Project</term>
    <listitem>
     <screen>daps -d <replaceable>PATH_TO_&dc;_FILE</replaceable> checklink</screen>
     <para>
      Uses the ROOTID defined in the specified &dc; file as starting point.
      Checks the <sgmltag>ulink</sgmltag> elements in all files belonging to
      the documentation project. The resulting HTML report
      <filename>*checkbot-localhost.html</filename> can be opened in a browser
      (see <xref linkend="fig.daps.user.edit.chklink"/>).
     </para>
     <para>
      If your &dc; file references a documentation <sgmltag>set</sgmltag>, you
      probably do not want to check all files belonging to the set. You can
      restrict the check to parts of the set, such as a
      <sgmltag>book</sgmltag>, <sgmltag>article</sgmltag>,
      <sgmltag>glossary</sgmltag>, <sgmltag>appendix</sgmltag>,
      <sgmltag>part</sgmltag>, or <sgmltag>chapter</sgmltag> element. To do
      so, specify the ID of the respective element with the
      <option>--rootid</option> option:
     </para>
     <screen>daps -d <replaceable>PATH_TO_&dc;_FILE</replaceable> checklink --rootid=<replaceable>ID</replaceable>
     </screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Checking Links in a Single XML File</term>
    <listitem>
     <screen>daps -d <replaceable>PATH_TO_&dc;_FILE</replaceable> checklink --file=<replaceable>PATH_TO_XML_FILE</replaceable>
     </screen>
     <para>
      Checks the <sgmltag>ulink</sgmltag> elements inthe specified file. At
      the end of the check, &dapsacr; returns an HTML file with a list of all
      links which caused some kind of warning or error. Open the resulting
      <filename>checkbot-localhost.html</filename> file in a browser.</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <note>
   <title>
    <command>checklink</command> follows XIncludes</title>
   <para>
    The checklink command always follows <sgmltag>xi:includes</sgmltag>, even
    when using the <option>--file option</option>.
   </para>
  </note>

  <figure id="fig.daps.user.edit.chklink">
   <title>Example Output of <command>daps checklink</command>
   </title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="daps_chklink_report.png" width="90%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="daps_chklink_report.png" width="80%"/>
    </imageobject>
   </mediaobject>
  </figure>

  <tip>
   <title>Opening the Link Check Report</title>
   <para>
    To directly opening the link check report use the &dapsacr; command
    output as an argument for a browser, e.g. the command-line web browser
    w3m:
   </para>
   <screen>w3m -dump $(daps -d <replaceable>PATH_TO_&dc;_FILE</replaceable> checklink)</screen>
  </tip>
 </sect1>
 <sect1 id="sec.daps.user.edit.variants">
  <title>Support for Document Variants</title>
  <para>
   Similar products often share a considerable amount of features and differ
   in details only. It is therefore convenient to apply the same approach to
   the documentation of similar products or product families: Share most of
   the XML source code and only differentiate text snippets according to
   products where necessary.
  </para>
  <para>
   For easily managing and creating documentation variants from the same pool
   of XML sources, you can use of the following features that are supported by
   &dapsacr;:
  </para>

  <remark condition="clarity">
   2012-06-15 - fs:

   I would restructure this chapter a bit.

   First, this productname/productnumber stuff is not a DAPS feature, nor a
   different approach to profiling, it just combines the two DocBook features
   Profiling and Entities and thus adds even more flexibility to Profiling.
   Therefore I would add a section to the end of this chapter, something like
   "Combining Entities and Profiling" and then generally explain ho to use
   Profiling in entity definitions (most commonly via "phrase"). Afterwards
   present a short example using productname by showing the respective snippet
   from the entity declaration file and e.g. a single sentence para using the
   entity.  

   Second, I would suggest to restructure the chapter:

   1. General introduction to profiling with a simple example
      e.g. a simplelist with features for a basic and a professional edition
      of a software product (no callouts this time). Make sure people understand
      Profiling is a DocBook, not a DAPS feature

      simplelist>
       member>Common Feature 1 /member>
       member>Common Feature 2 /member>
       member>Common Feature 3 /member>
       member condition="basic">BasicFeature 1 /member>
       member condition="professional>ProFeature 1 /member>
       member condition="professional>ProFeature 2 /member>
     /simplelist>
     
     Plus the result in a two column table

     Add an important annotation explaining the need to really activate
     profiling when used in a document and show how the list would look like
     when profiling would not be activated at build time

     BTW: A note on Profiling attribute names
     They are just names that make it easier to recognize the purpose of the
     profiling attribute. It does not matter whether you use "os=foo", or
     "condition=foo" - the outcome is the same. You need several different
     attributes if you would like to combine them.
     Combining attributes is something that I would mention here as well:

     Assuming the professional edition product from the example above is also
     available as an OEM version for "OEMCompany" with additional features
     only available in the OEM edition:

     ...
     member condition="professional" vendor="oemcompany">
       OEMFeature 1
     /member>

     Note: I would rather _not_ use the attributes os and arch in the
     examples. Although names do not matter as explained above, these
     attribute names stand for something that is really special for Operating
     System vendors. The attribute concept is IMHO easier to understand when
     using condition and vendor.  

     
   2. Using profiling with DAPS

      Explain the prerequisites needed to use profiling with DAPS:
       * PI in the header of the MAIN (or, recommended to add a maximum
         flexibility, in the header of each XML file)
       * Activating profiling in  the DC file
       * supported attributes

       I would shorten the existing sections a bit, if possible, and move all
       the callout stuff and context to Section 3.
       
   3. Putting it both together

      The big example with the callouts. Since toms does not like your example
      ;-) you can probably reuse the example from 1. by putting
      it into a real document.

   4. Entities and Profiling as explained above

  </remark>
  


  <variablelist>
   <varlistentry><!--Profiling (<quote>Conditional Text</quote>)-->
    <term>
     <xref linkend="sec.daps.user.edit.profiling" xrefstyle="select:title"/>
    </term>
    <listitem>
    &db-profiling;
    </listitem>
   </varlistentry>
   <varlistentry>
    <!--Entities for Dynamic Product Names and Numbers-->
    <term>
     <xref linkend="sec.daps.user.edit.productentities" xrefstyle="select:title"/>
    </term>
    <listitem>
     <para>&daps-product-entities;</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 id="sec.daps.user.edit.profiling">
  <title>Profiling (Conditional Text)</title>
  <para>To use profiling for creating multiple documentation variants of the 
   same pool of XML files, you need to execute the following basic steps:</para>
  <procedure>
   <step>
    <para>
     <xref linkend="sec.daps.user.edit.profiling.attributes" xrefstyle="select:title"/>
    </para>
   </step>
   <step>
    <para>
     <xref linkend="sec.daps.user.edit.profiling.pi" xrefstyle="select:title"/>
    </para>
   </step>
   <step>
    <para>
     <xref linkend="sec.daps.user.edit.profiling.params" xrefstyle="select:title"/>
    </para>
   </step>
  </procedure>
  <sect2 id="sec.daps.user.edit.profiling.supported">
   <title>Supported DocBook Profiling Attributes</title>
   <remark>toms 2012-06-15: Maybe collect the information about
       profiling attributes and env variable in a table?</remark>
     &daps-profiling-attributes; 
   </sect2>

  <sect2 id="sec.daps.user.edit.profiling.attributes">
   <title>Using Profiling Attributes in XML Files</title>
   <para>Profiling attributes can be used on a large number of 
   elements&mdash;from high-level elements like <sgmltag>book</sgmltag> 
   or <sgmltag>chapter</sgmltag> 
   down to low-level elements like <sgmltag>para</sgmltag>. With the 
   <sgmltag>phrase</sgmltag> element, you can even profile inline elements, like
   one sentence within a paragraph, see
   <xref linkend="ex.daps.profiling.inline"/>.</para>
   <para>Based on the conditions that you want to apply, select one or more 
   profiling attributes. You are free in defining the attribute values, but they
   must be used consistently in all files belonging to a documentation project.</para>
   <para>Any content that is valid for <emphasis>all</emphasis> products does
    <emphasis>not</emphasis> need any profiling attributes. The respective 
    content will always be included in the output formats generated from the XML 
    sources. Text snippets that only apply to a certain condition can be tagged 
    with the respective profiling attribute or attributes. The tagged snippets 
    will only be included in the output if the required condition is fulfilled.
    </para>

   <remark>toms 2012-06-15: The following example is a bit unfortunate
     as the os attribute in xi:include is by definition not allowed.
     Actually it is a "hack". ;)
     Better show a chapter that contains some paras with and without os.
     This is more compatible.
     </remark>

   <example id="ex.daps.profiling">
    <title>Profiling Articles Within a Book</title>
    <screen>&lt;?xml version="1.0" encoding="utf-8"?&gt;
[...]    
&lt;book lang="en" id="book.quickstarts"&gt;
 &lt;bookinfo&gt;
  &lt;title&gt;Quick Start Manuals&lt;/title&gt;
  &lt;productname&gt;&amp;productname;&lt;/productname&gt;
  &lt;productnumber&gt;&amp;productnumber;&lt;/productnumber&gt;
  &lt;date&gt;&lt;?dbtimestamp format="B d, Y"?&gt;&lt;/date&gt;
   &lt;xi:include href="common_copyright_gfdl.xml" <co id="co.daps.prof.all"/> 
               xmlns:xi="http://www.w3.org/2001/XInclude"/&gt; 
 &lt;/bookinfo&gt;
 &lt;xi:include os="sled;osuse" href="art_kde_quick.xml" <co id="co.daps.prof.sled.osuse"/>
             xmlns:xi="http://www.w3.org/2001/XInclude"/&gt; 
 &lt;xi:include os="sled;osuse" href="art_gnome_quick.xml" <xref linkend="co.daps.prof.sled.osuse" xrefstyle="select:label nopage"/>
             xmlns:xi="http://www.w3.org/2001/XInclude" /&gt; 
 &lt;xi:include os="sled" href="art_sled_install_quick.xml" <co id="co.daps.prof.sled"/>
             xmlns:xi="http://www.w3.org/2001/XInclude"  /&gt; 
 &lt;xi:include os="sles" href="art_sles_install_quick.xml" <co id="co.daps.prof.sles"/>
             xmlns:xi="http://www.w3.org/2001/XInclude" /&gt; 
 &lt;xi:include os="sled;sles;osuse" href="art_apparmor_quick.xml" <co id="co.daps.prof.sled.sles.osuse"/> 
             xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;  
 &lt;xi:include os="sled;sles" href="art_audit_quick.xml" <co id="co.daps.prof.sled.sles"/>  
             xmlns:xi="http://www.w3.org/2001/XInclude" /&gt; 
 &lt;xi:include os="sled" href="art_libreoffice_quick.xml" <xref linkend="co.daps.prof.sled" xrefstyle="select:label nopage"/> 
             xmlns:xi="http://www.w3.org/2001/XInclude" /&gt; 
 &lt;xi:include os="sles" href="art_lxc_quick.xml" <xref linkend="co.daps.prof.sles" xrefstyle="select:label nopage"/>
             xmlns:xi="http://www.w3.org/2001/XInclude" /&gt; 
&lt;/book&gt;</screen>
   </example>
   <para>The example above shows a book named 
   <citetitle>Quick Start Manuals</citetitle> that contains a number of articles, 
   for example <citetitle>KDE Quick Start</citetitle> and
     <citetitle>LXC Quick Start</citetitle>. The <literal>os</literal> attribute 
     is used for profiling contents according to products. The attribute values 
     refer to the following products:</para>
   <itemizedlist>
    <listitem>
     <para>
      <literal>os="sled"</literal>: &sled;</para>
    </listitem>
    <listitem>
     <para>
      <literal>os="sles"</literal>: &sles;</para>
    </listitem>
    <listitem>
     <para>
      <literal>os="osuse"</literal>: &osuse;</para>
    </listitem>
   </itemizedlist>
   <calloutlist>
    <callout arearefs="co.daps.prof.all">
     <para>This XInclude does not contain any profiling attributes, meaning the 
     contents of this file will always be included in the output.</para>
    </callout>
    <callout arearefs="co.daps.prof.sled.osuse">
     <para>This XInclude is profiled for both &sled; and &osuse;: If the book
      <citetitle>GNOME Quick Start</citetitle> is generated for &sled; or &osuse;, 
      the articles <citetitle>KDE Quick Start</citetitle> and 
      <citetitle>GNOME Quick Start</citetitle> will be included in the book. 
      If the same book is generated for &sles;, this articles will be excluded.
      </para>
    </callout>
    <callout arearefs="co.daps.prof.sled">
     <para>This XInclude is profiled for &sled;. This means if the book 
     <citetitle>Quick Start Manuals</citetitle> is generated for &sled;, the 
     articles <citetitle>SLED Installation Quick Start</citetitle> and 
     <citetitle>LibreOffice Quick Start</citetitle> will be included.
     For &osuse; and &sles;, this articles will be excluded from the book.</para>
    </callout>
    <callout arearefs="co.daps.prof.sles">
     <para>This XInclude is profiled for &sles;. This means if the book 
     <citetitle>Quick Start Manuals</citetitle> is generated for &sles;, the 
     articles <citetitle>SLES Installation Quick Start</citetitle> and 
     <citetitle>LXC Quick Start</citetitle> will be included. For
      &osuse; and &sled;, this articles will be excluded from the book.</para>
    </callout>
    <callout arearefs="co.daps.prof.sled.sles.osuse">
     <para>This XInclude is profiled for all three products: &sles;, &sled;, and
     &osuse;, meaning the article <citetitle>AppArmor Quick Start</citetitle> will
     be included in the book <citetitle>Quick Start Manuals</citetitle> 
     for all of these products. </para>
    </callout>
    <callout arearefs="co.daps.prof.sled.sles">
     <para>This XInclude is profiled for both &sled; and &sles;. This means if 
     the book <citetitle>Quick Start Manuals</citetitle> is generated for &sles;
     or &sled;, the article <citetitle>Audit Quick Start</citetitle> will be 
     included. For &osuse;, this article will be excluded from the book.</para>
    </callout>
   </calloutlist>
   <para>The following example demonstrates how to profile inline
   elements, like one sentence or a cross-reference in a paragraph:</para>
   <example id="ex.daps.profiling.inline">
    <title>Profiling Inline Elements</title>
    <screen>&lt;para&gt;If you choose this option, your credentials are stored in
KWalletManager. <co id="co.daps.prof.inline.start"/>&lt;phrase os="sled"&gt;For more information on 
KWalletManager, see &lt;xref linkend="cha.kde.kwallet"/&gt;.&lt;/phrase&gt;<co id="co.daps.prof.inline.end"/> 
&lt;/para&gt;
      </screen>
   </example>
   <calloutlist>
    <callout arearefs="co.daps.prof.inline.start">
     <para>Start tag of a <sgmltag>phrase</sgmltag> element with 
       a profiling attribute:  <literal>os=sled"</literal>. The 
       <sgmltag>phrase</sgmltag> element is used 
       to profile contents within a <sgmltag>para</sgmltag> element
       &mdash;in this  case a sentence containing a cross-reference.</para>
    </callout>
    <callout arearefs="co.daps.prof.inline.end">
     <para>End tag of the profiled <sgmltag>phrase</sgmltag> element.</para>
    </callout>
   </calloutlist>

   <remark>toms 2012-06-15: Maybe better add a list and show what's
       going on with and without the os profiling attribute? Something
       like itemizedlist/listitem/para with screen.</remark>

   <para>If the XML file containing this text snippet is profiled for &sled;
      (<literal>os="sled"</literal>), both sentences will be included in the output:
     <literal>If you choose this options, your credentials are stored in 
     KWalletManager. For more information on KWalletManager, see Chapter 8, 
     Managing Passwords with KWallet Manager (KDE User Guide).</literal>
     In all other cases, the content of the profiled <sgmltag>phrase</sgmltag>
     element is omitted and the output will be as follows:
     <literal>If you choose this options, your credentials are stored in 
     KWalletManager.</literal>
   </para>
   <para>For more details about using profiling attributes, refer to 
   <ulink url="http://www.sagehill.net/docbookxsl/Profiling.html"/>.</para>
  </sect2>
  <sect2 id="sec.daps.user.edit.profiling.pi">
   <title>Adding a Processing Instruction to the Main File</title>
   <para>For the profiling process to take effect, &dapsacr; needs a certain
     processing instruction (PI):</para>
   <screen>href="urn:x-daps:xslt:profiling:docbook45-profile.xsl" type="text/xml"</screen>
   <para>For all documentation projects that need profiling, add 
     this line to the header (prolog) of the Main<remark>toms
       2012-06-15: Main: upper case or lower case?</remark> file that is 
     referenced by the <parameter>MAIN</parameter> parameter 
     in the &dc; file.</para>

   <remark>toms 2012-06-15: I would describe the components of the
     PI (?xml-stylesheet, href, type). A single callout is a bit useless
     IMHO. :) Futhermore, I would only include the header without any
     root element, which restricts the focus on the very important
     line(s).</remark>

   <example id="ex.daps.main.profiling">
    <title>Main File with Processing Instruction for Profiling </title>
    <screen>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;?xml-stylesheet
href="urn:x-daps:xslt:profiling:docbook45-profile.xsl" type="text/xml" <co id="co.daps.profile.main"/> 
title="Profiling step" ?&gt;
&lt;!DOCTYPE set PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd"
[&lt;!ENTITY % entities SYSTEM "entity-decl.ent"&gt;
%entities;
]&gt;

&lt;set lang="en"&gt;
 &lt;title&gt;&dapsacr; Documentation&lt;/title&gt;
 &lt;xi:include href="book_daps_user.xml" 
             xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;
 &lt;xi:include href="book_daps_quickstarts.xml" 
             xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;
 &lt;!&#45;&#45;&lt;xi:include href="book_daps_developer.xml" 
             xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;&#45;&#45;&gt;             
&lt;/set&gt;</screen>
   </example>
   <calloutlist>
    <callout arearefs="co.daps.profile.main">
     <para>Processing instruction line for  profiling. </para>
    </callout>
   </calloutlist>
   <note>
    <title>Only Required in the Main File</title>
    <para>You may also add the processing instruction line to all files of your
     documentation project, it does not hurt. But &dapsacr; only checks the Main 
     file referenced in the &dc; file for this processing instruction. If it is 
     missing there, any profiling parameters in the &dc; file will be ignored 
     during generation of the output.</para>
   </note>
  </sect2>
  <sect2 id="sec.daps.user.edit.profiling.params">
   <title>Adding Profiling Parameters to the &dc; File</title>
   <para>If using profiling attributes in your XML sources, you need to define 
   which of them should be interpreted by &dapsacr; during generation of output.
   For this purpose, add profiling parameters (<parameter>PROF*</parameter>) to the 
   &dc; files of the documentation projects that need profiling. Depending on the
   profiling attributes used in your XML files, a &dc; file may contain multiple 
   profiling parameters. For a list of DocBook profiling attributes supported by
   &dapsacr; and the corresponding &dapsacr; parameters, refer to 
   <xref linkend="sec.daps.user.edit.profiling.supported"/>.</para>
   <para>For each profiling parameter, set the respective attribute values for 
     which you want to filter during the profiling process. The spelling 
     of the values must be the same that is used in the XML files. You can also assign 
   multiple attribute values to a profiling parameter&mdash;for example, if you 
   want to cover multiple processor architectures in the same document. 
   A &dc; file containing the following line <literal>PROFARCH=s390;systemz</literal>
   would create an output that contains all contents profiled for either 
   <literal>s390</literal> or <literal>systemz</literal> architectures or both.
    <remark>toms 2012-06-15: maybe add: "..., but not x86_64.</remark>
   </para>
   <para>Create an individual &dc; file for each document variant that you want 
   to generate from a pool of common XML files. 
     <xref linkend="ex.daps.profiling.dc.osuse" xrefstyle="select:label"/> and 
     <xref linkend="ex.daps.profiling.dc.sles" xrefstyle="select:label"/> show 
     two Main files that can be used to generate 
   product-specific documentation from the XML file in 
   <xref linkend="ex.daps.profiling"/>.
   </para>
   <example id="ex.daps.profiling.dc.osuse">
    <title>Profiling Parameters in Product-specific &dc; File (&osuse;)</title>
    <screen>## Doc Config File for openSUSE Quick Start Guide

## Mandatory Parameters
MAIN="MAIN.opensuse.xml"

## Optional Parameters
ROOTID="book.quickstarts"

## Profiling
PROFOS="osuse" <co id="daps.param.profos.osuse"/>
PROFARCH="x86;i586" <co id="daps.param.profarch.osuse"/>

[...]</screen>
   </example>
   <calloutlist>
    <callout arearefs="daps.param.profos.osuse">
     <para>Profiling parameter. Filters the XML files of the documentation 
      project for elements with a <literal>os="osuse"</literal> profiling
      attribute and includes their content in the generated output. 
      </para>
    </callout>
    <callout arearefs="daps.param.profarch.osuse">
     <para>Profiling parameter. Filters the XML files of the documentation 
      project for elements with a <literal>arch="x86"</literal> or 
      <literal>arch="i586"</literal> profiling attribute or <sgmltag>arch</sgmltag>
      attributes that includes both attribute values. Includes their content in 
      the generated output. 
      </para>
    </callout>
   </calloutlist>
   <para>You can use this &dc; file to generate an &osuse;-specific version
     of the <citetitle>Quick Start Manuals</citetitle> displayed in
     <xref linkend="ex.daps.profiling"/>. It will contain all Quick
     Starts that are profiled with <literal>os="osuse"</literal>. 
    </para>
   <example id="ex.daps.profiling.dc.sles">
    <title>Profiling Parameters in Product-specific &dc; File (&sles;)</title>
    <screen>## Doc Config File for SLES Quick Start Guide

## Mandatory Parameters
MAIN="MAIN.SLES.xml"

## Optional Parameters
ROOTID="book.quickstarts"

## Profiling
PROFOS="sles" <co id="daps.param.profos.sles"/>
PROFARCH="s390;systemz" <co id="daps.param.profarch.sles"/>

[...]</screen>
    <calloutlist>
     <callout arearefs="daps.param.profos.sles">
      <para>Profiling parameter. Filters the XML files of the documentation 
      project for elements with a <literal>os="sles"</literal> profiling
      attribute and includes their content in the generated output. 
      </para>
     </callout>
     <callout arearefs="daps.param.profarch.sles">
      <para>Profiling parameter. Filters the XML files of the documentation 
      project for elements with a <literal>arch="s390"</literal> or 
      <literal>arch="systemz"</literal> profiling attribute or <sgmltag>arch</sgmltag>
      attributes that includes both attribute values. Includes their content in 
      the generated output. 
      </para>
     </callout>
    </calloutlist>
   </example>
   <para>You can use this &dc; file to generate a &sles;-specific version
     of the <citetitle>Quick Start Manuals</citetitle> displayed in
     <xref linkend="ex.daps.profiling"/>. It will contain all Quick
     Starts that are profiled with <literal>os="sles"</literal>.</para>
  </sect2>
 </sect1>
 <sect1 id="sec.daps.user.edit.productentities">
  <title>Entities for Dynamic Product Names and Numbers</title>
  <para>
   <remark>taroth 2012-05-30: FIXME</remark>
  </para>
 </sect1>

 <sect1 id="sec.daps.user.edit.more">
  <title>For More Information</title>
  <para>
   For a complete DocBook reference see
   <ulink url="http://www.docbook.org/tdg/en/html/docbook.html">
   <citetitle>&tdg;</citetitle>
   </ulink>.
  </para>
  <para>Useful tips and tricks around using DocBook and the DocBook stylesheets
   can be found in <citetitle>The DoCookBook&mdash;Recipies for DocBook 
   Developers and Writers</citetitle>, available at 
   <ulink url="http://doccookbook.sourceforge.net/"></ulink>.</para>
 </sect1>
</chapter>
