<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet
 href="urn:x-suse:xslt:profiling:docbook45-profile.xsl" 
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd"
[<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter id="cha.daps.user.edit">
 <title>Editing DocBook-XML</title>
 <abstract>
  <para>As &dapsacr; does not include any editor software, you are 
  completely free in the choice of your XML editor. Basically, you can use
  any text editor, but it is helpful if the editor supports editing XML 
  in accordance with the DTD you use. A number of open source editors can be 
  extended with plug-ins for automatic tag insertion and completion, insertion
  of <sgmltag>xref</sgmltag> elements and for checks if the XML document is 
  well-formed. If you are already familiar with vi or Emacs, you can configure
  them to support XML editing mode. If your prefer an editor with a graphical 
  user interface, jEdit is a good choice.</para>
 </abstract>
 <!--taroth 2012-03-08: building an appliance with a pre-configured jedit would
     be a great idea-->
 <!--taroth 2012-03-08: another idea: add an appendix chapter with configuration
     tips/instructions for individual editors?-->
 <sect1 id="sec.daps.user.edit.basics">
  <title>Basic Structural Elements</title>
  <para>If you already worked with DocBook, you know about the typical top-level 
  elements (or root elements) for documents: <sgmltag>book</sgmltag> or 
  <sgmltag>article</sgmltag>. For larger documentation projects, another typical
  root element is <sgmltag>set</sgmltag>. A set is a collection of books.</para>
  <para>To define the individual components of a book, other structural elements 
  are used, for example, <sgmltag>part</sgmltag>, <sgmltag>chapter</sgmltag>, or 
  <sgmltag>appendix</sgmltag>. Within a chapter, you will probably also find
  sections, thus <sgmltag>section</sgmltag> (or <sgmltag>sect1</sgmltag>, 
  <sgmltag>sect2</sgmltag> etc.) are further structural elements, as are 
  <sgmltag>para</sgmltag> (for paragraphs) or <sgmltag>orderlist</sgmltag>.</para>
  <para>If you have set up your documentation project from scratch with 
  <command>daps-init</command>, you can explore the example documents that are
  installed within the directory structure. They show the most commonly used 
  DocBook XML constructs. 
  </para>
 </sect1>
 <sect1 id="sec.daps.user.edit.macros">
  <title>Macros for Automatic Insertion of Complex Elements</title>
  <para>XML elements can be nested to a high extend. Some constructs 
 like <sgmltag>variablelist</sgmltag>, <sgmltag>table</sgmltag> 
 or <sgmltag>image</sgmltag> have a lot of required child elements.
 If you have an editor with DTD support, it will tell you which elements are 
 allowed at the current cursor position, but nevertheless it is cumbersome if
 you need to insert the child elements of complex XML constructs consecutively.  
 </para>
  <para>Most editors allow you to define or record macros which you can use 
 for automatically inserting empty <quote>skeletons</quote> for a complex XML
 construct, for example <xref linkend="ex.daps.user.vle" xrefstyle="select:title"/>.</para>
  <example id="ex.daps.user.vle">
   <title>A <sgmltag>varlistentry</sgmltag>
   </title>
   <screen>
   &lt;varlistentry&gt;
    &lt;term&gt;&lt;/term&gt;
    &lt;listitem&gt;
     &lt;para&gt;&lt;/para&gt;
    &lt;/listitem&gt;
   &lt;/varlistentry&gt;
   </screen>
  </example>
  <para>For Emacs, &dapsacr; already includes macros for adding elements such as 
 <sgmltag>listitem</sgmltag>, <sgmltag>figure</sgmltag>, <sgmltag>indexterm</sgmltag> etc. 
 The macros are defined in <filename>docbook_macros.el</filename> and are
 added to your system during the installation of &dapsacr;. They require that 
 you execute Emacs in <literal>psgml</literal>-mode. To load the DocBook macros, 
 open your Emacs customization file (<filename>~/.emacs</filename> or 
 <filename>~/.gnu-emacs</filename> and insert the following line:</para>
  <screen>(load "/usr/share/emacs/site-lisp/docbook_macros.el" t t)</screen>
  <para>For an overview, which macros are available and how to use them, refer to 
 <ulink url="http://en.opensuse.org/openSUSE:Documentation_Emacs_Docbook_Macros">.</ulink>
  </para>
 </sect1>
 <sect1 id="sec.daps.user.edit.imgs">
  <title>Using Images</title>
  <para>Depending on the output format you generate with &dapsacr; (PDF or HTML
  for example), the source images you provide and reference in your XML sources 
  can automatically be transformed into different output formats 
  (from SVG to PNG for example). This section describes the basic things
  you need to know for using images (supported formats, where to store the 
  images in your documentation directory, and how to reference them). For
  the more advanced image handling features (like listing images referenced 
  in your XML files or the one used for output formats, list any 
  missing images or checking for unique image names), refer to 
  <xref linkend="cha.daps.user.adv"/>.</para>
  <sect2 id="sec.daps.user.edit.imgs.types">
   <title>Supported Image Types</title>
   <para>&dapsacr; supports the following types of images:</para>
   <itemizedlist>
    <listitem>
     <para>
      <filename>*.dia</filename>
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>*.eps</filename> (experimental)
    </para>
    </listitem>
    <listitem>
     <para>
      <filename>*.fig</filename>
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>*.pdf</filename> (experimental)
    </para>
    </listitem>
    <listitem>
     <para>
      <filename>*.png</filename>
     </para>
    </listitem>
    <listitem>
     <para>
      <filename>*.svg</filename>
     </para>
    </listitem>
   </itemizedlist>
  </sect2>
  <sect2 id="sec.daps.user.edit.imgs.path">
   <title>Location of the Images</title>
   <para>&dapsacr; requires a certain directory structure for your XML sources and
  images that you want to reference there. For details, refer to 
  <xref linkend="ex.daps.user.dir.doc" xrefstyle="select:title"/>.Depending on 
  the file type of your source image, add them to the respective subdirectories 
  in <filename><replaceable>YOUR_DOC_DIR</replaceable>/images/src</filename>.
  </para>
  </sect2>
  <sect2 id="sec.daps.user.edit.imgs.refer">
   <title>Referencing Images</title>
   <para>Provided your images are located in the required default directory, 
   &dapsacr; automatically finds the path to your images.Therefore referencing 
   images in your XML sources is very straightforward: you do not need
   to include any path in the <sgmltag>fileref</sgmltag> attribute&mdash;the 
   file name is enough, see <xref linkend="ex.xml.img.ref"/>.</para>
   <example id="ex.xml.img.ref">
    <title>Image Reference in an XML File</title>
    <screen>&lt;figure&gt;
    &lt;title&gt;Main Window&lt;/title&gt;
    &lt;mediaobject&gt;
     &lt;imageobject role="fo"&gt;
      &lt;imagedata fileref="screenshot.png" width="75%" format="PNG"/&gt;
     &lt;/imageobject&gt;
     &lt;imageobject role="html"&gt;
      &lt;imagedata fileref="screenshot.png" width="75%" format="PNG"/&gt;
     &lt;/imageobject&gt;
    &lt;/mediaobject&gt;
   &lt;/figure&gt;</screen>
   </example>
  </sect2>
 </sect1>
 <sect1 id="sec.daps.user.edit.validate">
  <title>Validating Your XML Sources</title>
  <para><!--taroth 2012-03-09: well-formed, valid, maybe also move validating to 
  output chapter?--></para>
 </sect1>
 <sect1>
  <title>Spell Checking</title>
  <para><remark>taroth 2012-03-09: FIXME</remark></para>
 </sect1>
</chapter>