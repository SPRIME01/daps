<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet
 href="urn:x-suse:xslt:profiling:docbook45-profile.xsl" 
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd"
[<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter id="cha.daps.user.edit">
 <title>Editing DocBook-XML</title>
 <remark>profiling, checklinks, spellcheck, dynamic product names and numbers</remark>
 <abstract>
  <para>As &dapsacr; does not include any editor software, you are 
  completely free in the choice of your XML editor. Basically, you can use
  any text editor, but it is helpful if the editor supports editing XML 
  in accordance with the DTD you use. A number of open source editors can be 
  extended with plug-ins for automatic tag insertion and completion, insertion
  of <sgmltag>xref</sgmltag> elements and for checks if the XML document is 
  well-formed. If you are already familiar with vi or Emacs, you can configure
  them to support XML editing mode. If your prefer an editor with a graphical 
  user interface, jEdit is a good choice.</para>
 </abstract>
 <!--taroth 2012-03-08: building an appliance with a pre-configured jedit would
     be a great idea-->
 <!--taroth 2012-03-08: another idea: add an appendix chapter with configuration
     tips/instructions for individual editors?-->
 <sect1 id="sec.daps.user.edit.basics">
  <title>Basic Structural Elements</title>
  <para>If you already worked with DocBook, you know about the typical top-level 
  elements (or root elements) for documents: <sgmltag>book</sgmltag> or 
  <sgmltag>article</sgmltag>. For larger documentation projects, another typical
  root element is <sgmltag>set</sgmltag> (a collection of books).</para>
  <para>To define the individual components of a book, other structural elements 
  are used, for example, <sgmltag>part</sgmltag>, <sgmltag>chapter</sgmltag>, or 
  <sgmltag>appendix</sgmltag>. Within a chapter, you will probably also find
  sections, thus <sgmltag>section</sgmltag> (or <sgmltag>sect1</sgmltag>, 
  <sgmltag>sect2</sgmltag> etc.) are further structural elements, as are 
  <sgmltag>para</sgmltag> (for paragraphs) or <sgmltag>orderlist</sgmltag>.</para>
  <para>If you have set up your documentation project from scratch with 
  <command>daps-init</command>, you can explore the example documents that are
  installed within the directory structure. They show the most commonly used 
  DocBook XML constructs. 
  </para>
 </sect1>
 <sect1 id="sec.daps.user.edit.macros">
  <title>Macros for Automatic Insertion of Complex Elements</title>
  <para>XML elements can be nested to a high extend. Some constructs 
 like <sgmltag>variablelist</sgmltag>, <sgmltag>table</sgmltag> 
 or <sgmltag>image</sgmltag> have a lot of required child elements.
 If you have an editor with DTD support, it will tell you which elements are 
 allowed at the current cursor position, but nevertheless it is cumbersome if
 you need to insert the child elements of complex XML constructs consecutively.  
 </para>
  <para>Most editors allow you to define or record macros which you can use 
 for automatically inserting empty <quote>skeletons</quote> for a complex XML
 construct as illustrated by <xref linkend="ex.daps.user.vle"/>.</para>
  <example id="ex.daps.user.vle">
   <title>A <sgmltag>varlistentry</sgmltag></title>
   <screen>&lt;varlistentry&gt;
  &lt;term&gt;&lt;/term&gt;
  &lt;listitem&gt;
    &lt;para&gt;&lt;/para&gt;
  &lt;/listitem&gt;
&lt;/varlistentry&gt;</screen>
  </example>
  <para>For Emacs, &dapsacr; already includes macros for adding elements such as 
 <sgmltag>listitem</sgmltag>, <sgmltag>figure</sgmltag>, <sgmltag>indexterm</sgmltag> etc. 
 The macros are defined in <filename>docbook_macros.el</filename> and are
 added to your system during the installation of &dapsacr;. They require that 
 you execute Emacs in <literal>psgml</literal>-mode. </para>
  <procedure>
   <title>Configuring Emacs to Use the DB Macros</title>
   <step>
    <para>To load the DocBook macros, 
 open your Emacs customization file (<filename>~/.emacs</filename> or 
 <filename>~/.gnu-emacs</filename>).</para>
   </step>
   <step>
    <para>Insert the following line:</para>
    <screen>(load "/usr/share/emacs/site-lisp/docbook_macros.el" t t)</screen>
   </step>
   <step>
    <para>Save the Emacs customization file.
   <remark>taroth 2012-03-13: restart of Emacs needed?</remark>
    </para>
   </step>
  </procedure>
  <para>For an overview, which macros are available and how to use them, refer to 
 <ulink url="http://en.opensuse.org/openSUSE:Documentation_Emacs_Docbook_Macros"></ulink>.
   </para>
 </sect1>
 <sect1 id="sec.daps.user.edit.validate">
  <title>Validating Your XML Sources</title>
  <para>Validating XML files within in a book or set often exceeds validation of
  the current XML file, as links (<sgmltag>xref</sgmltag> elements) or XIncludes 
  need to be resolved, too. If you use conditional text (<literal>profiling</literal>) 
  in your XML sources (for creating variants), your XML editor cannot check 
  validity of your XML files. However, &dapsacr; can handle all those cases due 
  to the built-in xmllint validator. </para>
  <procedure>
   <title>Validating XML Files</title>
   <para>To validate all files that belong to your documentation project, 
   &dapsacr; only needs to know which &dclong; file to use. If you have specified
   a value for <parameter>DOCCONF_DEFAULT</parameter> in &dapsconf-user; or if your
   documentation directory contains only one &dc; file, &dapsacr; automatically
   uses the corresponding &dc; file. Otherwise, specify the path to the &dc; file
   with the <option>-d</option> option as described below.</para>
   <para>By default, <sgmltag>remark</sgmltag> elements and XML comments are 
   ignored during validation. However, if you intend to create a (draft) output 
   including remarks or comments, you need to include them for validation by 
   specifying the respective &dapsacr; option. 
   </para>
   <step>
    <para>To validate all XML files in your book, article or set, enter:</para>
    <screen>daps -d <replaceable>PATH_TO_DC_FILE</replaceable> validate </screen>
    <para>If the XML files are not valid, &dapsacr; will return the parser
    errors. They include information about the type of error, the respective 
    file name and the line number where the error occured. In addition, &dapsacr;
    shows the path to the profiled XML sources and the total number of errors.</para>
    <remark>taroth 2012-03-15: maybe add example output</remark>
    <para>If validation was successful, &dapsacr; returns: 
<literal>All files are valid.</literal>
    </para>
   </step>
   <step>
    <para>To validate your files including remarks, enter:</para>
    <screen>daps -d <replaceable>PATH_TO_DC_FILE</replaceable> validate -r</screen>
   </step>
   <step>
    <para>To validate your files including XML comments, enter:</para>
    <screen>daps -d <replaceable>PATH_TO_DC_FILE</replaceable> validate -c</screen>
   </step>
  </procedure>
  <example>
   <title>Parser Output For Validation Errors</title>
   <screen>daps_user_concept.xml:60: element xref: validity error : IDREF attribute linkend references an unknown ID "itl.daps.user.inst.other.req"
Document /local/svn/daps-svn/daps/doc/build/.profiled/x86-amd64-em64t_osuse_/MAIN.DAPS.xml does not validate
make: *** [validate] Error 3
</screen>
  </example>
 </sect1>
 <sect1>
  <title>Spell Checking</title>
  <para>
   <remark>taroth 2012-03-09: FIXME</remark>
  </para>
 </sect1>
 
  <!-- <sect2 id="sec.daps.user.oview.docproject.main">
   <title>Main File</title>
   <para>Find a simple example in <xref linkend="ex.daps.main.book"/>.</para>
   <example id="ex.daps.main.book">
    <title>Main File of a Book (DocBook 4.x)</title>
    <screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
[...]

&lt;book id="book.template" lang="en"&gt;
 &lt;bookinfo&gt;
  &lt;title&gt;Book Template&lt;/title&gt;
  &lt;subtitle&gt;generated by daps&lt;/subtitle&gt;
  &lt;productname&gt;Book Template&lt;/productname&gt;
   &lt;legalnotice&gt;
   &lt;para&gt;
    &lt;ulink url="http://www.gnu.org/licenses/fdl-1.3-standalone.html"&gt;
    GNU Free Documentation License&lt;/ulink&gt;
   &lt;/para&gt;
  &lt;/legalnotice&gt;
 &lt;/bookinfo&gt;
 &lt;chapter id="cha.template.examples"&gt;
  &lt;title&gt;Examples: the most commonly used DocBook XML constructs&lt;/title&gt;
  &lt;abstract&gt;
   &lt;para&gt;
    You may use this file as a template. for a complete reference on DocBook
    see &lt;citetitle&gt;&amp;tdg;&lt;/citetitle&gt; at &lt;ulink
     url="http://www.docbook.org/tdg/en/html/docbook.html"/&gt;.
   &lt;/para&gt;
  &lt;/abstract&gt;
  &lt;para&gt;
   I am a paragraph in a chapter.
  &lt;/para&gt;
  &lt;sect1 id="sec.template.examples.lists"&gt;
   &lt;title&gt;Lists&lt;/title&gt;
   &lt;para&gt;
    This is a section 1.
   &lt;/para&gt;
  &lt;/sect1&gt;
 &lt;/chapter&gt;
&lt;/book&gt;
</screen>
   </example>
   <para>If your documentation project consists of multiple books in a  
   <sgmltag>set</sgmltag>, the main file is the one that contains the 
   <sgmltag>set</sgmltag> element. In the following example, the components of 
   the set (individual books) are not part of the Main file, but have been put
   into separate document files (<sgmltag>book*.xml</sgmltag>), that are then
   assembled in the Main file using XIncludes. Note that this is is not specific 
   for a set but mainly a means of modularizing your documents. You can use the same
   modularization for books by splitting them into individual chapters files (or
   split chapters into a number of section files).
   </para>
   <example id="ex.daps.main.set">
    <title>Main File of a Set (DocBook 4.x)</title>
    <screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
[...]

&lt;set lang="en"&gt;
 &lt;title&gt;openSUSE Documentation&lt;/title&gt;
 &lt;xi:include href="book_opensuse_startup.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;
 &lt;xi:include href="book_opensuse_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;
 &lt;xi:include href="book_security.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;
 &lt;xi:include href="book_tuning.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;
 &lt;xi:include href="book_kvm.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;
&lt;/set&gt;
    </screen>
   </example>
  </sect2>

  <sect2 id="sec.daps.user.oview.docproject.dc">
   <title>&dc; (&dclong; File)</title>
   <para>Of the multiple parameters that can be set in the &dc; file, the only one 
  required is <parameter>MAIN</parameter>, pointing to the XML file that you
  want to process. Suppose you want to publish a whitepaper from DocBook XML 
  with the default DocBook stylesheets, the following example shows a very basic
  &dc; file that you could use:</para>
   <example id="ex.daps.dc.basic">
    <title>A Very Basic &dc; File</title>
    <screen>## -/- 
## Doc Config File for DAPS (very basic)
## DocBook Authoring and Publishing Suite
## -/-
##
## Basics
MAIN="my_whitepaper.xml" 
 </screen>
   </example>
   <para>
  The example above is a bit artificial though&mdash;if you do not want to 
   specify any further parameters, you can also set the <parameter>MAIN</parameter>
   parameter on the command line and do completely without &dc;.
   <remark>taroth 2012-02-10: add xref to usage chapter</remark>
   </para>
   <para> For a documentation <sgmltag>set</sgmltag> (a collection of books), 
   multiple &dc; files can be defined. This allows you to set both
    different parameters or different values for individual books in the set:
    For example, by refering a different <parameter>ROOTID</parameter> in a
    &dc; file, you define which book of the set is to be built. Another
    example would be to specify different output modes (such as draft or
    annotated) for individual books in the same documentation set.
  </para>
   <para>The following example shows the &dc; file of the &dapsuser;. </para>
   <example id="ex.daps.dc.user">
    <title>&dc; File For a Book in a Set</title>
    <screen>## -/-
## Doc Config File for DAPS (used for a book in a set)
## DocBook Authoring and Publishing Suite
## -/-
##
## Basics
MAIN="MAIN.DAPS.xml" <co id="co.daps.dc.main"/>
ROOTID="book.daps.user" <co id="co.daps.dc.rootid"/>

## enable sourcing
export DOCCONF=$BASH_SOURCE <co id="co.daps.dc.source"/>
  </screen>
   </example>
## Profiling
PROFOS="osuse" <co id="co.daps.dc.profile"/>
PROFARCH="x86;amd64;em64t" <xref linkend="co.daps.dc.profile"/>

## stylesheet location
STYLEROOT="/usr/share/xml/docbook/stylesheet/suse" <co id="co.daps.dc.styleroot"/>
HTML_CSS="/usr/share/xml/docbook/stylesheet/suse/html/susebooks.css" <co id="co.daps.dc.css"/>
EPUB_CSS="/usr/share/xml/docbook/stylesheet/suse/epub/susebooks.css" <xref
linkend="co.daps.dc.css"/>

   <calloutlist>
    <callout arearefs="co.daps.dc.main">
     <para>
     Mandatory parameter. Sets the main file that contains
     <quote>references</quote> to other books, chapters, appendices, etc. 
    </para>
    </callout>
    <callout arearefs="co.daps.dc.rootid">
     <para>
     Optional parameter. Defines the root ID of the element to be used for
     creating an output format. Usually, you define the root ID of a
     <sgmltag>book</sgmltag> or <sgmltag>article</sgmltag>
     element here.
    </para>
    </callout>
     <callout arearefs="co.daps.dc.profile">
      <para>
      Optional parameters. If you have similar products to document and want
      to generate documentation variants from your XML files, you can do so
      with the help of conditional text (or profiling, as it is called in
      DocBook). To profile your output for different (processor) architectures
      (like x86, ppc) or operating systems, use the
      <parameter>PROFARCH</parameter>, <parameter>PROFCONDITION</parameter>,
      <parameter>PROFOS</parameter>, or <parameter>PROFVENDOR</parameter>
      parameter, respectively to define which information should be included
      in the generated output.
      
      <remark condition="generic">
       2012-02-13 - fs: Add link to profiling section
      </remark>

      </para>
     </callout>
     <callout arearefs="co.daps.dc.styleroot">
      <para>
     Optional parameter. If the parameter is not specified, &dapsacr; will 
     use the default DocBook stylesheets for production. With 
     <parameter>STYLEROOT</parameter> specify the absolute path to the directory
      containing the custom stylesheets. It must have the same
      directory structure as the original DocBook stylesheet root
      directory, but does not need to contain stylesheets for all output
      formats. If custom stylesheets are not found, &dapsacr; will automatically
      fall back to the DocBook stylesheets.
     </para>
     </callout>
     <callout arearefs="co.daps.dc.css">
      <para>
     Optional parameters. If they are not specified, &dapsacr; will 
     use the default DocBook stylesheets for production of HTML or &epub;. 
     With <parameter>HTML_CSS</parameter> or <parameter>EPUB_CSS</parameter>, 
     specify the abolute path to the respective CSS file. 
     </para>
     </callout>
    <callout arearefs="co.daps.dc.source">
     <para>
     Optional line. You only need to add this line if you want to be able to 
     source &dc; files on the Bash with &dapsacr;. Sourcing a &dc; file (formerly 
     called <literal>ENV</literal> file) was necessary to work with the 
     documentation environment provided by &susedoc; (&dapsacr;' predecessor).
    </para>
    </callout>
   </calloutlist>
   <para>
   If your documentation set contains cross-references between the
   individual books, it is useful to define an additional &dc; file
   (<emphasis>without</emphasis> the <parameter>ROOTID</parameter> parameter).
   Use this &dc; file to generate an HTML output containing all hyperlinks
   between the individual books. Find an example &dc; file in
   <xref linkend="ex.daps.dc.set"/>.
  </para>

   <example id="ex.daps.dc.set">
    <title>&dc; File for a Set</title>
    <screen>## -/- 
## Doc Config File for DAPS
## DocBook Authoring and Publishing Suite
## -/-
##
## Basics
MAIN="MAIN.DAPS.xml" 


## enable sourcing
export DOCCONF=$BASH_SOURCE</screen>
   </example>
## Profiling
PROFOS="osuse"
PROFARCH="x86;amd64;em64t" 

## stylesheet location
STYLEROOT="/usr/share/xml/docbook/stylesheet/suse" 
HTML_CSS="/usr/share/xml/docbook/stylesheet/suse/html/susebooks.css" 
EPUB_CSS="/usr/share/xml/docbook/stylesheet/suse/epub/susebooks.css" 
  </sect2>
 </sect1>
 <sect1 id="sec.daps.user.oview.dirstruct">
  <title>Directory Structure</title>

  <para>
   For &dapsacr; to work out of the box, your XML files and images should be
   organized within your documentation directory (DOC_DIR) as shown in
  FIXME  <xref linkend="ex.daps.user.dir.doc"/>
  </para>

   <sect2 id="sec.daps.user.oview.dir.build">
   <title>Structure Created by &dapsacr;</title>
   <para>
    When generating the first output format from your documentation project,
    &dapsacr; adds another directory that holds the generated contents. It
    is named <filename>build</filename> (if not set otherwise in &dapsconf-sys;,
    parameter <parameter>BUILD_DIR</parameter>), and is created in your 
    documentation directory, parallel to the <filename>xml</filename> and 
    <filename>images</filename> subdirectory.
   </para>
   <para>
    The <filename>build</filename> directory is structured as follows:
   </para>
   <example id="ex.daps.user.build">
    <title>Build Directory</title>
    <screen><replaceable>YOUR_DOC_DIR</replaceable> <co id="co.docdir"/>
  |-/-<emphasis role="bold">build</emphasis> <co id="co.builddir"/> 
     |-/-<emphasis role="bold"><replaceable>NAME_OF_&dc;1</replaceable></emphasis> <co id="co.builddir.dc"/>    
     |-/-<emphasis role="bold"><replaceable>NAME_OF_&dc;2</replaceable></emphasis> <xref linkend="co.builddir.dc"/>    
     |-/-<emphasis role="bold">.images</emphasis> <co id="co.builddir.img"/>    
     |-/-<emphasis role="bold">.profiled</emphasis> <co id="co.builddir.profiled"/>
     |-/-<emphasis role="bold">.tmp</emphasis> <co id="co.builddir.tmp"/>
    </screen>
   </example>
   <calloutlist>
    <callout arearefs="co.docdir">
     <para>
      <quote>Working directory</quote> for the respective documentation project.
     </para>
    </callout>
    <callout arearefs="co.builddir">
     <para>
      Directory that holds all contents build by &dapsacr;.
     </para>
    </callout>
    <callout arearefs="co.builddir.dc">
     <para>
      For each of your documentation projects, &dapsacr; creates a
      subdirectory, named after the respective &dc; from which you build
      the project. All formats that have been generated from the &dc; (PDF,
      HTML, TXT, &epub; etc.) can be found there. A <filename>log</filename>
      subdirectory stores log files for each output format that has been
      generated by &dapsacr;.
     </para>
    </callout>
    <callout arearefs="co.builddir.img">
     <para>
      Directory holding the images created by &dapsacr;.
     </para>
    </callout>
    <callout arearefs="co.builddir.profiled">
     <para>
      Directory holding the profiled XML sources created by &dapsacr;.
     </para>
    </callout>
    <callout arearefs="co.builddir.tmp">
     <para>
      Directory holding temporary files created by &dapsacr; (for example,
      the FO files).
     </para>
    </callout>
   </calloutlist>
   <tip>
    <title>Creating a New Documentation project from Scratch</title>
    <para>
     &dapsacr; also contains the script <command>daps-init</command>for
     creating a new documentation project from scratch. <remark>taroth
      2011-12-29: add xref later</remark> When using that script, the directory
     structure is automatically set up and an example &dc; file is
     automatically created.
  </para>
   </tip>
  </sect2>-->

 
 
 <!--taroth 2012-04-25: it is recommended to use absolute paths in DC files, but the
 following parameters also allow for relative paths:
 BUILD_DIR
 DAPSROOT
 DOCCONF_DEFAULT
 EPUB_CSS
 FALLBACK_STYLEROOT
 FOP_CONFIG_FILE
 FOP_WRAPPER
 HTML_CSS
 STYLEDEVEL
 STYLEROOT
 XEP_CONFIG_FILE
 XEP_WRAPPER-->
</chapter>
