<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet
 href="urn:x-daps:xslt:profiling:docbook45-profile.xsl" 
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd"
[<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter id="cha.daps.user.output">
 <title>Generating Output Formats</title>
 <abstract>
  <para>
   &dapsacr; supports a number of different output formats, including also
   <quote>exotic</quote> formats like man pages or simple text. You can build 
   several output formats in parallel, build your complete documentation project
   (set, book, or article) or only a part of it (for example, a specific chapter). 
   By default, &dapsacr; uses the regular DocBook stylesheets, but &dapsacr; also 
   allows you to customize your output formats in a very flexible way.
   <remark>taroth 2012-03-19: add xref to advanced chapter</remark>
  </para>
 </abstract>
 <!--taroth 2013-01-14: rephrase to this pattern:<abstract>
  <para>
   This chapter describes:
   <itemizedlist>
    <listitem>
     <para></para>
    </listitem>
    <listitem>
     <para></para>
    </listitem>
    <listitem>
     <para></para>
    </listitem>
   </itemizedlist>
  </para>
 </abstract>-->
 <sect1 id="sec.daps.user.output.validate">
  <title>Validating Your XML Sources</title>
  &daps-validation-basics;
  &daps-example-validation-error; 
  <para>Validation within your XML editor is bound to fail, as soon you use
  <xref linkend="sec.daps.user.modular.profile" xrefstyle="select:title"/>
  in your DocBook sources. Furthermore, validating XML files within a 
  <sgmltag>book</sgmltag> or <sgmltag>set</sgmltag> often exceeds validation of 
  the current XML file, as links (<sgmltag>xref</sgmltag> elements) or 
  XIncludes need to be resolved, too. </para>

  <para>&dapsacr; can handle all those cases due to the built-in 
   <literal>xmllint</literal> validator. By default, <sgmltag>remark</sgmltag> elements and XML 
   comments are ignored during validation. However, if you intend to create a 
   (draft) output including remarks or comments, you need to include them for
    validation&mdash;see the example commands below.</para>

  <para>
    To validate all files that belong to your documentation project,
    &dapsacr; only needs to know which &dc; file to use. Use the <option>-d</option>
    option to specify it.
   </para>

  <variablelist>
   <varlistentry>
    <term>Validating All XML Files in Your Book, Article or Set</term>
    <listitem>
     <screen>daps -d <replaceable>PATH_TO_DC_FILE</replaceable> validate </screen>
     <para>If the XML files are not valid, &dapsacr; will return the parser
     errors. If validation was successful, &dapsacr; returns: <literal>All files are
     valid.</literal>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Validating Your Files Including Remarks</term>
    <listitem>
     <screen>daps -d <replaceable>PATH_TO_DC_FILE</replaceable> validate --remarks</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Validating Your Files Including XML Comments</term>
    <listitem>
     <screen>daps -d <replaceable>PATH_TO_DC_FILE</replaceable> validate --comments</screen>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>


 <sect1 id="sec.daps.user.output.syntax">
  <title>Basic Syntax for Generating Output</title>
  <para>&dapsacr; supports a number of different output formats, including also
   <quote>exotic</quote> formats like man pages or simple text. 
   <xref linkend="table.daps.user.output.overview" xrefstyle="select:label"/>
   gives an overview.</para>
  <para>
    Independent of the individual output format you want to create, you need
    to specify the &dc; file to use:
   </para>
  <screen>$ daps -d <replaceable>PATH_TO_&dc;_FILE</replaceable> <replaceable>OUTPUT_FORMAT</replaceable>&nbsp;</screen>
  <para>
    For example:
   </para>
  <screen>$ <command>daps -d &dc;-daps-example color-pdf</command>
  </screen>
  <para>
    At the end of the transformation process, &dapsacr; shows a message
    where to find the generated output.
   </para>
 </sect1>

 <sect1 id="sec.daps.user.output.formats">
  <title>Supported Output Formats</title>
  <para>The following table lists the main output formats and their
 characteristics, and the &dapsacr; subcommands to generate them. Refer to 
 <xref linkend="sec.daps.user.output.syntax" xrefstyle="select:label"/>
 for the commands' basic syntax.</para>

  <table id="table.daps.user.output.overview">
   <title>&dapsacr; Output Commands and Formats</title>
   &daps-output-formats-table;
  </table>
  &daps-output-all;
 </sect1>
 <sect1 id="sec.daps.user.output.adv">
  <title>Advanced Output Options</title>
  <para>In the following, find some example commands for special use cases, like
  doing partial builds of your documentation project or specifying no further 
  parameters than the Main file for an output. In the last case, you can do
  completely without a &dc; file.</para>
  <para>For further advanced output options like including 
  remarks, metadata or draft watermarks in the output, creating one big XMl file
  or creating distributable archives, refer to <xref linkend="cha.daps.user.review"/>.</para>
  <variablelist>
   <varlistentry>
    <term>Building Only Parts of Your Documentation Project</term>
    <listitem>
     <screen>$ daps -d &dc;-daps-example color-pdf --rootid=cha.template.examples</screen>
     <para>Instead of always building your complete documentation project
    (<sgmltag>set</sgmltag>, <sgmltag>book</sgmltag>, or
    <sgmltag>article</sgmltag>), &dapsacr; also allows you do partial builds.
    The <quote>starting point</quote> of your documentation project is usually 
    the root element defined in the Main file that is referenced in the respective
    &dclong;. Alternatively, specify a  ROOTID on the command line to build only
    a part of your documentation project by using the ID
     of a <sgmltag>book</sgmltag>, <sgmltag>article</sgmltag>,
     <sgmltag>glossary</sgmltag>, <sgmltag>appendix</sgmltag>,
     <sgmltag>part</sgmltag>, or <sgmltag>chapter</sgmltag> element.
   </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Specifying the Main File on the Command Line</term>
    <listitem>
     <screen>$ daps -m <replaceable>PATH_TO_MAIN_FILE</replaceable></screen>
     <para>If you do not need to specify any further parameters than the Main 
     file, you can do completely without a &dc; file. With the <option>-m</option> 
     option you can specify the Main file defining your document. The options
     <option>-m</option> and <option>-d</option> exclude each other.</para></listitem>
    </varlistentry>
   </variablelist>
  </sect1>
 </chapter>
