<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet
 href="urn:x-daps:xslt:profiling:docbook45-profile.xsl" 
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd"
[<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<!--taroth 2012-05-04: todo:  mention setting the MAIN as command line option, 
see daps_user_concept.xml, ID sec.daps.user.basics.single-->
<chapter id="cha.daps.user.output">
 <title>Generating Output Formats</title>
 <abstract>
  <para>
   &dapsacr; supports a number of different output formats, including also
   <quote>exotic</quote> formats like man pages or simple text. Generating
   any output requires that your XML files are well-formed and can also be
   validated. You can build several output formats in parallel, build your
   complete documentation project (set, book, or article) or only a part of
   it (for example, a specific chapter). If you want the output format to
   contain meta-data about the XML files (for example, file name or workflow
   status), to include <sgmltag>remark</sgmltag> elements or to be marked as
   a <literal>draft</literal> version, you can tell &dapsacr; to do so by
   specifying options on the command line. By default, &dapsacr; uses the
   regular DocBook stylesheets, but &dapsacr; also allows you to customize
   your output formats in a very flexible way.
   <remark>taroth 2012-03-19: add xref to
  advanced chapter</remark>
  </para>
 </abstract>
 <sect1 id="cha.daps.user.output.formats">
  <title>Supported Output Formats</title>

  <para>
   &dapsacr; currently lets you publish your XML sources in the following
   output formats:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     PDF
    </para>
   </listitem>
   <listitem>
    <para>
     HTML
    </para>
   </listitem>
   <listitem>
    <para>
     HTML-single
    </para>
   </listitem>
   <listitem>
    <para>
     &epub;
    </para>
   </listitem>
   <listitem>
    <para>
     text
    </para>
   </listitem>
   <listitem>
    <para>
     man page
    </para>
   </listitem>
<!-- toms 2012-03-29: Wouldn't mention that; it's mostly unsupported
        and rather old stuff
   -->
<!--<listitem>
    <para>MediaWiki</para>
   </listitem>-->
   <listitem>
    <para>
     &webh;
    </para>
   </listitem>
<!-- toms 2012-03-29: Wouldn't mention that; it's rather esoteric for
        the broader audience
   -->
<!--<listitem>
    <para>JSP books</para>
   </listitem>-->
  </itemizedlist>

  <para>
   The number of output formats may be extended in the future, depending on
   the output formats that are supported by DocBook stylesheets. For an
   overview of the available output formats, run <command>daps
   --help</command> and have a look at the subsection in
   <citetitle>Subcommands</citetitle> that is entitled <citetitle>Generate
   Books</citetitle>.
  </para>
 </sect1>
 <sect1 id="cha.daps.user.output.syntax">
  <title>Basic Syntax</title>

  <para>
   &wip;
  </para>
 </sect1>
 <sect1 id="sec.daps.user.output.validate">
  <title>Validating Your XML Sources</title>
  <para>
   Validating XML files within in a book or set often exceeds validation of
   the current XML file, as links (<sgmltag>xref</sgmltag> elements) or
   XIncludes need to be resolved, too. If you use conditional text
   (<literal>profiling</literal>) in your XML sources (for creating
   variants), your XML editor cannot check validity of your XML files.
   However, &dapsacr; can handle all those cases due to the built-in xmllint
   validator.
  </para>
  
  <procedure>
   <title>Validating XML Files</title>
   <para>
    To validate all files that belong to your documentation project,
    &dapsacr; only needs to know which &dclong; file to use. If you have
    specified a value for <parameter>DOCCONF_DEFAULT</parameter> in
    &dapsconf-user; or if your documentation directory contains only one
    &dc; file, &dapsacr; automatically uses the corresponding &dc; file.
    Otherwise, specify the path to the &dc; file with the
    <option>-d</option> option as described below.
   </para>
   <para>
    By default, <sgmltag>remark</sgmltag> elements and XML comments are
    ignored during validation. However, if you intend to create a (draft)
    output including remarks or comments, you need to include them for
    validation by specifying the respective &dapsacr; option.
   </para>
   <step>
    <para>
     To validate all XML files in your book, article or set, enter:
    </para>
    <screen>daps -d <replaceable>PATH_TO_DC_FILE</replaceable> validate </screen>
    <para>
     If the XML files are not valid, &dapsacr; will return the parser
     errors. They include information about the type of error, the
     respective file name and the line number where the error occurred. In
     addition, &dapsacr; shows the path to the profiled XML sources and the
     total number of errors.
    </para>
    <para>
     If validation was successful, &dapsacr; returns: <literal>All files are
      valid.</literal>
    </para>
   </step>
   <step>
    <para>
     To validate your files including remarks, enter:
    </para>
    <screen>daps -d <replaceable>PATH_TO_DC_FILE</replaceable> validate --remarks</screen>
   </step>
   <step>
    <para>
     To validate your files including XML comments, enter:
    </para>
    <screen>daps -d <replaceable>PATH_TO_DC_FILE</replaceable> validate -comments</screen>
   </step>
  </procedure>
  
  <example>
   <title>Parser Output For Validation Errors</title>
   <screen>daps_user_concept.xml:60: element xref: validity error : IDREF attribute linkend references an unknown ID "itl.daps.user.inst.other.req"
    Document /local/svn/daps-svn/daps/doc/build/.profiled/x86-amd64-em64t_osuse_/MAIN.DAPS.xml does not validate
    make: *** [validate] Error 3
   </screen>
  </example>
 </sect1>
</chapter>
