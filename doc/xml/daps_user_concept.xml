<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet
 href="urn:x-suse:xslt:profiling:docbook45-profile.xsl" 
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd"
[<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter id="cha.daps.user.oview">
 <title>Conceptual Overview</title>
 <para>
  <remark>topics: daps components,
  directory structure, ENV files, profiling, validation, external components
  like XML editor and FO formatter, stylesheets ...</remark>
 </para>
 <para>&dapsacr; (&dapslong;) is developed as open source software for Linux 
  operating systems. It consists of integrated tools, stylesheets, scripts, and 
  makefiles that support technical writers in the editing, translation and 
  publishing process of DocBook XML files. &dapsacr; supports single source 
  publishing into a number of different output formats, like PDF, HTML, single 
  HTML, or EPUB.</para>
 <para>It can be used in combination with the following components:</para>
 <itemizedlist>
  <listitem>
   <para>an XML editor of your choice</para>
  </listitem>
  <listitem>
   <para>an FO formatter (like FOP or XEP)</para>
  </listitem>
  <listitem>
   <para>a version management system, like CVS or Subversion</para>
  </listitem>
 </itemizedlist>
 <sect1 id="sec.daps.user.oview.concepts">
  <title>Basic Concepts</title>
  <para>To define the build environment to use, &dapsacr; uses a set of
  variables that can be set in various places:</para>
  <itemizedlist>
   <listitem>
    <para>/etc/daps/conf (system-wide configuration file)</para>
   </listitem>
   <listitem>
    <para>$HOME/.daps/config (user-specific configuration file)</para>
   </listitem>
   <listitem>
    <para>&env; file of the documentation project (usually for project-
   or book-specific settings)</para>
   </listitem>
   <listitem>
    <para>on the fly at the command line. You can specify them either as 
   as options to a <command>daps</command> or as variable declaration 
   (<literal>FOO=bar</literal>).</para>
   </listitem>
  </itemizedlist>
  <para>The configuration file <filename>/etc/daps/conf</filename> lists all keys 
 that can be used, including a short description for each key.</para>
  <sect2>
   <title>Defining Documentation Projects</title>
   <para>To define which XML files belong to your documentation project, and
   which variants can be generated from the project with the help of conditional
   text (or profiling, as it is called in DocBook), you need a special file
   called &env; file. It is a text file and sets a number of variables (or keys) 
   for your documentation project. For a documentation set (a collection of books), you can define
   multiple &env; files. By referring different root IDs, you define which book
   is to be built with the specific &env; file. Of course, you can also specify
   different layouts for certain books (or use different values for one of the
   other variables defined in the &env; file): 
  </para>
   <example id="ex.daps.env.user">
    <title>An <filename>&env;-*</filename> File For a Book</title>
    <screen># &env; file for &dapsacr; User Guide
MAIN=MAIN.DAPS.xml         <co id="co.daps.main"/>
ROOTID=book_daps_user.xml  <co id="co.daps.rootid"/>
PROFARCH="x86;ppc"         <co id="co.daps.profarch"/>
PROFOS="lin;win"           <co id="co.daps.profos"/>
LAYOUT=                    <co id="co.daps.layout"/>
PRODUCTNAME="&dapslong;"   <co id="co.daps.productname.version"/>
DISTVER=1.0                <xref linkend="co.daps.productname.version"/>

export DAPS_ENV_NAME=$(basename $BASH_SOURCE) <co id="co.daps.source"/>
    </screen>
   </example>
   <calloutlist>
    <callout arearefs="co.daps.main">
     <para>Mandatory variable. Sets the main file that contains 
     <quote>references</quote> to other books, chapters, appendices, etc. If
     your documentation project consists of multiple books and articles 
     (a <literal>set</literal>), the MAIN variable usually references the 
     file that contains the &lt;set&gt; element.
      </para>
    </callout>
    <callout arearefs="co.daps.rootid">
     <para>Optional variable. Defines the root ID of the element to be used for
     creating an output format. Usually, you define the root ID of a
     &lt;book&gt; or article element here.  
     </para>
    </callout>
    <callout arearefs="co.daps.profarch">
     <para>Optional variable. If you want to profile your text for different 
      platforms or (processor) architectures (for example, x86 or ppc), this 
      variable selects the architecture profiling information. 
      </para>
    </callout>
    <callout arearefs="co.daps.profos">
     <para>Optional variable.If you want to profile your text for different 
      operating systems (for example, for Linux and Windows), this variable 
      selects the operating system profiling
      information. 
     </para>
    </callout>
    <callout arearefs="co.daps.layout">
     <para>Optional variable. Determines the layout of the book. 
     Per default, &dapsacr; ships the following layouts:
     <remark>taroth 2012-01-19: bound to change soon, therefore commenting 
     for now</remark>
     </para>
    <!--<variablelist>
     <varlistentry>
      <term>
       <option>flyer</option>
      </term>
      <listitem>
       <para>Creates a flyer layout that can be used for Quick Starts.</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       <option>pocket</option>
      </term>
      <listitem>
       <para>Creates a pocket layout which a smaller page format.</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>Empty, no value</term>
      <listitem>
       <para>Selects the default layout.<remark>taroth 2011-12-29: 
            =layout of SUSE manuals? where is the default defined?</remark>
       </para>
      </listitem>
     </varlistentry>
    </variablelist>-->
    </callout>

    <callout arearefs="co.daps.productname.version">
     <para>Optional variable. <remark>taroth 2012-01-19: variable name DISTVER 
     will probably change - https://sourceforge.net/p/daps/tickets/25/</remark>
     &dapsacr; allows you to set product name and product version dynamically. 
     This enables you to use the same XML sources for different products. 
     To use this feature, use the following entities in your XML sources:</para>
     <itemizedlist>
      <listitem>
       <para>&amp;productname;</para>
      </listitem>
      <listitem>
       <para>&amp;productnamereg; (productname including a copyright or trademark 
       symbol)</para>
      </listitem>
      <listitem>
       <para>&amp;productversion;</para>
      </listitem>
     </itemizedlist>
     <para>These entities will be dynamically resolved to the values of DISTVER, 
     PRODUCTNAME, and PRODUCTNAMEREG. You can define the value of those variables
     in a project-specific (or book-specific) &env; file. 
     <remark>taroth 2012-01-30</remark> 
<!--# Examle:
#   PRODUCTNAME="MyVeryFirstSoftware"
#   PRODUCTNAME="MyVeryFirstSoftwareÂ©"
#   DISTVER="4.2"
-->
     </para>
    </callout>
    <callout arearefs="co.daps.source">
     <para>Optional line. You only need to add this line if you want to be able to       
      source &env; files with &dapsacr;. Sourcing an &env; file was necessary
      to work with the documentation environment provided by &susedoc; 
      (&dapsacr;' predecessor). </para>
    </callout>
   </calloutlist>
   <para>Because
&env; files define which XML files belong to a documentation project, they are
necessary for validating your XML files and for generating any kind of output.
Without &env; files, you cannot produce any output from your DocBook sources
with &dapsacr;.<remark>taroth 2012-01-17: not 100% sure if this is still the
case</remark>
   </para>
   <para>If your documentation set contains cross-references
between the individual books, it is useful to define an additional &env; file
(<emphasis>without</emphasis> the root ID variable) that can be used to generate
an HTML output that contains all hyperlinks between the individual
books. Find an example &env; file in <xref linkend="ex.daps.env.set"/>.</para>
 <example id="ex.daps.env.set">
    <title>An <filename>&env;-*</filename> File for a Set</title>
    <screen># &env; file for the complete &dapsacr; Documentation
MAIN=MAIN.DAPS.xml         
PROFARCH="x86;ppc"         
PROFOS="lin;win"           
LAYOUT=                    
PRODUCTNAME="&dapslong;"   
DISTVER=1.0                

export DAPS_ENV_NAME=$(basename $BASH_SOURCE)
    </screen>
   </example>
   <para>&dapsacr; also contains a script for creating a
new documentation project from scratch. <remark>taroth 2011-12-29: add xref
later</remark>. When using that script, an example &env; file is automatically
created.</para>
  </sect2>
  <sect2>
   <title>Directory Structure</title>
   <para>For
&dapsacr; to work out of the box, XML files and images should be organized in
the following directory structure:</para>
  </sect2>
 </sect1>
</chapter>
