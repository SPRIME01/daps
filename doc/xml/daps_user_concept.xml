<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet
 href="urn:x-suse:xslt:profiling:docbook45-profile.xsl" 
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd"
[<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter id="cha.daps.user.features">
 <title>Conceptual Overview</title>

 <sect1 id="sec.daps.user.dbversions">
  <title>Supported DocBook Versions</title>
  <para>&daps-db-versions;</para>
 </sect1>
 <sect1 id="sec.daps.user.features">
  <title>Key Features</title>
  <para>&dapsacr; supports technical writers in the editing, translation and 
   publishing process of DocBook XML files:</para>
  <variablelist>
   <varlistentry>
    <term>Output Formats</term>
    <listitem>
     <para>&dapsacr; lets you publish your XML sources in a number of different 
     output formats, for example: HTML, HTML-single, PDF, &epub;, &webh;, text, 
       man pages, or MediaWiki. For details, refer to 
       <xref linkend="cha.daps.user.output"/>.<remark>taroth 2012-04-24: decide 
       where to point to: book chapter or QS?</remark>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Custom Layouts</term>
    <listitem>
     <para>By default, &dapsacr; uses the DocBook stylesheets to generate the 
     output formats. But &dapsacr; also supports custom layouts for your 
     documentation projects (or for individual books within your set).
     <!--You do not need to define custom stylesheets for <emphasis>all</emphasis> 
     output formats&mdash;in case a custom layout cannot be found, &dapsacr; 
     will automatically fall back to the DocBook stylesheets.--></para>
     <para>Apart from that, &dapsacr; allows you to change individual layout
     parameters by passing string parameters to xsltproc for HTML or PDF builds
     &mdash;without even touching the stylesheets. For details about custom 
     layouts, refer to <xref linkend="cha.daps.user.layout"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Editor Macros</term>
    <listitem>
     <para>For Emacs, &dapsacr; includes a set of macros for easy insertion of 
     complex DocBook elements like <sgmltag>variablelist</sgmltag>, 
     <sgmltag>figure</sgmltag>, <sgmltag>table</sgmltag> or <sgmltag>indexterm</sgmltag>. 
     Instead of inserting the child elements successively, you will get a 
     <quote>skeleton</quote> that includes all required child elements and 
     is ready to be filled with contents. For details, refer to 
     <xref linkend="cha.daps.user.edit"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Validating</term>
    <listitem>
     <para>Validating XML files within in a book or set exceeds validation of the
     current XML file, as links (<sgmltag>xref</sgmltag> elements) or XIncludes 
     need to be resolved, too. With &dapsacr;, you can check validity of all 
     files that belong to a documentation project with a single command. For details, 
     refer to <xref linkend="cha.daps.user.edit"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Spell Check</term>
    <listitem>
     <para>&dapsacr; supports spell checking of your XML sources with aspell from 
     the command line. <remark>taroth 2012-02-20: DEVs, is the following correct?</remark>
     Depending on the XML editor you use, you can also integrate a custom aspell
     dictionary into your editor. For details, refer to 
     <xref linkend="cha.daps.user.edit"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Link Checker</term>
    <listitem>
     <para>To make sure that all links in your XML sources are still available 
     (and do not give a <literal>404</literal> error or similar), &dapsacr; also
     includes a link checker (based on <literal>checkbot</literal>). Use it 
     to create a report of all links that caused some kind of warning or error.
     For details, refer to <xref linkend="cha.daps.user.edit"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Image Handling</term>
    <listitem>
     <para>&dapsacr; provides sophisticated image handling support. For example, 
     it can transform images referenced in your XML files into different
     formats, list all source images referenced in your XML files, list any 
     missing images or list the <emphasis>generated</emphasis> images used 
     for the various output formats. You can also forward those lists to your 
     preferred image viewer to conveniently browse through the images, or check
     if all image names are unique. For details, refer to 
     <xref linkend="cha.daps.user.img"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Profiling (Conditional Text)</term>
    <listitem>
     <para>If you have similar products to document and want to generate 
      multiple documentation variants from your XML files, you can do so
      with the help of conditional text (or <literal>profiling</literal>, as it 
      is called in DocBook). For example, you can profile certain parts of your 
      XML texts for different (processor) architectures, operating systems, 
      vendors or target groups. Use the <literal>PROF*</literal> keys defined 
      in &dapsconf-sys; to define which information should be included
      in the output. For details, refer to <xref linkend="cha.daps.user.edit"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Dynamic Product Names and Numbers</term>
    <listitem>
     <para>&dapsacr; allows to set product name and product number dynamically. 
     This enables you to use the same XML sources for different products. Use the
     entities &amp;productname; and &amp;productnumber; in your XML
     sources, and define the respective values in an entity (using profiling for 
     multiple products). <remark>taroth 2012-05-04: link may need adjustment, not
     100% clear where profiling will be covered</remark> For details, refer to 
     <xref linkend="cha.daps.user.edit"/>.   
  </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Review and Translation Processes</term>
    <listitem>
     <para>&dapsacr; offers a number of features to simplify review and 
     translation processes. For example, you can insert 
     <sgmltag>remark</sgmltag> elements in the source code and generate an output 
     format that either includes or suppresses these remarks. You can also 
     generate preview versions of your documentation with a <literal>DRAFT</literal>
     watermark appearing on the HTML or PDF output. If you use &dm; in addition to
     &dapsacr;, you can <quote>flag</quote> your XML files with meta-information
     (like workflow status). &dapsacr; offers an option to also display
     this meta-information in the generated output. For handing over your files 
     to review or translation, &dapsacr; can create tarballs of the XML
     sources and graphics. <!--Alternatively, transform all files 
     included in your <sgmltag>book</sgmltag> or <sgmltag>set</sgmltag> into an
     XML bigfile. If you have a huge documentation project of which only individual
     books or files are to be translated, you can mark them for translation
     with &dm;. The command <command>daps locdrop</command> will automatically 
     sort and pack those files into s separate tarball.-->For details, refer to 
     <xref linkend="cha.daps.user.review"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Packaging and Deployment</term>
    <listitem>
     <para>For deploying the documentation as RPM packages and integrating it 
     into KDE and GNOME desktop environments as well as into Web user interfaces
     (via JSP), &dapsacr; offers a number of options to produce the corresponding
     output: For example, you can create source packages, HTML tarballs, color 
     PDFs and desktop and document files with the <command>daps package-*</command>
     commands. For details refer to <xref linkend="cha.daps.user.deploy"/>.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 id="sec.daps.user.config">
  <title>&dapsacr; Configuration</title>
 &daps-config;
 </sect1>
 <sect1 id="sec.daps.user.basics">
  <title>Defining Documentation Projects</title>
  <para>
   The easiest way to set up a new documentation project from scratch is to
   use the &dapsacr; initialization script <command>daps-init</command>. For
   instructions how to do so, refer to <xref linkend="pro.daps.init"/>. The
   script automatically creates the <xref linkend="sec.daps.user.basics.files" 
   xrefstyle="select:title"/> and <xref linkend="sec.daps.user.basics.dirstruct" 
   xrefstyle="select:title"/> that you need to get started with  &dapsacr;.
  </para>
  <sect2 id="sec.daps.user.basics.files">
   <title>Key Files</title>
   &daps-key-files;
   <para>In the following section, find examples for both Main and &dc; files, 
   sorted according to use cases: for documentation projects consisting of single 
   deliverables like an article or a book, and for larger documentation
   projects, consisting of multiple deliverables like books or articles, organized
   in a <sgmltag>set</sgmltag>.  
   </para>
  </sect2>
  
   <sect2 id="sec.daps.user.basics.single">
    <title>Single Deliverables (Article or Book)</title>
    <para>The most elementary case of a documentation project is probably a white 
    paper or article. Typically, its contents is covered in a single XML file
    with <sgmltag>article</sgmltag> as root element. In this case, the 
    single XML file would be the Main file as it specifies the highest-level object
    in your documentation project (<sgmltag>article</sgmltag>). Apart from document
    title and body, the file can contain other information such as legal notice, 
    release information, author data etc. An article may be structured into
    sections (by use of <sgmltag>section</sgmltag> elements or 
    <sgmltag>sect1</sgmltag>, <sgmltag>sect2</sgmltag> etc.).</para>

    <para>Find a simple example in <xref linkend="ex.daps.main.art"/>. </para>
    <example id="ex.daps.main.art">
     <title>Main File of an Article (DocBook 4.x)</title>
     <screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
[...]

&lt;article lang="en" id="art.template"&gt;
 &lt;title&gt;Article Template&lt;/title&gt;
 &lt;subtitle&gt;generated by DAPS&lt;/subtitle&gt;
 &lt;articleinfo&gt;
  &lt;releaseinfo&gt;Version 0.1&lt;/releaseinfo&gt;
  &lt;releaseinfo&gt;Revision: 0&lt;/releaseinfo&gt;
  &lt;releaseinfo&gt;
   Build Date: &lt;?dbtimestamp format="B d, Y"?&gt;
  &lt;/releaseinfo&gt;
  &lt;legalnotice&gt;
   &lt;para&gt;
    &lt;ulink url="http://www.gnu.org/licenses/fdl-1.3-standalone.html"&gt;
    GNU Free Documentation License&lt;/ulink&gt;
   &lt;/para&gt;
  &lt;/legalnotice&gt;
 &lt;/articleinfo&gt;
 &lt;abstract&gt;
  &lt;para&gt;
   You may use this file as a template. For a complete DocBook reference
   see &lt;citetitle&gt;&tdg;&lt;/citetitle&gt;, available at 
   &lt;ulink url="http://www.docbook.org/tdg/en/html/docbook.html"/&gt;.
  &lt;/para&gt;
 &lt;/abstract&gt;
 &lt;sect1 id="sec.template.examples"&gt;
  &lt;title&gt;Examples: The most commonly used DocBook XML constructs&lt;/title&gt;
  &lt;para&gt;
   I am a paragraph in a section 1.
  &lt;/para&gt;
  &lt;sect2 id="sec.template.examples.lists"&gt;
   &lt;title&gt;Lists&lt;/title&gt;
   &lt;para&gt;
    This section 2 showcases 3 types of lists.
   &lt;/para&gt;
   [...]
  &lt;/sect2&gt;
 &lt;/sect1&gt;
&lt;/article&gt;
     </screen>
    </example>

<para>Let us assume the XML file shown in <xref linkend="ex.daps.main.art"/> is 
named <filename>MAIN-DAPS-article.xml</filename> and you want to publish it in 
default DocBook layout, without any special requirements. To generate output, 
you usually create a &dc; file per article or book, specifying a number of parameters such 
as the Main file or which layout to use. Of the multiple parameters that can be 
set in the &dc; file, the only one required is <parameter>MAIN</parameter>, 
pointing to the XML file that you want to process. Therefore, a very basic &dc; 
file for the article in <xref linkend="ex.daps.main.art"/> could look as follows:</para>

    <example id="ex.daps.user.dc.art.simple">
     <title>Basic &dc; File for an Article</title>
     <screen>## Doc config file for an article
## See /etc/daps/config for documentation of the settings below
##

## Mandatory Parameter
MAIN="MAIN-DAPS-article.xml" <co id="co.daps.dc.art.main"/>
     </screen>
    </example>
    <calloutlist>
     <callout arearefs="co.daps.dc.art.main">
      &daps-co-main;
    </callout>
   </calloutlist>
   <para>The example above is a bit artificial, though: If you do not want to 
 specify any further parameters (apart from the Main file), you can also set
 the <parameter>MAIN</parameter> parameter as command line option during 
 generation of the output format. In that case, you can do completely without
 &dc; file. For details, refer to <xref linkend="cha.daps.user.output"/>.</para>
<!-- <screen>daps -m xml/MAIN-daps-example.xml html</screen>-->
<para>In case your documentation project does not consist of an article, but a 
single book, the basic setup of Main file and &dc; file is similar:</para>

   <example id="ex.daps.main.book">
    <title>Main File of a Book (DocBook 4.x)</title>
    <screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
[...]

&lt;book id="book.template" lang="en"&gt;
 &lt;bookinfo&gt;
  &lt;title&gt;Book Template&lt;/title&gt;
  &lt;subtitle&gt;generated by daps&lt;/subtitle&gt;
  &lt;productname&gt;Book Template&lt;/productname&gt;
   &lt;legalnotice&gt;
   &lt;para&gt;
    &lt;ulink url="http://www.gnu.org/licenses/fdl-1.3-standalone.html"&gt;
    GNU Free Documentation License&lt;/ulink&gt;
   &lt;/para&gt;
  &lt;/legalnotice&gt;
 &lt;/bookinfo&gt;
 &lt;chapter id="cha.template.examples"&gt;
  &lt;title&gt;Examples: the most commonly used DocBook XML constructs&lt;/title&gt;
  &lt;abstract&gt;
   &lt;para&gt;
    You may use this file as a template. For a complete reference on DocBook
    see &lt;citetitle&gt;&amp;tdg;&lt;/citetitle&gt;, available at 
    &lt;ulink url="http://www.docbook.org/tdg/en/html/docbook.html"/&gt;.
   &lt;/para&gt;
  &lt;/abstract&gt;
  &lt;para&gt;
   I am a paragraph in a chapter.
  &lt;/para&gt;
  &lt;sect1 id="sec.template.examples.lists"&gt;
   &lt;title&gt;Lists&lt;/title&gt;
   &lt;para&gt;
    This is a section 1.
   &lt;/para&gt;
  &lt;/sect1&gt;
 &lt;/chapter&gt;
&lt;/book&gt;
</screen>
   </example>
<para>In the example above, the book contents is also covered in a single XML 
file with <sgmltag>book</sgmltag> as root element. In contrast to an article,
books can have more structure levels: they are usually divided into 
<sgmltag>chapter</sgmltag> elements (that may contain sections and subsections) 
as outlined in <xref linkend="ex.daps.main.book"/>. In addition to chapters, 
books may also contain other structure elements such as <sgmltag>preface</sgmltag>, 
<sgmltag>glossary</sgmltag>, or <sgmltag>appendix</sgmltag>. As additional 
structure level, books may also contain parts. For a complete reference, 
see <citetitle>&tdg;</citetitle>, available at 
<ulink url="http://www.docbook.org/tdg/en/html/docbook.html"/>.</para>
<para>Let us assume the XML file shown in <xref linkend="ex.daps.main.book"/> is 
named <filename>MAIN-DAPS-book.xml</filename> and you want to publish it in a custom 
layout. To generate output, you would create a &dc; file pointing to the 
Main file of the book, and additionally specifying a set of custom stylesheets.</para>
   <example id="ex.daps.dc.book">
    <title>&dc; File For a Book with Custom Layout</title>
     <screen>## Doc config file for the DAPS example document 
## See /etc/daps/config for documentation of the settings below

## Mandatory Parameter
MAIN="MAIN-DAPS-book.xml" <co id="co.daps.dc.book.main" />

## Optional Parameters

## Custom Stylesheets
## (if not defined the DookBook stylesheets will be used)
##
STYLEROOT="/usr/share/xml/docbook/stylesheet/custom/xslt" <co id="co.daps.dc.user.styleroot"/>
</screen>
   </example>
   <calloutlist>
    <callout arearefs="co.daps.dc.book.main">
    &daps-co-main; 
    </callout>
    <callout arearefs="co.daps.dc.user.styleroot">
     &daps-co-styleroot;
     <!--The custom stylesheet directory must have the 
     same structure as the original DocBook stylesheet root directory, but it 
     but does not need to contain stylesheets for all output formats. If &dapsacr;
     cannot find a custom stylesheet for a specific output format, it uses the 
     default DocBook layout instead.-->
    </callout>
    <!--
    <callout arearefs="co.daps.dc.user.fbstyleroot">
     <para>Allows you to define a fallback which is used in case the custom 
     stylesheets defined with <parameter>STYLEROOT</parameter> cannot be accessed. 
     In case neither the stylesheets specified with <parameter>STYLEROOT</parameter> 
     nor with <parameter>FALLBACK_STYLEROOT</parameter> can be accessed, &dapsacr; 
     uses the default DocBook layout.</para>
    </callout>
    <callout arearefs="co.daps.dc.user.css">
     <para>
     If not specified, &dapsacr; will use the default DocBook stylesheets for 
     production of HTML and &epub;. For custom CSS styles, specify the 
     (absolute or relative) path to the respective CSS file. In this example, 
     a custom CSS file for HTML output is used, whereas &epub; uses the default
     DocBook layout.
     </para>
    </callout>
    <callout arearefs="co.daps.dc.user.source">
     <para>
     Enabled for compatibility reasons to &dapsacr;' predecessor  &susedoc;.
     Only needed if you want to be able to source &dc; files on the Bash with 
     &dapsacr;. Sourcing a &dc; file (formerly called <literal>ENV</literal> file) 
     was necessary to work with the documentation environment provided by &susedoc;.
     </para>
    </callout>-->
   </calloutlist>
</sect2>
<sect2 id="sec.daps.user.basics.mutliple">
<title>Multiple Deliverables: Articles or Books in a Set</title>

   <para>If your documentation project consists of multiple books in a
      <sgmltag>set</sgmltag>, the Main file is the one that contains the
      <sgmltag>set</sgmltag> element. In the following example, the components
     of the set (individual books) are not part of the Main file, but have been
     put into separate document files (<sgmltag>book*.xml</sgmltag>), that are
     then assembled in the Main file using XIncludes. Note that this is not
     specific for a set&mdash;it is mainly a means of modularizing your
     documents. You can also use XIncludes for splitting up books, articles or
     chapters into separate files. For more information, refer to 
     <ulink url="http://www.docbook.org/tdg51/en/html/ch02.html">
    <citetitle>Physical Divisions: Breaking a Document into Separate Files</citetitle>
    </ulink>.</para>
   <example id="ex.daps.main.set">
    <title>Main File of a Set (DocBook 4.x)</title>
    <screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
[...]
&lt;set lang="en"&gt;
 &lt;title&gt;openSUSE Documentation&lt;/title&gt;
 &lt;xi:include href="book_opensuse_startup.xml" 
             xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;
 &lt;xi:include href="book_opensuse_reference.xml" 
             xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;
 &lt;xi:include href="book_security.xml" 
             xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;
 &lt;xi:include href="book_tuning.xml" 
             xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;
 &lt;xi:include href="book_kvm.xml" 
             xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;
&lt;/set&gt;
     </screen>
   </example>
   
   <para> For a documentation <sgmltag>set</sgmltag> (a collection of books), 
    multiple &dc; files can be defined. This allows you to set different parameters 
    and values for individual books in the set. By specifying a different 
    <parameter>ROOTID</parameter> in the &dc; file, you define which 
    book of the set is to be built. You can also specify different layouts or 
    output modes (such as draft or annotated versions) for individual
    books in the same documentation set. 
  </para>

   <para>The following two &dc; files are those of the &dapsquick; and the 
   &dapsuser;&mdash; both guides belong to the same documentation set, but
   use different layouts.
   </para>
   <example id="ex.daps.dc.quick">
    <title>&dc; File For a Book in a Set</title>
    <screen>## Doc config file for &dapsquick;
## See /etc/daps/config for documentation of the settings below

## Mandatory Parameter
MAIN="MAIN.DAPS.xml" <co id="co.daps.dc.quick.main"/>

## Optional Parameters
## ROOTID
## If MAIN contains a set with several books and/or articles, use
## a separate DC-file for each book/article and set ROOTID to
## the id of the respective &lt;book&gt;/&lt;article&gt; element of the document
## This will enable you to build individual books/articles rather than
## the whole set
## See http://www.docbook.org/tdg/en/html/set.html for more information
## on sets
ROOTID="art.daps.quick" <co id="co.daps.dc.quick.rootid"/>

## Custom Stylesheets
## (if not defined the DookBook stylesheets will be used)
##

STYLEROOT="/usr/share/xml/docbook/stylesheet/suse/xslt/flyer" <co id="co.daps.dc.quick.styleroot"/>
#FALLBACK_STYLEROOT="" <co id="co.daps.dc.quick.fbstyleroot"/>
HTML_CSS="./daps.css" <co id="co.daps.dc.quick.css"/>
EPUB_CSS="./daps.css" <xref linkend="co.daps.dc.quick.css" xrefstyle="select:label nopage"/>

</screen>


   <calloutlist>
   <callout arearefs="co.daps.dc.quick.main">
    &daps-co-main;
    </callout>
    <callout arearefs="co.daps.dc.quick.rootid">
      &daps-co-rootid;   
     <para>In this example, <literal>art.daps.quick</literal> is the root ID of 
     the &dapsquick;, contained in <filename>MAIN.DAPS.xml</filename>.
    </para>
     </callout>
   <callout arearefs="co.daps.dc.quick.styleroot">
   &daps-co-styleroot;   
   <para>In this example, the parameter specifies the path to a directory
   with &suse;-specific styleheets for the flyer layout that is used by the
   &dapsquick;.
   </para>  
  </callout>
    <callout arearefs="co.daps.dc.quick.fbstyleroot">
     &daps-co-fbstyleroot;
     <para>In this example, no fallback is specified and the parameter is 
     disabled.</para>
     </callout>
     <callout arearefs="co.daps.dc.quick.css">
     &daps-co-css;
     <para>In this example, custom CSS files are specified for both HTML and 
     &epub; output.</para>
     </callout>
    </calloutlist>
   </example>



   <para>
   If your documentation set contains cross-references between the
   individual books, it is useful to define an additional &dc; file
   (<emphasis>without</emphasis> the <parameter>ROOTID</parameter> parameter).
   Use this &dc; file to generate an HTML output containing all hyperlinks
   between the individual books. Find an example &dc; file in
   <xref linkend="ex.daps.dc.set"/>.
  </para>

   <example id="ex.daps.dc.set">
    <title>&dc; File for a Set</title>
    <screen></screen>
   </example>
  </sect2>
</sect1>
  <sect1 id="sec.daps.user.basics.dirstruct">
  <title>Directory Structure</title>
  <!--taroth 2012-04-26: cave, same contents in DAPS Quick 
  (art_daps_quick.xml, see id=sec.daps.quick.basics.dirstruct)-->
  <!--taroth 2012-04-26: impossible to source out to phrases-decl.ent and 
  include it multiple times (callout IDs!)-->
  <para>
    For &dapsacr; to work out of the box, your XML files and images must be
    organized in a specific structure within your documentation directory.
    <xref linkend="ex.daps.dir.doc"/> shows the required structure including
    the key files for a &dapsacr; documentation project. You can also create
    multiple documentation directories for individual documentation projects,
    but they all need the substructure outlined below.
   </para>

  <example id="ex.daps.dir.doc">
   <title>Directory Structure</title>
   <screen>
     <replaceable>YOUR_DOC_DIR/</replaceable>
    <co id="co.docdir.base"/>
  |--&dc;*<co id="co.docdir.dc"/>
     |--images/
     |   |--src/<co id="co.docdir.img.src"/>
     |   |  |--dia/
     |   |  |--eps/
     |   |  |--fig/
     |   |  |--pdf/
     |   |  |--png/
     |   |  |--svg/
     |--xml/<co id="co.docdir.xml"/> 
     |   |--MAIN*.xml<co id="co.docdir.main"/>
   </screen>
  </example>
  <calloutlist>
   <callout arearefs="co.docdir.base">
    <para>
     <quote>Working directory</quote> for the respective documentation project.
     </para>
   </callout>
   <callout arearefs="co.docdir.dc">
    <para>
      &dc; file defining the documentation project. <!--For more information,
      refer to <xref linkend="sec.daps.user.oview.docproject"/>.--></para>
   </callout>
   <callout arearefs="co.docdir.img.src">
    <para>
      Top-level directory for any original images that you want to use in
      the documentation project. Contains subdirectories for images in
      various formats. Any images to be referenced in the XML sources must
      be put in the respective subdirectories. For information about referencing
      images, refer to <xref linkend="sec.daps.quick.imgs.refer"/>.
     </para>
   </callout>
   <callout arearefs="co.docdir.xml">
    <para>
      Directory holding the XML files for the documentation project. If you
      declare entities in an external file (for example, in
      <filename>entity-decl.ent</filename>), put the entity declaration file
      here, too.</para>
   </callout>
   <callout arearefs="co.docdir.main">
    <para>
      The main file of the documentation project. It contains
      <quote>references</quote> to other books, chapters, appendices, etc.
     </para>
   </callout>
  </calloutlist>
</sect1>
 
   <!--  </sect1>
 <sect1 id="sec.daps.user.oview.dirstruct">
  <title>Directory Structure</title>

  <para>
   For &dapsacr; to work out of the box, your XML files and images should be
   organized within your documentation directory (DOC_DIR) as shown in
  FIXME  <xref linkend="ex.daps.user.dir.doc"/>
  </para>

   <sect2 id="sec.daps.user.oview.dir.build">
   <title>Structure Created by &dapsacr;</title>
   <para>
    When generating the first output format from your documentation project,
    &dapsacr; adds another directory that holds the generated contents. It
    is named <filename>build</filename> (if not set otherwise in &dapsconf-sys;,
    parameter <parameter>BUILD_DIR</parameter>), and is created in your 
    documentation directory, parallel to the <filename>xml</filename> and 
    <filename>images</filename> subdirectory.
   </para>
   <para>
    The <filename>build</filename> directory is structured as follows:
   </para>
   <example id="ex.daps.user.build">
    <title>Build Directory</title>
    <screen><replaceable>YOUR_DOC_DIR</replaceable> <co id="co.docdir"/>
  |-/-<emphasis role="bold">build</emphasis> <co id="co.builddir"/> 
     |-/-<emphasis role="bold"><replaceable>NAME_OF_&dc;1</replaceable></emphasis> <co id="co.builddir.dc"/>    
     |-/-<emphasis role="bold"><replaceable>NAME_OF_&dc;2</replaceable></emphasis> <xref linkend="co.builddir.dc"/>    
     |-/-<emphasis role="bold">.images</emphasis> <co id="co.builddir.img"/>    
     |-/-<emphasis role="bold">.profiled</emphasis> <co id="co.builddir.profiled"/>
     |-/-<emphasis role="bold">.tmp</emphasis> <co id="co.builddir.tmp"/>
    </screen>
   </example>
   <calloutlist>
    <callout arearefs="co.docdir">
     <para>
      <quote>Working directory</quote> for the respective documentation project.
     </para>
    </callout>
    <callout arearefs="co.builddir">
     <para>
      Directory that holds all contents build by &dapsacr;.
     </para>
    </callout>
    <callout arearefs="co.builddir.dc">
     <para>
      For each of your documentation projects, &dapsacr; creates a
      subdirectory, named after the respective &dc; from which you build
      the project. All formats that have been generated from the &dc; (PDF,
      HTML, TXT, &epub; etc.) can be found there. A <filename>log</filename>
      subdirectory stores log files for each output format that has been
      generated by &dapsacr;.
     </para>
    </callout>
    <callout arearefs="co.builddir.img">
     <para>
      Directory holding the images created by &dapsacr;.
     </para>
    </callout>
    <callout arearefs="co.builddir.profiled">
     <para>
      Directory holding the profiled XML sources created by &dapsacr;.
     </para>
    </callout>
    <callout arearefs="co.builddir.tmp">
     <para>
      Directory holding temporary files created by &dapsacr; (for example,
      the FO files).
     </para>
    </callout>
   </calloutlist>
   <tip>
    <title>Creating a New Documentation project from Scratch</title>
    <para>
     &dapsacr; also contains the script <command>daps-init</command>for
     creating a new documentation project from scratch. <remark>taroth
      2011-12-29: add xref later</remark> When using that script, the directory
     structure is automatically set up and an example &dc; file is
     automatically created.
  </para>
   </tip>
  </sect2>-->

 
 
 <!--taroth 2012-04-25: it is recommended to use absolute paths in DC files, but the
 following parameters also allow for relative paths:
 BUILD_DIR
 DAPSROOT
 DOCCONF_DEFAULT
 EPUB_CSS
 FALLBACK_STYLEROOT
 FOP_CONFIG_FILE
 FOP_WRAPPER
 HTML_CSS
 STYLEDEVEL
 STYLEROOT
 XEP_CONFIG_FILE
 XEP_WRAPPER-->

</chapter>
