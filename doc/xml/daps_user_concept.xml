<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet
 href="urn:x-suse:xslt:profiling:docbook45-profile.xsl" 
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd"
[<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter id="cha.daps.user.oview">
 <title>Conceptual Overview</title>
 <abstract>
  <para>
   The &dapslong; (&dapsacr;) is developed as open source software for Linux
   operating systems, licensed under the GPL. &dapsacr; consists of integrated
   tools, stylesheets, scripts, and makefiles that support technical writers
   in the editing, translation and publishing process of DocBook XML files.
   &dapsacr; supports single source publishing into a number of different
   output formats, like PDF, HTML, single HTML, or ePUB. &dapsacr; is suited
   for both small documentation projects (created by a single author), as well
   as comprehensive documentation projects that are created by multiple
   authors in a collaborative effort.
  </para>
 </abstract>
 <sect1 id="sec.daps.user.oview.dbversion">
  <title>Supported DocBook Versions</title>
  <para>
  Currently, &dapsacr; supports only DocBook 4.x. Support for DocBook 5.x is
  planned for version 2.0.
 </para>
 </sect1>
 <sect1 id="sec.daps.user.oview.req">
  <title>System Requirements</title>
  <variablelist>
   <varlistentry>
    <term>RAM, Hard Disk Space, CPU</term>
    <listitem>
     <para>&dapsacr; is a lean solution that does not require a lot of system 
    resources. The disk space consumed rather depends on the amount of your 
    documentation sources and the number of output formats you want to generate.
    If you have multiple or very large documentation projects, a
    machine with multiple-cores is recommended, but is not required.
    </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Software</term>
    <listitem>
     <para>In addition to &dapsacr;, you need the following software:</para>
     <itemizedlist>
      <listitem>
       <para>
      An XML (or text) editor of your choice.
    </para>
      </listitem>
      <listitem>
       <para>For generating PDF output: an FO formatter, like FOP or XEP.</para>
      </listitem>
     </itemizedlist>
     <para>To add version management and workflow mechanisms to your documentations 
     projects, you can install <xref linkend="sec.daps.user.oview.addon" xrefstyle="select:title"/>.</para>
     <para>When installing &dapsacr; as an RPM package (on any SUSE-based system), 
     dependencies on other software packages are automatically resolved during 
     installation. For installing &dapsacr; on other Linux 
     distributions with <literal>configure</literal>, <literal>make</literal>,
     and <literal>make install</literal>, see also 
     <xref linkend="itl.daps.user.inst.other.req"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Directory Structure</term>
    <listitem>
     <para>For &dapsacr; to work out of the box, it requires a certain
      organization of your XML files and images within your documentation
      directory. For details, refer to <xref linkend="ex.daps.user.dir.doc"/>. 
      You can generate the necessary structure with the &dapsacr; 
      initialization script, <command>daps-init</command>. For more information 
      on the initialization script, refer to <xref linkend="cha.daps.user.create"/>.
 </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 id="sec.daps.user.oview.addon">
  <title>Additional Software</title>
  <para>To add further components like version management or a workflow mechanism
   for your documentation projects, use &daps; in combination with the following 
   software:
  </para>
  <itemizedlist>
   <listitem>
    <para> Any version management system, like CVS, Subversion, Mercurial or Git.
      </para>
   </listitem>
   <listitem>
    <para>&dm;, a command-line tool for adding and retrieving meta-information 
     for all files belonging to a documentation project. &dm; is especially useful 
     for larger, collaborative projects where it helps you to keep track of 
     owners (authors) and editing status of all files. However, &dm; requires to 
     host your documentation files on a Subversion server. 
     <remark>taroth 2012-02-07: todo - add xref to separate &dm; guide</remark>
    </para>
   </listitem>
  </itemizedlist>

  <para>
   Together with the software components mentioned above, &dapsacr; can be
   used as a fully-fledged authoring and content management system for documentation
   projects based on DocBook.
  </para>
 </sect1>
 <sect1 id="sec.daps.user.oview.features">
  <title>Key Features</title>
  <para>&dapsacr; supports technical writers in the editing, translation and 
   publishing process of DocBook XML files:</para>
  <variablelist>
   <varlistentry>
    <term>Output Formats</term>
    <listitem>
     <para>&dapsacr; lets you publish your XML sources in the  
      following output formats: HTML, HTML-single, PDF, ePUB, text, 
       man pages, JSP books or MediaWiki. For details, refer to 
       <xref linkend="cha.daps.user.output"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Custom Layouts</term>
    <listitem>
     <para>By default, &dapsacr; uses the DocBook stylesheets to generate the 
     output formats. But &dapsacr; also supports custom layouts for your 
     documentation projects (or for individual books within your set).
     <!--You do not need to define custom stylesheets for <emphasis>all</emphasis> 
     output formats&mdash;in case a custom layout cannot be found, &dapsacr; 
     will automatically fall back to the DocBook stylesheets.--> </para>
     <para>Apart from that, &dapsacr; allows you to change individual layout
     parameters by passing string parameters to xsltproc for HTML or PDF builds
     &mdash;without even touching the stylesheets. For details about custom 
     layouts, refer to <xref linkend="cha.daps.user.layout"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Editor Macros</term>
    <listitem>
     <para>For Emacs, &dapsacr; includes a set of macros for easy insertion of 
     complex DocBook elements like <sgmltag>variablelist</sgmltag>, 
     <sgmltag>figure</sgmltag>, <sgmltag>table</sgmltag> or <sgmltag>indexterm</sgmltag>. 
     Instead of inserting the child elements successively, you will get a 
     <quote>skeleton</quote> that includes all required child elements and 
     is ready to be filled with contents. For details, refer to 
     <xref linkend="cha.daps.user.edit"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Validating</term>
    <listitem>
     <para>Whereas all <remark>taroth 2012-02-20: all?? or most??</remark>XML 
     editors can check if your XML file is well-formed, validating XML files
     might require checking other XML files, too (for example, if you have 
     <sgmltag>xref</sgmltag> elements that point to a linkend located in another
     XML file). With &dapsacr;, you can check validity of all files that belong
     to a documentation project with a single command. For details, 
     refer to <xref linkend="cha.daps.user.edit"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Spell Check</term>
    <listitem>
     <para>&dapsacr; supports spell checking of your XML sources with aspell from 
     the command line. <remark>taroth 2012-02-20: DEVs, is the following correct?</remark>
     Depending on the XML editor you use, you can also integrate a custom aspell
     dictionary into your editor. For details, refer to 
     <xref linkend="cha.daps.user.edit"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Link Checker</term>
    <listitem>
     <para>To make sure that all links in your XML sources are still available 
     (and do not give a <literal>404</literal> error or similar), &dapsacr; also
     includes a link checker (based on <literal>checkbot</literal>). Use it 
     to create a report of all links that caused some kind of warning or error.
     For details, refer to <xref linkend="cha.daps.user.edit"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Image Handling</term>
    <listitem>
     <para>&dapsacr; provides sophisticated image handling support. For example, 
     it can transform images referenced in your XML files into different
     formats, list all source images referenced in your XML files, list any 
     missing images or list the <emphasis>generated</emphasis> images used 
     for the various output formats. You can also forward those lists to your 
     preferred image viewer to conveniently browse through the images, or check
     if all image names are unique. For details, refer to 
     <xref linkend="cha.daps.user.edit"/> and <xref linkend="cha.daps.user.adv"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Profiling (Conditional Text)</term>
    <listitem>
     <para>If you have similar products to document and want to generate 
      multiple documentation variants from your XML files, you can do so
      with the help of conditional text (or <literal>profiling</literal>, as it 
      is called in DocBook). For example, you can profile certain parts of your 
      XML texts for different (processor) architectures, operating systems, 
      vendors or target groups. Use the <literal>PROF*</literal> keys defined 
      in &dapsconf; to define which information should be included
      in the output. For details, refer to <xref linkend="cha.daps.user.adv"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Dynamic Product Names and Numbers</term>
    <listitem>
     <para>&dapsacr; allows to set product name and product number dynamically. 
     This enables you to use the same XML sources for different products. If you 
     use the entities &amp;productname; and &amp;productnumber; in your XML
     sources, &dapsacr; will automatically use the values 
     defined in the  <sgmltag>productname</sgmltag> and <sgmltag>productversion</sgmltag>
     elements within the <sgmltag>bookinfo</sgmltag> or
     <sgmltag>articleinfo</sgmltag>. For details, refer to 
     <xref linkend="cha.daps.user.adv"/>.   
  </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Review and Translation Processes</term>
    <listitem>
     <para>&dapsacr; offers a numbers of features to simplify review and 
     translation processes. For example, you can insert 
     <sgmltag>remark</sgmltag> elements in the source code and generate an output 
     format that either includes or suppresses these remarks. You can also choose
     to generate preview versions of your documentation with a <literal>DRAFT</literal>
     watermark appearing on the HTML or PDF output. If you use &dm; in addition to
     &dapsacr;, you can <quote>flag</quote> your XML files with meta-information
     like workflow status (for example, <literal>editing</literal>
     or <literal>proofed</literal>). &dapsacr; offers an option to also display
     this meta-information in the generated output. For handing over your files 
     to review or translation, &dapsacr; can create tarballs of the XML
     sources and graphics. Alternatively, transform all files 
     included in your <sgmltag>book</sgmltag> or <sgmltag>set</sgmltag> into an
     XML bigfile. <!--If you have a huge documentation project of which only individual
     books or files are to be translated, you can mark them for translation
     with &dm;. The command <command>daps locdrop</command> will automatically 
     sort and pack those files into s separate tarball.--><remark>taroth 2012-03-02:
     todo - add link to one or more chapters, if appropriate</remark>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Packaging and Deployment</term>
    <listitem>
     <para>For deploying the documentation as RPM packages and integrating it 
     into KDE and GNOME desktop environments as well as into Web user interfaces
     (via JSP), &dapsacr; offers a number of options to produce the corresponding
     output: For example, you can create source packages, HTML tarballs, color 
     PDFs and desktop and document files with the <command>daps package-*</command>
     commands.<remark>taroth 2012-03-02: todo - add link to deployment chapter, 
     if appropriate</remark>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 id="sec.daps.user.oview.concepts">
  <title>&dapsacr; Configuration</title>

  <para>
   &dapsacr; can be customized to a large degree by setting options in various
   places:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     &dapsconf; (system-wide configuration file)
    </para>
   </listitem>
   <listitem>
    <para>
     &dapsconfu; (user-specific configuration file)
    </para>
   </listitem>
   <listitem>
    <para>
     &dc; (doc config) file of the documentation project (for settings specific 
     to a document or documentation set)
    </para>
   </listitem>
   <listitem>
    <para>
     on the fly at the command line by specifing options to a
     <command>daps</command> command.
    </para>
   </listitem>
  </itemizedlist>

  <para>
   The configuration file &dapsconf; lists all settings that can be
   configured, including a short description for each option. Settings are
   always defined as <option>KEY="VALUE"</option> pairs.
  </para>
 </sect1>
 <sect1 id="sec.daps.user.oview.docproject">
  <title>Defining Documentation Projects</title>

  <para>The following files are the key files for defining a documentation
   project so that it can be processed by &dapsacr;:</para>

  <variablelist>
   <varlistentry>
    <term>
     <xref linkend="sec.daps.user.oview.docproject.main" xrefstyle="select:title"/>
    </term>
    <listitem>
     <para>An XML file containing the <quote>starting point</quote> (the 
     highest-level object) of your documentation project (for example, 
     <sgmltag>book</sgmltag> or <sgmltag>article</sgmltag>). 
    For larger documentation projects, it is good practice to name the file 
    <filename>MAIN-<replaceable>PROJECTNAME</replaceable>.xml</filename>, 
    but you can use any other filename as well.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <xref linkend="sec.daps.user.oview.docproject.dc" xrefstyle="select:title"/>
    </term>
    <listitem>
     <para>
      A configuration file defining a number of parameters for your
      documentation project (like the Main file, layout variants, or which
      profiling information to use).
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <sect2 id="sec.daps.user.oview.docproject.main">
   <title>Main File</title>
   <para>Find a simple example in <xref linkend="ex.daps.main.book"/>.</para>
   <example id="ex.daps.main.book">
    <title>Main File of a Book (DocBook 4.x)</title>
    <screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
[...]

&lt;book id="book.template" lang="en"&gt;
 &lt;bookinfo&gt;
  &lt;title&gt;Book Template&lt;/title&gt;
  &lt;subtitle&gt;generated by daps&lt;/subtitle&gt;
  &lt;productname&gt;Book Template&lt;/productname&gt;
   &lt;legalnotice&gt;
   &lt;para&gt;
    &lt;ulink url="http://www.gnu.org/licenses/fdl-1.3-standalone.html"&gt;
    GNU Free Documentation License&lt;/ulink&gt;
   &lt;/para&gt;
  &lt;/legalnotice&gt;
 &lt;/bookinfo&gt;
 &lt;chapter id="cha.template.examples"&gt;
  &lt;title&gt;Examples: the most commonly used DocBook XML constructs&lt;/title&gt;
  &lt;abstract&gt;
   &lt;para&gt;
    You may use this file as a template. for a complete reference on DocBook
    see &lt;citetitle&gt;&amp;tdg;&lt;/citetitle&gt; at &lt;ulink
     url="http://www.docbook.org/tdg/en/html/docbook.html"/&gt;.
   &lt;/para&gt;
  &lt;/abstract&gt;
  &lt;para&gt;
   I am a paragraph in a chapter.
  &lt;/para&gt;
  &lt;sect1 id="sec.template.examples.lists"&gt;
   &lt;title&gt;Lists&lt;/title&gt;
   &lt;para&gt;
    This is a section 1.
   &lt;/para&gt;
  &lt;/sect1&gt;
 &lt;/chapter&gt;
&lt;/book&gt;
</screen>
   </example>
   <para>If your documentation project consists of multiple books in a  
   <sgmltag>set</sgmltag>, the main file is the one that contains the 
   <sgmltag>set</sgmltag> element. In the following example, the components of 
   the set (individual books) are not part of the Main file, but have been put
   into separate document files (<sgmltag>book*.xml</sgmltag>), that are then
   assembled in the Main file using XIncludes. Note that this is is not specific 
   for a set but mainly a means of modularizing your documents. You can use the same
   modularization for books by splitting them into individual chapters files (or
   split chapters into a number of section files).
   </para>
   <example id="ex.daps.main.set">
    <title>Main File of a Set (DocBook 4.x)</title>
    <screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
[...]

&lt;set lang="en"&gt;
 &lt;title&gt;openSUSE Documentation&lt;/title&gt;
 &lt;xi:include href="book_opensuse_startup.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;
 &lt;xi:include href="book_opensuse_reference.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;
 &lt;xi:include href="book_security.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;
 &lt;xi:include href="book_tuning.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;
 &lt;xi:include href="book_kvm.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;
&lt;/set&gt;
    </screen>
   </example>
  </sect2>

  <sect2 id="sec.daps.user.oview.docproject.dc">
   <title>&dc; (Doc Config) File</title>
   <para>Of the multiple parameters that can be set in the &dc; file, the only one 
  required is <parameter>MAIN</parameter>, pointing to the XML file that you
  want to process. Suppose you want to publish a whitepaper from DocBook XML 
  with the default DocBook stylesheets, the following example shows a very basic
  &dc; file that you could use:</para>
   <example id="ex.daps.dc.basic">
    <title>A Very Basic &dc; File</title>
    <screen>## ---------------------------- 
## Doc Config File for DAPS
## DocBook Authoring and Publishing Suite
## ----------------------------
##
## Basics
MAIN="my_whitepaper.xml" 
 </screen>
   </example>
   <para>
  The example above is a bit artificial though&mdash;if you do not want to 
   specify any further parameters, you can also set the <parameter>MAIN</parameter>
   parameter on the command line and do completely without &dc;.
   <remark>taroth 2012-02-10: add xref to usage chapter</remark>
   </para>
   <para> For a documentation <sgmltag>set</sgmltag> (a collection of books), 
   multiple &dc; files can be defined. This allows you to set both
    different parameters or different values for individual books in the set:
    For example, by refering a different <parameter>ROOTID</parameter> in a
    &dc; file, you define which book of the set is to be built. Another
    example would be to specify different output modes (such as draft or
    annotated) for individual books in the same documentation set.
  </para>
   <para>The following example shows the &dc; file of the &dapsuser;. </para>
   <example id="ex.daps.dc.user">
    <title>&dc; File For a Book in a Set</title>
    <screen>## ---------------------------- 
## Doc Config File for DAPS
## DocBook Authoring and Publishing Suite
## ----------------------------
##
## Basics
MAIN="MAIN.DAPS.xml" <co id="co.daps.dc.main"/>
ROOTID="book.daps.user" <co id="co.daps.dc.rootid"/>

## enable sourcing
export DOCCONF=$BASH_SOURCE <co id="co.daps.dc.source"/>
  </screen>
   </example>
<!--## Profiling
PROFOS="osuse" <co id="co.daps.dc.profile"/>
PROFARCH="x86;amd64;em64t" <xref linkend="co.daps.dc.profile"/>

## stylesheet location
STYLEROOT="/usr/share/xml/docbook/stylesheet/suse" <co id="co.daps.dc.styleroot"/>
HTML_CSS="/usr/share/xml/docbook/stylesheet/suse/html/susebooks.css" <co id="co.daps.dc.css"/>
EPUB_CSS="/usr/share/xml/docbook/stylesheet/suse/epub/susebooks.css" <xref linkend="co.daps.dc.css"/>
-->
   <calloutlist>
    <callout arearefs="co.daps.dc.main">
     <para>
     Mandatory parameter. Sets the main file that contains
     <quote>references</quote> to other books, chapters, appendices, etc. 
    </para>
    </callout>
    <callout arearefs="co.daps.dc.rootid">
     <para>
     Optional parameter. Defines the root ID of the element to be used for
     creating an output format. Usually, you define the root ID of a
     <sgmltag>book</sgmltag> or <sgmltag>article</sgmltag>
     element here.
    </para>
    </callout>
     <!--<callout arearefs="co.daps.dc.profile">
      <para>
      Optional parameters. If you have similar products to document and want
      to generate documentation variants from your XML files, you can do so
      with the help of conditional text (or profiling, as it is called in
      DocBook). To profile your output for different (processor) architectures
      (like x86, ppc) or operating systems, use the
      <parameter>PROFARCH</parameter>, <parameter>PROFCONDITION</parameter>,
      <parameter>PROFOS</parameter>, or <parameter>PROFVENDOR</parameter>
      parameter, respectively to define which information should be included
      in the generated output.
      
      <remark condition="generic">
       2012-02-13 - fs: Add link to profiling section
      </remark>

      </para>
     </callout>
     <callout arearefs="co.daps.dc.styleroot">
      <para>
     Optional parameter. If the parameter is not specified, &dapsacr; will 
     use the default DocBook stylesheets for production. With 
     <parameter>STYLEROOT</parameter> specify the absolute path to the directory
      containing the custom stylesheets. It must have the same
      directory structure as the original DocBook stylesheet root
      directory, but does not need to contain stylesheets for all output
      formats. If custom stylesheets are not found, &dapsacr; will automatically
      fall back to the DocBook stylesheets.
     </para>
     </callout>
     <callout arearefs="co.daps.dc.css">
      <para>
     Optional parameters. If they are not specified, &dapsacr; will 
     use the default DocBook stylesheets for production of HTML or ePUB. 
     With <parameter>HTML_CSS</parameter> or <parameter>EPUB_CSS</parameter>, 
     specify the abolute path to the respective CSS file. 
     </para>
     </callout>-->
    <callout arearefs="co.daps.dc.source">
     <para>
     Optional line. You only need to add this line if you want to be able to 
     source &dc; files on the Bash with &dapsacr;. Sourcing a &dc; file (formerly 
     called <literal>ENV</literal> file) was necessary to work with the 
     documentation environment provided by &susedoc; (&dapsacr;' predecessor).
    </para>
    </callout>
   </calloutlist>
   <para>
   If your documentation set contains cross-references between the
   individual books, it is useful to define an additional &dc; file
   (<emphasis>without</emphasis> the <parameter>ROOTID</parameter> parameter).
   Use this &dc; file to generate an HTML output containing all hyperlinks
   between the individual books. Find an example &dc; file in
   <xref linkend="ex.daps.dc.set"/>.
  </para>

   <example id="ex.daps.dc.set">
    <title>&dc; File for a Set</title>
    <screen>## ---------------------------- 
## Doc Config File for DAPS
## DocBook Authoring and Publishing Suite
## ----------------------------
##
## Basics
MAIN="MAIN.DAPS.xml" 


## enable sourcing
export DOCCONF=$BASH_SOURCE</screen>
   </example>
<!--## Profiling
PROFOS="osuse"
PROFARCH="x86;amd64;em64t" 

## stylesheet location
STYLEROOT="/usr/share/xml/docbook/stylesheet/suse" 
HTML_CSS="/usr/share/xml/docbook/stylesheet/suse/html/susebooks.css" 
EPUB_CSS="/usr/share/xml/docbook/stylesheet/suse/epub/susebooks.css" 
-->
  </sect2>
 </sect1>
 <sect1 id="sec.daps.user.oview.dirstruct">
  <title>Directory Structure</title>

  <para>
   For &dapsacr; to work out of the box, your XML files and images should be
   organized within your documentation directory (DOC_DIR) as shown in
   <xref linkend="ex.daps.user.dir.doc"/>.
  </para>

  <sect2 id="sec.daps.user.oview.dir.doc">
   <title>Documentation Source Files</title>
   <para>
    <xref linkend="ex.daps.user.dir.doc"/> also shows the key files of a
    documentation project. The directories are printed in bold.
   </para>
   <remark>toms 2012-02-08: IMHO, it looks better to have the callouts
      *after* the term. This avoids unaligned characters (as the callout
    is usually a bit wider)</remark>
   <example id="ex.daps.user.dir.doc">
    <title>Directory Structure</title>
    <screen><replaceable>YOUR_DOC_DIR</replaceable> <co id="co.docdir.base"/>
  |--&dc;* <co id="co.docdir.dc"/>
  |--<emphasis role="bold">images</emphasis> <co id="co.docdir.img"/> 
     |--<emphasis role="bold">src</emphasis> <co id="co.docdir.img.src"/>
        |--<emphasis role="bold">dia</emphasis>
        |--<emphasis role="bold">eps</emphasis>
        |--<emphasis role="bold">fig</emphasis>
        |--<emphasis role="bold">pdf</emphasis>
        |--<emphasis role="bold">png</emphasis>
        |--<emphasis role="bold">svg</emphasis>
  |--<emphasis role="bold">xml</emphasis> <co id="co.docdir.xml"/> 
     |--MAIN*.xml <co id="co.docdir.main"/>
    </screen>
   </example>
   <calloutlist>
    <callout arearefs="co.docdir.base">
     <para>
      <quote>Working directory</quote> for the respective documentation project.
     </para>
    </callout>
    <callout arearefs="co.docdir.dc">
     <para>
      &dc; file defining the documentation project. For more information,
      refer to <xref linkend="sec.daps.user.oview.docproject"/>.
     </para>
    </callout>
<!--<callout arearefs="co.daps.user.dir.img">
     <para>Top-level directory for the images used in the documentation project.
      </para>
    </callout>-->
    <callout arearefs="co.docdir.img.src">
     <para>
      Top-level directory for any original images that you want to use in
      the documentation project. Contains subdirectories for images in
      various formats. Any images to be referenced in the XML sources must
      be put in the respective subdirectories.
      <remark>taroth 2012-02-01: add xref to 
     section about using images (how to reference them -> path!)</remark>
     </para>
    </callout>
    <callout arearefs="co.docdir.xml">
     <para>
      Directory holding the XML files for the documentation project. If you
      declare entities in an external file (for example, in
      <filename>entity-decl.ent</filename>), put the entity declaration file
      here, too.</para>
    </callout>
    <callout arearefs="co.docdir.main">
     <para>
      The main file of the documentation project. It contains
      <quote>references</quote> to other books, chapters, appendices, etc.
     </para>
    </callout>
   </calloutlist>
  </sect2>

  <sect2 id="sec.daps.user.oview.dir.build">
   <title>Structure Created by &dapsacr;</title>
   <para>
    When generating the first output format from your documentation project,
    &dapsacr; adds another directory that holds the generated contents. It
    is named <filename>build</filename> (if not set otherwise in &dapsconf;,
    parameter <parameter>BUILD_DIR</parameter>), and is created in your 
    documentation directory, parallel to the <filename>xml</filename> and 
    <filename>images</filename> subdirectory.
   </para>
   <para>
    The <filename>build</filename> directory is structured as follows:
   </para>
   <example id="ex.daps.user.build">
    <title>Build Directory</title>
    <screen><replaceable>YOUR_DOC_DIR</replaceable> <co id="co.docdir"/>
  |--<emphasis role="bold">build</emphasis> <co id="co.builddir"/> 
     |--<emphasis role="bold"><replaceable>NAME_OF_&dc;1</replaceable></emphasis> <co id="co.builddir.dc"/>    
     |--<emphasis role="bold"><replaceable>NAME_OF_&dc;2</replaceable></emphasis> <xref linkend="co.builddir.dc"/>    
     |--<emphasis role="bold">.images</emphasis> <co id="co.builddir.img"/>    
     |--<emphasis role="bold">.profiled</emphasis> <co id="co.builddir.profiled"/>
     |--<emphasis role="bold">.tmp</emphasis> <co id="co.builddir.tmp"/>
    </screen>
   </example>
   <calloutlist>
    <callout arearefs="co.docdir">
     <para>
      <quote>Working directory</quote> for the respective documentation project.
     </para>
    </callout>
    <callout arearefs="co.builddir">
     <para>
      Directory that holds all contents build by &dapsacr;.
     </para>
    </callout>
    <callout arearefs="co.builddir.dc">
     <para>
      For each of your documentation projects, &dapsacr; creates a
      subdirectory, named after the respective &dc; from which you build
      the project. All formats that have been generated from the &dc; (PDF,
      HTML, TXT, ePUB etc.) can be found there. A <filename>log</filename>
      subdirectory stores log files for each output format that has been
      generated by &dapsacr;.
     </para>
    </callout>
    <callout arearefs="co.builddir.img">
     <para>
      Directory holding the images created by &dapsacr;.
     </para>
    </callout>
    <callout arearefs="co.builddir.profiled">
     <para>
      Directory holding the profiled XML sources created by &dapsacr;.
     </para>
    </callout>
    <callout arearefs="co.builddir.tmp">
     <para>
      Directory holding temporary files created by &dapsacr; (for example,
      the FO files).
     </para>
    </callout>
   </calloutlist>
   <tip>
    <title>Creating a New Documentation project from Scratch</title>
    <para>
     &dapsacr; also contains the script <command>daps-init</command>for
     creating a new documentation project from scratch. <remark>taroth
      2011-12-29: add xref later</remark> When using that script, the directory
     structure is automatically set up and an example &dc; file is
     automatically created.
  </para>
   </tip>
  </sect2>
 </sect1>
</chapter>
