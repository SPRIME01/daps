<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet
 href="urn:x-suse:xslt:profiling:docbook45-profile.xsl" 
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd"
[<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter id="cha.daps.user.features">
 <title>Conceptual Overview</title>
 
 <sect1 id="sec.daps.user.dbversions">
  <title>Supported DocBook Versions</title>
  <para>&daps-db-versions;</para>
 </sect1>
 <sect1 id="sec.daps.user.features">
 <title>Key Features</title>
  <para>&dapsacr; supports technical writers in the editing, translation and 
   publishing process of DocBook XML files:</para>
  <variablelist>
   <varlistentry>
    <term>Output Formats</term>
    <listitem>
     <para>&dapsacr; lets you publish your XML sources in a number of different 
     output formats, for example: HTML, HTML-single, PDF, &epub;, &webh;, text, 
       man pages, or MediaWiki. For details, refer to 
       <xref linkend="cha.daps.user.output"/>.<remark>taroth 2012-04-24: decide 
       where to point to: book chapter or QS?</remark>
       </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Custom Layouts</term>
    <listitem>
     <para>By default, &dapsacr; uses the DocBook stylesheets to generate the 
     output formats. But &dapsacr; also supports custom layouts for your 
     documentation projects (or for individual books within your set).
     <!--You do not need to define custom stylesheets for <emphasis>all</emphasis> 
     output formats&mdash;in case a custom layout cannot be found, &dapsacr; 
     will automatically fall back to the DocBook stylesheets.--> </para>
     <para>Apart from that, &dapsacr; allows you to change individual layout
     parameters by passing string parameters to xsltproc for HTML or PDF builds
     &mdash;without even touching the stylesheets. For details about custom 
     layouts, refer to <xref linkend="cha.daps.user.layout"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Editor Macros</term>
    <listitem>
     <para>For Emacs, &dapsacr; includes a set of macros for easy insertion of 
     complex DocBook elements like <sgmltag>variablelist</sgmltag>, 
     <sgmltag>figure</sgmltag>, <sgmltag>table</sgmltag> or <sgmltag>indexterm</sgmltag>. 
     Instead of inserting the child elements successively, you will get a 
     <quote>skeleton</quote> that includes all required child elements and 
     is ready to be filled with contents. For details, refer to 
     <xref linkend="cha.daps.user.edit"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Validating</term>
    <listitem>
     <para>Validating XML files within in a book or set exceeds validation of the
     current XML file, as links (<sgmltag>xref</sgmltag> elements) or XIncludes 
     need to be resolved, too. With &dapsacr;, you can check validity of all 
     files that belong to a documentation project with a single command. For details, 
     refer to <xref linkend="cha.daps.user.edit"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Spell Check</term>
    <listitem>
     <para>&dapsacr; supports spell checking of your XML sources with aspell from 
     the command line. <remark>taroth 2012-02-20: DEVs, is the following correct?</remark>
     Depending on the XML editor you use, you can also integrate a custom aspell
     dictionary into your editor. For details, refer to 
     <xref linkend="cha.daps.user.edit"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Link Checker</term>
    <listitem>
     <para>To make sure that all links in your XML sources are still available 
     (and do not give a <literal>404</literal> error or similar), &dapsacr; also
     includes a link checker (based on <literal>checkbot</literal>). Use it 
     to create a report of all links that caused some kind of warning or error.
     For details, refer to <xref linkend="cha.daps.user.edit"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Image Handling</term>
    <listitem>
     <para>&dapsacr; provides sophisticated image handling support. For example, 
     it can transform images referenced in your XML files into different
     formats, list all source images referenced in your XML files, list any 
     missing images or list the <emphasis>generated</emphasis> images used 
     for the various output formats. You can also forward those lists to your 
     preferred image viewer to conveniently browse through the images, or check
     if all image names are unique. For details, refer to 
     <xref linkend="cha.daps.user.img"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Profiling (Conditional Text)</term>
    <listitem>
     <para>If you have similar products to document and want to generate 
      multiple documentation variants from your XML files, you can do so
      with the help of conditional text (or <literal>profiling</literal>, as it 
      is called in DocBook). For example, you can profile certain parts of your 
      XML texts for different (processor) architectures, operating systems, 
      vendors or target groups. Use the <literal>PROF*</literal> keys defined 
      in &dapsconf-sys; to define which information should be included
      in the output. For details, refer to <xref linkend="cha.daps.user.edit"/>.</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Dynamic Product Names and Numbers</term>
    <listitem>
     <para>&dapsacr; allows to set product name and product number dynamically. 
     This enables you to use the same XML sources for different products. If you 
     use the entities &amp;productname; and &amp;productnumber; in your XML
     sources, &dapsacr; will automatically use the values 
     defined in the  <sgmltag>productname</sgmltag> and <sgmltag>productversion</sgmltag>
     elements within the <sgmltag>bookinfo</sgmltag> or
     <sgmltag>articleinfo</sgmltag>. For details, refer to 
     <xref linkend="cha.daps.user.edit"/>.   
  </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Review and Translation Processes</term>
    <listitem>
     <para>&dapsacr; offers a numbers of features to simplify review and 
     translation processes. For example, you can insert 
     <sgmltag>remark</sgmltag> elements in the source code and generate an output 
     format that either includes or suppresses these remarks. You can also 
     generate preview versions of your documentation with a <literal>DRAFT</literal>
     watermark appearing on the HTML or PDF output. If you use &dm; in addition to
     &dapsacr;, you can <quote>flag</quote> your XML files with meta-information
     (like workflow status). &dapsacr; offers an option to also display
     this meta-information in the generated output. For handing over your files 
     to review or translation, &dapsacr; can create tarballs of the XML
     sources and graphics. Alternatively, transform all files 
     included in your <sgmltag>book</sgmltag> or <sgmltag>set</sgmltag> into an
     XML bigfile. <!--If you have a huge documentation project of which only individual
     books or files are to be translated, you can mark them for translation
     with &dm;. The command <command>daps locdrop</command> will automatically 
     sort and pack those files into s separate tarball.--><remark>taroth 2012-03-02:
     todo - add link to one or more chapters, if appropriate</remark>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Packaging and Deployment</term>
    <listitem>
     <para>For deploying the documentation as RPM packages and integrating it 
     into KDE and GNOME desktop environments as well as into Web user interfaces
     (via JSP), &dapsacr; offers a number of options to produce the corresponding
     output: For example, you can create source packages, HTML tarballs, color 
     PDFs and desktop and document files with the <command>daps package-*</command>
     commands.<remark>taroth 2012-03-02: todo - add link to deployment chapter, 
     if appropriate</remark>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 id="sec.daps.user.config">
  <title>&dapsacr; Configuration</title>
 &daps-config;
 </sect1>
 <sect1 id="sec.daps.user.basics">
  <title>Defining Documentation Projects</title>
  <para>
   The easiest way to set up a new documentation project from scratch is to
   use the &dapsacr; initialization script <command>daps-init</command>. For
   instructions how to do so, refer to <xref linkend="pro.daps.init"/>. The
   script automatically creates the <xref linkend="sec.daps.user.basics.files" 
   xrefstyle="select:title"/> and <xref linkend="sec.daps.user.basics.dirstruct" 
   xrefstyle="select:title"/> that you need to get started with  &dapsacr;.
  </para>
  <sect2 id="sec.daps.user.basics.files">
   <title>Key Files</title>
   &daps-key-files;
   <sect3 id="sec.daps.user.basics.files.main">
    <title>Main File</title>
    <para>Find a simple example in <xref linkend="ex.daps.main.book"/>.</para>
    <example id="ex.daps.main.book">
     <title>Main File of a Book (DocBook 4.x)</title>
     <screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
[...]

&lt;book id="book.template" lang="en"&gt;
 &lt;bookinfo&gt;
  &lt;title&gt;Book Template&lt;/title&gt;
  &lt;subtitle&gt;generated by daps&lt;/subtitle&gt;
  &lt;productname&gt;Book Template&lt;/productname&gt;
   &lt;legalnotice&gt;
   &lt;para&gt;
    &lt;ulink url="http://www.gnu.org/licenses/fdl-1.3-standalone.html"&gt;
    GNU Free Documentation License&lt;/ulink&gt;
   &lt;/para&gt;
  &lt;/legalnotice&gt;
 &lt;/bookinfo&gt;
 &lt;chapter id="cha.template.examples"&gt;
  &lt;title&gt;Examples: the most commonly used DocBook XML constructs&lt;/title&gt;
  &lt;abstract&gt;
   &lt;para&gt;
    You may use this file as a template. for a complete reference on DocBook
    see &lt;citetitle&gt;&amp;tdg;&lt;/citetitle&gt;, available at 
    &lt;ulink url="http://www.docbook.org/tdg/en/html/docbook.html"/&gt;.
   &lt;/para&gt;
  &lt;/abstract&gt;
  &lt;para&gt;
   I am a paragraph in a chapter.
  &lt;/para&gt;
  &lt;sect1 id="sec.template.examples.lists"&gt;
   &lt;title&gt;Lists&lt;/title&gt;
   &lt;para&gt;
    This is a section 1.
   &lt;/para&gt;
  &lt;/sect1&gt;
 &lt;/chapter&gt;
&lt;/book&gt;
</screen>
    </example>
    <para>The Main file of an article can look very similar, except that an 
    article must not contain chapter elements, but is structured by means of section
     elements (either <sgmltag>section</sgmltag>, or <sgmltag>sect1</sgmltag>,
      <sgmltag>sect2</sgmltag> etc.): </para>
    <example id="ex.daps.main.art">
     <title>Main File of an Article (DocBook 4.x)</title>
     <screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
[...]

&lt;article lang="en" id="art.template"&gt;
 &lt;title&gt;Article Template&lt;/title&gt;
 &lt;subtitle&gt;generated by DAPS&lt;/subtitle&gt;
 &lt;articleinfo&gt;
  &lt;releaseinfo&gt;Version 0.1&lt;/releaseinfo&gt;
  &lt;releaseinfo&gt;Revision: 0&lt;/releaseinfo&gt;
  &lt;releaseinfo&gt;
   Build Date: &lt;?dbtimestamp format="B d, Y"?&gt;
  &lt;/releaseinfo&gt;
  &lt;legalnotice&gt;
   &lt;para&gt;
    &lt;ulink url="http://www.gnu.org/licenses/fdl-1.3-standalone.html"&gt;
    GNU Free Documentation License&lt;/ulink&gt;
   &lt;/para&gt;
  &lt;/legalnotice&gt;
 &lt;/articleinfo&gt;
 &lt;abstract&gt;
  &lt;para&gt;
   You may use this file as a template. For a complete DocBook reference
   see &lt;citetitle&gt;&tdg;&lt;/citetitle&gt;, available at 
   &lt;ulink url="http://www.docbook.org/tdg/en/html/docbook.html"/&gt;.
  &lt;/para&gt;
 &lt;/abstract&gt;
 &lt;sect1 id="sec.template.examples"&gt;
  &lt;title&gt;Examples: The most commonly used DocBook XML constructs&lt;/title&gt;
  &lt;para&gt;
   I am a paragraph in a section 1.
  &lt;/para&gt;
  &lt;sect2 id="sec.template.examples.lists"&gt;
   &lt;title&gt;Lists&lt;/title&gt;
   &lt;para&gt;
    This section 2 showcases 3 types of lists.
   &lt;/para&gt;
   [...]
  &lt;/sect2&gt;
 &lt;/sect1&gt;
&lt;/article&gt;
     </screen>
    </example>
    <para>If your documentation project consists of multiple books in a
      <sgmltag>set</sgmltag>, the Main file is the one that contains the
      <sgmltag>set</sgmltag> element. In the following example, the components
     of the set (individual books) are not part of the Main file, but have been
     put into separate document files (<sgmltag>book*.xml</sgmltag>), that are
     then assembled in the Main file using XIncludes. Note that this is not
     specific for a set but mainly a means of modularizing your documents. You
     can use the same modularization for books by splitting them into individual
     chapter files (or split chapters into a number of section files). The same
    is true for articles which can be split into a number of section files.</para>
    <example id="ex.daps.main.set">
     <title>Main File of a Set (DocBook 4.x)</title>
     <screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
[...]
&lt;set lang="en"&gt;
 &lt;title&gt;openSUSE Documentation&lt;/title&gt;
 &lt;xi:include href="book_opensuse_startup.xml" 
             xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;
 &lt;xi:include href="book_opensuse_reference.xml" 
             xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;
 &lt;xi:include href="book_security.xml" 
             xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;
 &lt;xi:include href="book_tuning.xml" 
             xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;
 &lt;xi:include href="book_kvm.xml" 
             xmlns:xi="http://www.w3.org/2001/XInclude"/&gt;
&lt;/set&gt;
     </screen>
    </example>
    <para>For more information about splitting a document into separate files, 
    refer to <ulink url="http://www.docbook.org/tdg51/en/html/ch02.html">
    <citetitle>Physical Divisions: Breaking a Document into Separate Files</citetitle>
    </ulink>.</para>
   </sect3>

  <sect3 id="sec.daps.user.oview.docproject.dc">
   <title>&dc; (&dclong; File)</title>
   <para>Depending on the setup of your documentation project, you can have one 
   or multiple &dclong; for your documentation project. Usually, you create
   one &dc; file per book or article&mdash;to specify a number of parameters 
   such as the Main file or which layout to use.</para>
   <para>For a list of all parameters that are available for &dapsacr;, refer to
   <filename>&dapsconf-sys;</filename>. Usually, you only include a small number
   of them in the &dc; file&mdash;those that are specific for the respective
   book, article or set. Of the multiple parameters that can be set in the &dc; 
   file, the only one required is <parameter>MAIN</parameter>, 
   pointing to the XML file that you want to process.</para>
   <tip>
     <title>No &dc; File</title>
     <para>For very small or basic projects where you do not want to specify
       any parameters (apart from the Main file), you can also do without
       &dc; file. In this case, you must specify the <parameter>MAIN</parameter>
       parameter on the command line, for example:</para>
       <screen>daps -m xml/MAIN-daps-example.xml html</screen>
   </tip>
   <para>The following examples of &dc; files demonstrate some key parameters 
   that can be defined there, depending on your use case.</para>
   <para>Suppose you want to publish a whitepaper from DocBook XML 
  with the default DocBook stylesheets, the following example shows a very basic
  &dc; file that you could use:</para>
  <example id="ex.daps.user.dc.art.simple">
   <title>Basic &dc; for an Article</title>
    <screen>##
## Doc config file for a whitepaper article
## See /etc/daps/config for documentation of the settings below
##

## Mandatory Parameter
MAIN="my_whitepaper.xml"
</screen>
  </example>
    <para>The example above is a bit artificial, though&mdash;if you do not
     need to specify any further parameters, you would just use the
     <option>-m</option> to define the Main file on the command line (and do
     completely without &dc; file).</para> 
        
   <para> For a documentation <sgmltag>set</sgmltag> (a collection of books), 
    multiple &dc; files can be defined. This allows you to set both
    different parameters or different values for individual books in the set:
    For example, by refering a different <parameter>ROOTID</parameter> in a
    &dc; file, you define which book of the set is to be built. Another
    example would be to specify different output modes (such as draft or
    annotated) for individual books in the same documentation set, as
    illustrated by the following examples
  </para>
   <example id="ex.daps.dc.user">
    <title>&dc; File For a Book in a Set</title>
    <screen>##
## Doc config file for DAPS User Guide
## See /etc/daps/config for documentation of the settings below
##

## Mandatory Parameter
MAIN="MAIN.DAPS.xml" <co id="co.daps.dc.user.main"/>

## Optional Parameters
## ROOTID
## If MAIN contains a set with several books and/or articles, use
## a separate DC-file for each book/article and set ROOTID to
## the id of the respective &lt;book&gt;/&lt;article&gt; element of the document
## This will enable you to build individual books/articles rather than
## the whole set
## See http://www.docbook.org/tdg/en/html/set.html for more information
## on sets
ROOTID="book.daps.user" <co id="co.daps.dc.user.rootid"/>


## Custom Stylesheets
## (if not defined the DookBook stylesheets will be used)
##
STYLEROOT="/usr/share/xml/docbook/stylesheet/suse/xslt" <co id="co.daps.dc.user.styleroot"/>
#FB_STYLEROOT="" <co id="co.daps.dc.user.fbstyleroot"/>
HTML_CSS="./daps.css" <co id="co.daps.dc.user.css"/>
#EPUB_CSS="" <co id="co.daps.dc.user.epub"/>

## If you want to be able to source this file, so you do not have
## to specify the -d/&#45;&#45;docconfig option with daps, uncomment the
## following line
##
export DOCCONF_NAME=$BASH_SOURCE <co id="co.daps.dc.user.source"/>
</screen>
</example>
<!--taroth 2012-05-02: todo: adjust callout texts tomorrow-->
   <calloutlist>
    <callout arearefs="co.daps.dc.user.main">
     <para>
     Sets the Main file that contains <quote>references</quote> to other books, 
     chapters, appendices, etc. 
    </para>
    </callout>
    <callout arearefs="co.daps.dc.user.rootid">
     <para>
     Defines the root ID of the element to be used for creating an output format. 
     Usually, you define the root ID of a <sgmltag>book</sgmltag> or 
     <sgmltag>article</sgmltag> element here. In this example, 
     <literal>book.daps.user</literal> is the root ID of the &dapsuser;.
    </para>
    </callout>
     <callout arearefs="co.daps.dc.user.styleroot">
      <para>
     If the parameter is not specified, &dapsacr; will 
     use the default DocBook stylesheets for production. With 
     <parameter>STYLEROOT</parameter> specify the (absolute or relative) path 
      to the directory containing the custom stylesheets. The directory must have
      the same structure as the original DocBook stylesheet root directory, but 
      needs not to contain stylesheets for all output formats. 
      <!--If custom stylesheets are not found, &dapsacr; will automatically
      fall back to the DocBook stylesheets.--> It is recommended to use absolute
      paths for <parameter>STYLEROOT</parameter>.
     </para>
     </callout>
     <callout arearefs="co.daps.dc.user.css">
      <para>
     If they are not specified, &dapsacr; will 
     use the default DocBook stylesheets for production of HTML or &epub;. 
     With <parameter>HTML_CSS</parameter> or <parameter>EPUB_CSS</parameter>, 
     specify the absolute path to the respective CSS file. 
     </para>
     </callout>
      <callout arearefs="co.daps.dc.user.epub">
      <para>
     If they are not specified, &dapsacr; will 
     use the default DocBook stylesheets for production of HTML or &epub;. 
     With <parameter>HTML_CSS</parameter> or <parameter>EPUB_CSS</parameter>, 
     specify the absolute path to the respective CSS file. 
     </para>
     </callout>
    <callout arearefs="co.daps.dc.user.source">
     <para>
     You only need to add this line if you want to be able to 
     source &dc; files on the Bash with &dapsacr;. Sourcing a &dc; file (formerly 
     called <literal>ENV</literal> file) was necessary to work with the 
     documentation environment provided by &susedoc; (&dapsacr;' predecessor).
    </para>
    </callout>
   </calloutlist>
   <para>
   If your documentation set contains cross-references between the
   individual books, it is useful to define an additional &dc; file
   (<emphasis>without</emphasis> the <parameter>ROOTID</parameter> parameter).
   Use this &dc; file to generate an HTML output containing all hyperlinks
   between the individual books. Find an example &dc; file in
   <xref linkend="ex.daps.dc.set"/>.
  </para>

   <example id="ex.daps.dc.set">
    <title>&dc; File for a Set</title>
    <screen></screen>
   </example>
  </sect3>

  </sect2>
  <sect2 id="sec.daps.user.basics.dirstruct">
  <title>Directory Structure</title>
  <!--taroth 2012-04-26: cave, same contents in DAPS Quick 
  (art_daps_quick.xml, see id=sec.daps.quick.basics.dirstruct)-->
  <!--taroth 2012-04-26: impossible to source out to phrases-decl.ent and 
  include it multiple times (callout IDs!)-->
   <para>
    For &dapsacr; to work out of the box, your XML files and images must be
    organized in a specific structure within your documentation directory.
    <xref linkend="ex.daps.dir.doc"/> shows the required structure including
    the key files for a &dapsacr; documentation project. You can also create
    multiple documentation directories for individual documentation projects,
    but they all need the substructure outlined below.
   </para>
    
   <example id="ex.daps.dir.doc">
    <title>Directory Structure</title>
<screen><replaceable>YOUR_DOC_DIR/</replaceable><co id="co.docdir.base"/>
  |--&dc;*<co id="co.docdir.dc"/>
     |--images/
     |   |--src/<co id="co.docdir.img.src"/>
     |   |  |--dia/
     |   |  |--eps/
     |   |  |--fig/
     |   |  |--pdf/
     |   |  |--png/
     |   |  |--svg/
     |--xml/<co id="co.docdir.xml"/> 
     |   |--MAIN*.xml<co id="co.docdir.main"/></screen>
   </example>
   <calloutlist>
    <callout arearefs="co.docdir.base">
     <para>
      <quote>Working directory</quote> for the respective documentation project.
     </para>
    </callout>
    <callout arearefs="co.docdir.dc">
     <para>
      &dc; file defining the documentation project. <!--For more information,
      refer to <xref linkend="sec.daps.user.oview.docproject"/>.--></para>
    </callout>
    <callout arearefs="co.docdir.img.src">
     <para>
      Top-level directory for any original images that you want to use in
      the documentation project. Contains subdirectories for images in
      various formats. Any images to be referenced in the XML sources must
      be put in the respective subdirectories. For information about referencing
      images, refer to <xref linkend="sec.daps.quick.imgs.refer"/>.
     </para>
    </callout>
    <callout arearefs="co.docdir.xml">
     <para>
      Directory holding the XML files for the documentation project. If you
      declare entities in an external file (for example, in
      <filename>entity-decl.ent</filename>), put the entity declaration file
      here, too.</para>
    </callout>
    <callout arearefs="co.docdir.main">
     <para>
      The main file of the documentation project. It contains
      <quote>references</quote> to other books, chapters, appendices, etc.
     </para>
    </callout>
   </calloutlist>
  </sect2>
 </sect1>
 
   <!--  </sect1>
 <sect1 id="sec.daps.user.oview.dirstruct">
  <title>Directory Structure</title>

  <para>
   For &dapsacr; to work out of the box, your XML files and images should be
   organized within your documentation directory (DOC_DIR) as shown in
  FIXME  <xref linkend="ex.daps.user.dir.doc"/>
  </para>

   <sect2 id="sec.daps.user.oview.dir.build">
   <title>Structure Created by &dapsacr;</title>
   <para>
    When generating the first output format from your documentation project,
    &dapsacr; adds another directory that holds the generated contents. It
    is named <filename>build</filename> (if not set otherwise in &dapsconf-sys;,
    parameter <parameter>BUILD_DIR</parameter>), and is created in your 
    documentation directory, parallel to the <filename>xml</filename> and 
    <filename>images</filename> subdirectory.
   </para>
   <para>
    The <filename>build</filename> directory is structured as follows:
   </para>
   <example id="ex.daps.user.build">
    <title>Build Directory</title>
    <screen><replaceable>YOUR_DOC_DIR</replaceable> <co id="co.docdir"/>
  |-/-<emphasis role="bold">build</emphasis> <co id="co.builddir"/> 
     |-/-<emphasis role="bold"><replaceable>NAME_OF_&dc;1</replaceable></emphasis> <co id="co.builddir.dc"/>    
     |-/-<emphasis role="bold"><replaceable>NAME_OF_&dc;2</replaceable></emphasis> <xref linkend="co.builddir.dc"/>    
     |-/-<emphasis role="bold">.images</emphasis> <co id="co.builddir.img"/>    
     |-/-<emphasis role="bold">.profiled</emphasis> <co id="co.builddir.profiled"/>
     |-/-<emphasis role="bold">.tmp</emphasis> <co id="co.builddir.tmp"/>
    </screen>
   </example>
   <calloutlist>
    <callout arearefs="co.docdir">
     <para>
      <quote>Working directory</quote> for the respective documentation project.
     </para>
    </callout>
    <callout arearefs="co.builddir">
     <para>
      Directory that holds all contents build by &dapsacr;.
     </para>
    </callout>
    <callout arearefs="co.builddir.dc">
     <para>
      For each of your documentation projects, &dapsacr; creates a
      subdirectory, named after the respective &dc; from which you build
      the project. All formats that have been generated from the &dc; (PDF,
      HTML, TXT, &epub; etc.) can be found there. A <filename>log</filename>
      subdirectory stores log files for each output format that has been
      generated by &dapsacr;.
     </para>
    </callout>
    <callout arearefs="co.builddir.img">
     <para>
      Directory holding the images created by &dapsacr;.
     </para>
    </callout>
    <callout arearefs="co.builddir.profiled">
     <para>
      Directory holding the profiled XML sources created by &dapsacr;.
     </para>
    </callout>
    <callout arearefs="co.builddir.tmp">
     <para>
      Directory holding temporary files created by &dapsacr; (for example,
      the FO files).
     </para>
    </callout>
   </calloutlist>
   <tip>
    <title>Creating a New Documentation project from Scratch</title>
    <para>
     &dapsacr; also contains the script <command>daps-init</command>for
     creating a new documentation project from scratch. <remark>taroth
      2011-12-29: add xref later</remark> When using that script, the directory
     structure is automatically set up and an example &dc; file is
     automatically created.
  </para>
   </tip>
  </sect2>-->

 
 
 <!--taroth 2012-04-25: it is recommended to use absolute paths in DC files, but the
 following parameters also allow for relative paths:
 BUILD_DIR
 DAPSROOT
 DOCCONF_DEFAULT
 EPUB_CSS
 FALLBACK_STYLEROOT
 FOP_CONFIG_FILE
 FOP_WRAPPER
 HTML_CSS
 STYLEDEVEL
 STYLEROOT
 XEP_CONFIG_FILE
 XEP_WRAPPER-->

</chapter>
