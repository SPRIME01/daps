<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                         "http://www.docbook.org/xml/4.5/docbookx.dtd"
[
   <!ENTITY daps     "daps">
   <!ENTITY dapsacr  "DAPS">
]>
<article lang="en" id="art.daps.quickstart">
    <?suse-quickstart columns="no" version="2"?>
    <title>&dapsacr; Quick Start</title>
    <articleinfo>
        <author>
            <firstname>Christopher-Julian</firstname>
            <surname>Zwickl</surname>
        </author>
    </articleinfo>
    <abstract>
        <para>&dapsacr; (DocBook Authoring and Publishing Suite) is a programm that transforms your
            XML document into a text, HTML, PDF, EPUB or manpage. And you can manage your documents
            like XML, HTML,(...).You can migrate SUSEdoc Projects. It is the successor of the former
            susedoc package.The following article shows you the basics of daps. If you want to see
            more options and functions, enter the command: <screen>daps --help</screen></para>
    </abstract>
    <sect1>
        <title>Target Audience</title>
        <para>This quick start is for advanced users with some knowledge about DocBook XML. It's also useful to have some experience with
              the commandline. Daps is only available for SUSELinux.</para>
    
    </sect1>
    <sect1>
        <title>Getting &daps;</title>
        <para>Getting &daps; from openSUSE Buildservice:<ulink
                url="http://download.opensuse.org/repositories/Documentation:/Tools/"
                >download.opensuse.de</ulink> or from <ulink url="https://sourceforge.net/p/daps/"
                >sourceforge</ulink></para>
    </sect1>
    <sect1>
        <title>Creating a Project from scratch</title>
        <para>Use the steps in the bottom to create a project from the scratch. You will see all
            functions to create a new project with the command:</para>
        <screen>daps init --help</screen>
        <procedure>
            <step>
                <para>Create a directory with the name <filename>dapstest</filename>.</para>
                <screen>$ mkdir YOUR_PATH/dapstest</screen>
            </step>
            <step>
                <para>Enter the command to create the dapstest directory:</para>
                <screen>$ daps --basedir=YOUR_PATH/dapstest --envfile=ENV-test-daps init</screen>
            </step>
        </procedure>
    </sect1>
    <sect1> 
        <title>Existing Projects</title>
        <para>You can also use existing projects. SUSEdoc projects are easy to transform into a DAPS
            project. In the bottom you will see something about using your own and existing project.
            By the way SUSEdoc is the predecessor of Daps.</para>
        <para>
            <warning><para>Daps support only DocBook 4.x. Support for DocBook 5.x is planned.</para></warning>
        </para>
        <sect2><title></title>
            <variablelist>
                 <varlistentry>
                    <term>The Directory Structure to use an existing Project:</term>
                    <listitem>
                        <screen>
xml/*.ent
xml/*.xml
images/(Type)/data
                        </screen>
                    </listitem>
                 </varlistentry>         
            </variablelist>
        </sect2>    
        <sect2>
            <title>The basenames of Images must be unique different</title>
            <para>The Images basenames need to be unique throughout different directories. Therefore  using names images/png/AAA.png and 
                images/svg/AAA.svg is not an option it should be different. For Example: images/svg/BBB.svg and images/png/AAA.png </para>      
        </sect2>
        <sect2>
            <title>Adjustment for XML</title>
            <para>Linking of Images:</para>
            <formalpara>
                <title>wrong:</title>
                <para><literal>&lt;imagedata fileref = images/png/foo.png</literal></para>
            </formalpara>
            <formalpara>
                <title>correct:</title>
                <para><literal>foo.png</literal></para>
            </formalpara>
            
            
            <para>Please take only the name of the image.</para>
            <para>Look at the following to learn to adjust your Header data for XML:</para>
            <screen> 
                [&lt;!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
                &lt;!ENTITY % entities SYSTEM "entity-decl.ent">
                %entities; ] >
                
            </screen>
        </sect2>
        <sect2>
            <title>Migrate SUSEdoc Projects</title>
            <para> See here to migrate your SUSEdoc Project:
                /usr/share/doc/packages/daps/README</para>
        </sect2>
    </sect1>
    <sect1>
        <title>Generating output formatts</title>
        <para>In the following points you will see the procedure of transforming formats into a
            other format. For example: XML into PDF. You can find the results in the Build-Directory. </para>
        <sect2>
            <title>Creating PDF</title>
            <para> To transform XML into PDF, you need an existing project(as shown in section 4),
                use the following steps:</para>
            <procedure>
                <step>
                    <para> Enter the following command:</para>
                    <screen>$ daps -e <replaceable>ENV_mybook</replaceable> color-pdf</screen>
                </step>
            </procedure>
            <para>Finish. Your XML file is now transformed PDF file. You can find the PDF in your
                daps repository. To generat a printable PDF switch "color-pdf" into "pdf".</para>
        </sect2>
        <sect2>
            <title>Creating Epub</title>
            <para>To transform XML into Epub, you need an existing project(as shown in the section
                4), use the following steps.</para>
            <procedure>
                <step>
                    <para>Enter in your konsole:</para>
                    <screen>$ daps -e <replaceable>ENV_mybook</replaceable> epub</screen>
                </step>
                <step>
                    <para>Finish. Your XML file is now transformed Epub file. The result is in the
                        daps repository. Open the result with an EBook reader like calibre.</para>
                </step>
            </procedure>
        </sect2>
        <sect2>
            <title>Creating HTML</title>
            <procedure>
                <step>
                    <para>Enter in your konsole:</para>
                    <screen>$ daps -e --static ENV_DATA html</screen>
                </step>
                <step>
                    <para>Finish. Your XML file is now a HTML file. The result is in the daps
                        repository. Open the result with an Browser.</para>
                </step>
            </procedure>
        </sect2>
    </sect1>
    <!--<sect1>    
    <title>Create Distributable Archives</title>
        <para> To create a distributable archives read the following:</para>
        <itemizedlist>
            <listitem><para></para></listitem>
            <listitem><para></para></listitem>
            <listitem><para></para></listitem>
            <listitem><para></para></listitem>
        </itemizedlist>
        
        </sect1>-->
    <sect1>
        <title>Advanced usage of &daps;</title>
        <para>In the following you will learn the advanced usage of &daps; and you will see the explanation of the syntax.</para>
        <screen>$ daps [--global-options] "subcommand" [--command-options] [arguments]</screen>
        <para>For example:</para>
        <screen>daps -vv<co id="co.daps.vv"/> -e ENV_DATA<co id="co.daps.env"/> html<co id="co.daps.html"/></screen>
        <calloutlist>
            <callout arearefs="co.daps.vv">
                <para>Global Option = -vv (verbose print more debug messages)</para>
            </callout>
            <callout arearefs="co.daps.env">
                <para>Global Option = -e (defines the ENV file)</para>
            </callout>
            <callout arearefs="co.daps.html">
                <para>Subcommand = html (what to create)</para>
            </callout>
        </calloutlist>
        <para>DAPS can be executed with or without options, depending on the project.</para>
        <para>If the directory contains only one ENV file:</para>
        <screen>daps "subcommand"</screen>
        <para>If the directory contains more than one ENV-Data</para>
        <screen>$ daps -e ENV-YOUR-DATA "subcommand"</screen>
        <para>Setup ENV-Data</para>
        <screen>$ source ENV-YOUR-DATA</screen>
        <screen>$ daps "subcommand"</screen>
        <para>Over configurationdata ~/.daps/conf:</para>
        <screen>DAPS_ENV_DEFAULT=ENV_YOUR_DATA</screen>
        <remark>Sascha Manns: Vielleicht FOPTYPE einbauen.</remark>
        <remark>Sonst klasse gemacht :-)</remark>
    </sect1>
   
        <!--
        <title>Terminology</title>
        <para>The following terms are used in this article:</para>
        <variablelist>
            <varlistentry>
                <term>DocBook</term>
                <listitem>
                    <para>DocBook is a semantic markup language for technical documentation
                        published as a DTD.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>DTD</term>
                <listitem>
                    <para>DTD (Document type definition) defines exactly the elements, entities
                        attributes and structure in a XML or HTML document.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Formatting</term>
                <listitem>
                    <para>Is the process of converting a XSL-FO file into PDF with the help of a FO
                        formatter.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>FO Formatter</term>
                <listitem>
                    <para>Renders XSL-FO documents usually into PDF. The output formats depends on
                        the formatter.For example FOP and XEP</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>FOP</term>
                <listitem>
                    <para>FOP (Formatting Objects Processor) converts XSL-FO in to printable
                        formats. </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Transformation</term>
                <listitem>
                    <para>Data transformation converts data from source data format into a
                        destination data for example. Is the process of converting the XML document
                        into a target format, for example HTML. This process uses the XSLT
                        stylesheet with the assistance of an XSLT processor.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Validation</term>
                <listitem>
                    <para>Validation is a control process for XML documents by using a DTD.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>XSL-FO</term>
                <listitem>
                    <para>XSL-FO or <emphasis>Extensible Stylesheet Language-Formatting
                            Objects</emphasis> is a markup language to generate PDFs with XML
                        documents.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>XSLT</term>
                <listitem>
                    <para>XSLT or <emphasis>Extensible Stylesheet Language for
                            Transformations</emphasis> is a language based on XML and it is used for
                        transformation of XML documents</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>XML</term>
                <listitem>
                    <para>XML (extensible markup language) is a language with rules to encode
                        documents into machine-readable form.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>XOP</term>
                <listitem>
                    <para>XOP (XML-binary Optimized Packaging) is an advice of the W3C to represent
                        the binary data of XML documents. </para>
                </listitem>
            </varlistentry>
        </variablelist>-->
    
    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="common_gfdl_i.xml"/>
</article>
