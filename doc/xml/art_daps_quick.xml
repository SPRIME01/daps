<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet
 href="urn:x-daps:xslt:profiling:docbook45-profile.xsl" 
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd"
[<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<article lang="en" id="art.daps.quick">
 <?suse-quickstart columns="no" version="2" color="daps" url="http://daps.sourceforge.net"?>
 <title>&dapsacr; Quick Start Guide</title>
 <articleinfo>
  <authorgroup>
   <author>
    <firstname>Tanja</firstname>
    <surname>Roth</surname>
   </author>
   <author>
    <firstname>Christopher-Julian</firstname>
    <surname>Zwickl</surname>
   </author>
   <author>
    <firstname>Stefan</firstname>
    <surname>Knorr</surname>
   </author>
  </authorgroup>
 </articleinfo>
 <abstract>
  <para>
   &daps-description-long;
  </para>
  <!-- FIXME: Should we additionally include this fragment?-->
  <para>
     &daps-quickstart-abstract;
  </para>

 </abstract>
 <sect1 id="sec.daps.quick.audience">
  <title>Target Audience</title>
  <para>
   &audience; 
  </para>
 </sect1>
 <sect1 id="sec.daps.quick.dbversions">
  <title>Supported DocBook Versions</title>

  <para>
   &daps-db-versions;
  </para>
 </sect1>
 <sect1 id="sec.daps.quick.req">
  <title>System Requirements</title>

  &daps-sys-req-general;
  <sect2 id="sec.daps.quick.req.hw">
   <title>Hardware Requirements</title>
   &daps-sys-req-hw;
  </sect2>

  <sect2 id="sec.daps.quick.req.sw">
   <title>Software Requirements</title>
   &daps-sys-req-sw;
   <para>For installing the &dapsacr; sources on other Linux distributions, refer
    to the &dapsuser; <xref linkend="sec.daps.user.req.sw"/> where the
    respective requirements are covered in detail.</para>
  </sect2>
  <sect2 id="sec.daps.quick.addon.sw">
   <title>Additional Software</title>
   &daps-addon;
  </sect2>

  <sect2 id="sec.daps.quick.req.further">
   <title>Directory Structure</title>
   <para>
    For &dapsacr; to work out of the box, it requires a certain organization
    of your XML files and images within your documentation directory. For
    details, refer to <xref linkend="sec.daps.quick.basics.dirstruct"/>. You
    can generate the necessary structure with the &dapsacr; initialization
    script, <command>daps-init</command>. For instructions on how to make
    existing DocBook projects compatible with &dapsacr;, refer to
    <xref linkend="sec.daps.quick.migrate"/>.
   </para>
  </sect2>
 </sect1>

 <sect1 id="sec.daps.quick.inst">
  <title>Installation</title>
  &daps-install;

  <sect2 id="sec.daps.quick.inst.osuse">
   <title>Installing &dapsacr; on &osuse;</title>
   &daps-install-osuse;
  </sect2>

  <sect2 id="sec.daps.quick.inst.other">
   <title>Installing &dapsacr; on Other Linux Distributions</title>
   <para>
    Please refer to the &dapsacr; User Guide for instructions on how to install
    &dapsacr; on other Linux distributions:
    <xref linkend="sec.daps.user.inst.tarball"/>.
   </para>
  </sect2>

  <sect2 id="sec.daps.quick.inst.formatter">
   <title>Installing and Configuring the FO Formatter</title>
   <para>
    For installation and configuration of an FO formatter (for generating
    PDF output), refer to its installation instructions (or to your system
    administrator). For FOP, you usually only need to install the respective
    FOP package. However, not all FOP packages contain hyphenation pattern
    files.
    <remark>taroth 2012-03-26: todo - mention download from 
   offo.sourceforeg.net in troubleshooting section and add xref</remark>
   </para>
  </sect2>
 </sect1>
 <sect1 id="sec.daps.quick.basics">
  <title>Defining Documentation Projects</title>

  <para>
   The easiest way to set up a new documentation project from scratch is to
   use the &dapsacr; initialization script <command>daps-init</command>. For
   instructions how to do so, refer to <xref linkend="pro.daps.init"/>. The
   script automatically creates the
   <xref linkend="sec.daps.quick.basics.files" xrefstyle="select:title"/>
   and
   <xref linkend="sec.daps.quick.basics.dirstruct" xrefstyle="select:title"/>
   that you need to get started with &dapsacr;.
  </para>

  <sect2 id="sec.daps.quick.basics.files">
   <title>Key Files</title>
   &daps-key-files;
  </sect2>

  <sect2 id="sec.daps.quick.basics.dirstruct">
   <title>Directory Structure</title>
<!--taroth 2012-04-26: cave, same contents in DAPS User Guide 
  (daps_user_concept.xml, id=sec.daps.user.basics.dirstruct)-->
<!--taroth 2012-04-26: impossible to source out to phrases-decl.ent and 
  include it multiple times (callout IDs!)-->
   <para>
    For &dapsacr; to work out of the box, your XML files and images must be
    organized in a specific structure within your documentation directory.
    <xref linkend="ex.daps.quick.dir.doc"/> shows the required structure
    including the key files for a &dapsacr; documentation project. You can
    also create multiple documentation directories for individual
    documentation projects, but they all need the substructure outlined
    below.
   </para>
   <example id="ex.daps.quick.dir.doc">
    <title>Directory Structure</title>
    <screen><replaceable>YOUR_DOC_DIR/</replaceable><co id="co.quick.docdir.base"/>
  |--&dc;*<co id="co.quick.docdir.dc"/>
     |--images/
     |   |--src/<co id="co.quick.docdir.img.src"/>
     |      |--dia/
     |      |--eps/
     |      |--fig/
     |      |--pdf/
     |      |--png/
     |      |--svg/
     |--xml/<co id="co.quick.docdir.xml"/> 
         |--MAIN*.xml<co id="co.quick.docdir.main"/>
    </screen>
   </example>
   <calloutlist>
    <callout arearefs="co.quick.docdir.base">
     <para>
      <quote>Working directory</quote> for the respective documentation
      project.
     </para>
    </callout>
    <callout arearefs="co.quick.docdir.dc">
     <para>
      &dc; file defining the documentation project.
<!--For more information,
      refer to <xref linkend="sec.daps.user.oview.docproject"/>.--></para>
    </callout>
    <callout arearefs="co.quick.docdir.img.src">
     <para>
      Top-level directory for any original images that you want to use in
      the documentation project. Contains subdirectories for images in
      various formats. Any images to be referenced in the XML sources must
      be put in the respective subdirectories. For information about
      referencing images, refer to
      <xref linkend="sec.daps.quick.imgs.refer"/>.
     </para>
    </callout>
    <callout arearefs="co.quick.docdir.xml">
     <para>
      Directory holding the XML files for the documentation project. If you
      declare entities in an external file (for example, in
      <filename>entity-decl.ent</filename>), put the entity declaration file
      here, too.
     </para>
    </callout>
    <callout arearefs="co.quick.docdir.main">
     <para>
      The Main file of the documentation project. It contains
      <quote>references</quote> to other books, chapters, appendices, etc.
     </para>
    </callout>
   </calloutlist>
  </sect2>
 </sect1>
 <sect1 id="sec.daps.quick.init">
  <title>A Documentation Project From Scratch</title>

  <para>
   Use <command>daps-init</command> to set up a new documentation project
   from scratch. The initialization script automatically creates the key
   files and directory structure you need to get started with &dapsacr;.
   View the available options with the command <command>daps-init
   --help</command>. By default, the script creates a
   <sgmltag>book</sgmltag> as example document.
  </para>

  <procedure id="pro.daps.init">
   <title>Using <command>daps-init</command>
   </title>
   <step>
    <para>
     Create a directory that you want to use as your documentation
     directory:
    </para>
    <screen>$ <command>mkdir <replaceable>DOC_DIR</replaceable>&nbsp;</command></screen>
   </step>
   <step>
    <para>
     Create the default directory structure for &dapsacr; (containing an
     example <sgmltag>book</sgmltag>):
    </para>
    <screen>$ <command>daps-init -d <replaceable>PATH_TO_DOC_DIR</replaceable>&nbsp;</command></screen>
    <para>
     With the <option>-r</option> option, you can also set another root
     element, such as <sgmltag>article</sgmltag>, for example. To create the
     default directory structure with an <sgmltag>article</sgmltag> example:
    </para>
    <screen>$ <command>daps-init -d <replaceable>PATH_TO_DOC_DIR</replaceable> -r article</command></screen>
   </step>
   <step>
    <para>
     In case the specified directory does not exists, &dapsacr; asks whether to
     create it. Proceed by pressing <keycap>y</keycap> or
     <keycap>n</keycap>.
    </para>
   </step>
   <step>
    <para>
     To see what the output of the XML example file looks like, follow the
     instructions on the screen. For example, the following command
     specifies the <filename>&dc;*</filename> file
     (<filename>&dc;-daps-example</filename>) to use and the output format
     (color PDF) to create:
    </para>
    <screen>$ <command>daps -d <replaceable>PATH_TO_DOC_DIR</replaceable>/&dc;-daps-example color-pdf</command></screen>
    <para>
     For creation of the PDF, &dapsacr; uses FOP by default (if no other
     formatter is specified) and applies the default DocBook stylesheets (if
     no custom layout options are defined). At the end of the transformation
     process, &dapsacr; shows a message where to find the generated PDF. By
     default, all contents generated by &dapsacr; is located in the
     <filename>build</filename> subdirectory. It is automatically created
     within your documentation directory.
    </para>
   </step>
   <step>
    <para>
     Check your documentation directory for the new files: The text file
     <filename>&dc;-daps-example</filename> is annotated and gives you a rough
     idea which options can be defined in a &dc; file. For having a look at
     the XML source code of the <sgmltag>book</sgmltag> or
     <sgmltag>article</sgmltag>, change to the <filename>xml</filename>
     subdirectory and open the file
     <filename>MAIN-&dc;-daps-example.xml</filename> in a text or XML editor.
    </para>
   </step>
  </procedure>

  <remark>taroth 2012-03-22: maybe add DC-daps-example with callouts??</remark>
 </sect1>
 <sect1 id="sec.daps.quick.edit">
  <title>Editing DocBook XML Files</title>
&daps-editor;

&db-structure-elements;
 </sect1>
 <sect1 id="sec.daps.quick.validate">
  <title>Validation</title>
  &daps-validation-basics;
  
  &daps-example-validation-error; 
   </sect1>
 <sect1 id="sec.daps.quick.imgs">
  <title>Image Handling</title>
  &daps-images-intro;
  
  <sect2 id="sec.daps.quick.imgs.types">
   <title>Supported Image Types</title> 
  &daps-img-formats;
  </sect2>

  <sect2 id="sec.daps.quick.imgs.path">
   <title>Organization of the <filename>images</filename> Directory</title>
   <para>
    &daps-images-dir; For a longer reference to the directory
    structure, see <xref linkend="sec.daps.quick.basics.dirstruct"/>.
   </para>
  </sect2>

  <sect2 id="sec.daps.quick.imgs.req">
   <title>Filename Requirements</title>
   &daps-img-names-req;
  </sect2>

 <sect2 id="sec.daps.quick.imgs.refer">
  <title>Referencing Images</title>
  &daps-img-ref;
  <example id="ex.daps.quick.xml.img.ref">
   <title>Image Reference in an XML File</title>
   &ex-daps-img-ref;
  </example>
 </sect2>
</sect1>
<sect1 id="sec.daps.quick.syntax">
 <title>Basic &dapsacr; Syntax</title>

 <para>
   Before introducing the key <command>daps</command> commands to create
   output formats from your XML documents, let's get familiar with the basic
   syntax of the <command>daps</command> command:
  </para>

 <screen>$ <command>daps [--global-options] subcommand [--command-options] [arguments]</command></screen>

 <para>
  <xref linkend="ex.daps.syntax"/> shows an example command that generates
   HTML output. Global options are used to specify the level of verbosity,
   and the &dclong; file for creating the output.
  </para>

 <example id="ex.daps.syntax">
  <title>&dapsacr; Syntax</title>
  <screen>daps<co id="co.daps.syntax.main"/> --debug<co id="co.daps.syntax.debug"/> -d<co id="co.daps.syntax.dc"/> &dc;-daps-example html<co id="co.daps.syntax.output"/> --static<co id="co.daps.syntax.static"/></screen>
  <calloutlist>
   <callout arearefs="co.daps.syntax.main">
    <para>
      Main command: <command>daps</command>
    </para>
   </callout>
   <callout arearefs="co.daps.syntax.debug">
    <para>
      Global Option <option>--debug</option>: Sets the highest verbosity
      level (number of messages shown during the transformation process from
      XML to HTML).
     </para>
   </callout>
   <callout arearefs="co.daps.syntax.dc">
    <para>
      Global Option <option>-d</option>: Defines the relative or absolute
      path to the &dclong; file. In this example, <command>daps</command> is
      called in the same directory that holds the &dclong; file.
     </para>
   </callout>
   <callout arearefs="co.daps.syntax.output">
    <para>
      Subcommand <command>html</command>: Defines the output format to
      create.
     </para>
   </callout>
   <callout arearefs="co.daps.syntax.static">
    <para>
      Command option <option>--static</option>: Tells &dapsacr; to copy CSS
      and image files to the same location like the HTML files. For more
      information, see <xref linkend="table.daps.output.overview"/>.
     </para>
   </callout>
  </calloutlist>
 </example>

 <para>
   Generally, &dapsacr; can be executed with or without options. To view the
   global options and the available subcommands, use the command:
  </para>

 <screen>$ <command>daps help</command></screen>

 <para>
   For a short help text on a specific <emphasis>subcommand</emphasis>, use:
  </para>

 <screen>$ <command>daps help <replaceable>subcommand</replaceable>&nbsp;</command></screen>

 <para>
   For example, if you want more information about generating HTML output,
   run:
  </para>

 <screen>$ <command>daps help html</command></screen>

 <para>
   The following section introduces the key <command>daps</command> commands
   needed to create output formats from XML files. All examples are based on
   the example files that are provided by the &dapsacr; initialization
   script. For more information, refer to
   <xref linkend="sec.daps.quick.init"/>.
  </para>
</sect1>
<sect1 id="sec.daps.quick.output">
 <title>Output Formats</title>

 <para>
   &dapsacr; supports a number of different output formats, including
   <quote>exotic</quote> formats like man pages or ASCII text.
<!--For an
   overview of the available output formats, run <command>daps
   help</command>. The output formats are listed below
   <menuchoice><guimenu>Subcommands</guimenu> <guimenu>Generate
   Books</guimenu> </menuchoice>.-->
 </para>

 <para>
   By default, the DocBook stylesheets are used for generating output
   formats. But &dapsacr; also allows you to customize your output formats
   in a very flexible way.
   <remark>taroth 2012-03-19: add xref to advanced
    chapter</remark>
 </para>



 <sect2 id="sec.daps.quick.output.syntax">
  <title>Basic Syntax for Generating Output</title>
  <para>
    Independent of the individual output format you want to create, you need
    to specify the &dclong; file to use:
   </para>
  <screen>$ <command>daps -d <replaceable>&dc;_FILE</replaceable> <replaceable>OUTPUT_FORMAT</replaceable>&nbsp;</command></screen>
  <para>
    For example:
   </para>
  <screen>$ <command>daps -d &dc;-daps-example color-pdf</command></screen>
  <para>
    If your current directory is not the documentation directory where the
    &dc; file is located, also specify the (absolute or relative) path to
    the &dc; file. For example:
   </para>
  <screen>$ <command>daps -d /svn/daps/example/&dc;-daps-example color-pdf</command></screen>
  <para>
    At the end of the transformation process, &dapsacr; shows a message
    where to find the generated output.
   </para>
 </sect2>

 <sect2 id="sec.daps.quick.output.formats">
  <title>Generating Different Output Formats</title>
  <para>
    The following table gives an overview of the &dapsacr; subcommands for
    generating output formats.
   </para>
  <table id="table.daps.output.overview">
   <title>&dapsacr; Output Commands and Formats</title>
   <tgroup cols="3">
    <colspec colnum="1" colname="1" colwidth="18*"/>
    <colspec colnum="2" colname="2" colwidth="41*"/>
    <colspec colnum="3" colname="3" colwidth="41*"/>
    <thead>
     <row>
      <entry>
       <para>
         Subcommand
        </para>
      </entry>
      <entry>
       <para>
         Output
        </para>
      </entry>
      <entry>
       <para>
         Note
        </para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
         color-pdf
        </para>
      </entry>
      <entry>
       <para>
         Creates a color PDF (without any crop marks). Open the result in a
         PDF viewer.
        </para>
      </entry>
      <entry>
       <para>
         Requires an FO formatter.
<!--It is also possible to create one PDF 
        containing all the contents of a <sgmltag>set</sgmltag>&mdash; however,
        for large documentation projects you might run into problems with the
         java memory stack.--></para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
         pdf
        </para>
      </entry>
      <entry>
       <para>
         Creates a black-and-white PDF with crop marks, suitable for
         hand-off to a printing shop. Open the result in a PDF viewer.
        </para>
      </entry>
      <entry>
       <para>
         Requires an FO formatter. Creation of crop marks is currently only
         supported by the XEP FO formatter. All color images are
         automatically converted to grayscale images.
        </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
         html
        </para>
      </entry>
      <entry>
       <para>
         Creates a subdirectory containing individual HTML files for all
         chapters of a book (including also preface, glossary or appendix
         files).
<!--They are named according to the ID of the
         respective root element.-->
         Open the generated <filename>index.html</filename> file in a Web
         browser to view the generated HTML from the starting point (ROOTID
         of the top-level element).
        </para>
      </entry>
      <entry>
       <para>
         Images and CSS files are only linked in the resulting directory
         that contains the HTML files. To copy these files to the same
         location like the HTML files, use the <option>--static</option>
         option. This is useful for creating distributable HTML builds.
        </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
         html-single
        </para>
      </entry>
      <entry>
       <para>
         Creates a single HTML file, named after the &dc; file used to
         create the output. Open the generated <filename>*.html</filename>
         file in a Web browser.
        </para>
      </entry>
      <entry>
       <para>
         Single HTML files are more convenient for full text searches.
         Images and CSS files are only linked in the resulting directory
         that contains the HTML files. To copy these files to the same
         location like the HTML files, use the <option>--static</option>
         option. This is useful for creating distributable HTML builds.
        </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
         epub
        </para>
      </entry>
      <entry>
       <para>
         Creates an &epub; document. Open the result in an portable e-book
         reader (or with a software like Calibre).
        </para>
      </entry>
      <entry>
       <para>
        <remark>taroth 2012-03-23: check with fs/toms: only books? what about 
        conversion of articles to epub?</remark>
        <remark>toms, 2012-04-15: This seems to be an issue with the
           current DocBook stylesheets. Need to check this.</remark>
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
         webhelp
        </para>
      </entry>
      <entry>
       <para>
         Creates a DocBook &webh; output. Open the generated
         <filename>index.html</filename> file in a Web browser to view the
         generated HTML from the starting point (ROOTID of the top-level
         element).
        </para>
      </entry>
      <entry>
       <para>
         Experimental feature. Requires a very recent version of the DocBook
         stylesheets. DocBook &webh; consists of HTML pages with an
         additional pane, featuring a table of contents and a search
         function. The table of contents can be expanded and collapsed and
         is automatically synchronized with the contents pane. The search
         function weights the search results so that the most relevant
         results are listed first.
        </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
         txt
        </para>
      </entry>
      <entry>
       <para>
         Creates an ASCII text output. Open the result in a text editor.
        </para>
      </entry>
      <entry>
       <para>
         All images are removed from the output, but their location is
         indicated in the text by the respective image base name printed in
         square brackets. A table of contents is automatically generated and
         is available at the beginning of the text document.
        </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
         man
        </para>
      </entry>
      <entry>
       <para>
         Creates one or multiple man pages.
        </para>
      </entry>
      <entry>
       <para>
         To create man pages, your XML files must contain at least one
         <sgmltag>refentry</sgmltag>&mdash;be it in a
         <sgmltag>chapter</sgmltag>, <sgmltag>appendix</sgmltag>, or
         collected in a <sgmltag>reference</sgmltag> element. When
         processing a DocBook document with multiple
         <sgmltag>refentry</sgmltag> elements (regardless where they
         appear), &dapsacr; generates one man page file per
         <sgmltag>refentry</sgmltag> element. All other parts of the
         document will be ignored.
        </para>
<!--taroth 2012-04-11: additional
        information to be covered in User Guide: The filename for each man
        page is generated from refentry content elements. The filename prefix
        is the refname, and the suffix is the manvolnum from within the
        refmeta element. If you are processing many refentrys from the same
        document, make sure they will all produce unique filenames, or else
        any duplicates will overwrite each other.-->
      </entry>
     </row>
     <row>
      <entry>
       <para>
         jsp
        </para>
      </entry>
      <entry>
       <para>
         Creates Java Server Pages (JSP files). The generated
         <filename>jsp</filename> subdirectory contains individual JSP files
         for all chapters of a book (including also preface, glossary or
         appendix files).
<!--They are named according to the ID of the respective 
       root element.-->
       </para>
      </entry>
      <entry>
       <para>
         A JSP file is an HTML page containing a reference to Java servlets
         or Java Server Side Applets.
        </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
         wiki
        </para>
      </entry>
      <entry>
       <para>
         Creates a MediaWiki output in a single file. Open the result in a
         text or MediaWiki editor, and use it as raw input for a MediaWiki
         article.
        </para>
      </entry>
      <entry>
       <para>
         Experimental feature. The output is very basic: Section titles are
         converted in headlines according to their hierarchy, itemized
         lists, ordered lists and <sgmltag>screen</sgmltag> elements are
         converted to the respective MediaWiki elements.
        </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect2>

 <sect2 id="sec.daps.quick.output.adv">
  <title>Advanced Output Options</title>
  <para>
    Instead of always building your complete documentation project
    (<sgmltag>set</sgmltag>, <sgmltag>book</sgmltag>, or
    <sgmltag>article</sgmltag>), &dapsacr; also allows you to build an
    individual <sgmltag>chapter</sgmltag> or <sgmltag>part</sgmltag>. If you
    want the output format to include <sgmltag>remark</sgmltag> elements or
    to be marked as a <literal>draft</literal> version, you can tell
    &dapsacr; to do so.
   </para>
  <sect3 id="sec.daps.quick.output.adv.partial">
   <title>Partial Builds</title>
   <para>
     The <quote>starting point</quote> of your documentation project is
     usually the root element defined in the Main file that is referenced in
     the respective &dclong;. Alternatively, specify a ROOTID on the command
     line by using the <option>--rootid</option> option. This also allows
     you to build only a part of your documentation project by using the ID
     of a <sgmltag>book</sgmltag>, <sgmltag>article</sgmltag>,
     <sgmltag>glossary</sgmltag>, <sgmltag>appendix</sgmltag>,
     <sgmltag>part</sgmltag>, or <sgmltag>chapter</sgmltag> element.
    </para>
   <para>
     For example, if you have set up your working environment with
     <command>daps-init</command> and an example <sgmltag>book</sgmltag>,
     use the following command to build the first chapter of the book
     (without the book's title page, table of contents etc.):
    </para>
   <screen>$ <command>daps -d &dc;-daps-example color-pdf --rootid=cha.template.examples</command></screen>
  </sect3>
  <sect3 id="sec.daps.quick.output.adv.review">
   <title>Output with Remarks or Draft Watermark</title>
   <para>
     For publishing a pre-release version of a document that you might want
     to send to a proofreader for review, use the <option>--draft</option>
     command option to mark the document as draft version. For example, use
     the following command to build a color PDF that has a
     <literal>DRAFT</literal> watermark printed on each page:
    </para>
   <screen>$ <command>daps -d &dc;-daps-example color-pdf --draft</command></screen>
   <para>
     If you used <sgmltag>remark</sgmltag> elements in your XML files (for
     editorial remarks or questions to the proofreader), include the remarks
     in the output with the <option>--remarks</option> option:
    </para>
   <screen>$ <command>daps -d &dc;-daps-example color-pdf --remarks</command></screen>
      &daps-output-remarks;
   <para>If metadata to a file has been set<remark>taroth 2013-01-08: which 
     metadata exactly? does it need to be: doc:status, doc:maintainer?</remark>,
     &dapsacr; can also include the metadata for each file in the output
     format:</para>
      <screen>$ daps -d &dc;-daps-example color-pdf --meta</screen>
   
   &daps-note-output-adv;
  </sect3>
 </sect2>
</sect1>
<sect1 id="sec.daps.quick.migrate">
 <title>Migration of Existing DocBook Projects</title>
 <para>
  To migrate existing DocBook projects so that you can manage and publish
  them with &dapsacr;, follow the step-by-step instructions in
  <xref linkend="app.daps.user.migrate"/>.
  </para>
</sect1>
 <!--<sect1 id="sec.daps.quick.config">
  <title>&dapsacr; Configuration</title>
 &daps-config;
 </sect1>-->
<sect1 id="sec.daps.quick.more">
 <title>For More Information</title>

 <para>
   This guide gave you a short introduction to&dapsacr; and guided you
   through the key tasks. To discover more, refer to the other manuals
   available on &dapsacr; at
   <ulink url="https://sourceforge.net/p/daps/home/Home/"/>.
  </para>
 &daps-feedback;
  <para>
   For a complete DocBook reference see
   <ulink url="http://www.docbook.org/tdg/en/html/docbook.html">
   <citetitle>&tdg;</citetitle>
  </ulink>.
  </para>

 <remark>taroth 2012-04-19: enable links to glossary and troubleshooting chapter
  as soon as they contain useful content</remark>

<!-- <para>For an overview of the key terms used in the context of &dapsacr; and 
  DocBook, refer to <xref linkend="daps.glossary"/>.</para>-->

 <para>
   If you encounter problems with &dapsacr;, check
   <xref linkend="cha.daps.user.trouble"/> for a list of common problems and
   their solution.
  </para>
</sect1>
<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="common_gfdl_i.xml"/>
</article>
