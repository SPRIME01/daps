<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet
 href="urn:x-suse:xslt:profiling:docbook45-profile.xsl" 
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd"
[<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<article lang="en" id="art.daps.quickstart">
 <?suse-quickstart columns="no" version="2" color="daps" url="http://daps.sourceforge.net"?>
 <title>&dapsacr; Quick Start</title>
 <articleinfo>
  <author>
   <firstname>Tanja</firstname>
   <surname>Roth</surname>
  </author>
  <author>
   <firstname>Christopher-Julian</firstname>
   <surname>Zwickl</surname>
  </author>
 </articleinfo>
 <abstract>
  <para>&daps-description-long;</para>
 </abstract>
 <sect1 id="sec.daps.quick.audience">
  <title>Target Audience</title>
  <para>&audience;</para>
 </sect1>
 <sect1 id="sec.daps.quick.dbversions">
  <title>Supported DocBook Versions</title>
  <para>&daps-db-versions;</para>
 </sect1>
 <sect1 id="sec.daps.quick.req">
  <title>Requirements and Additional Software</title>
  <para></para>
  <sect2 id="sec.daps.quick.req.system">
   <title>System Requirements</title>
   &daps-sys-req;
   <para>
    Instructions on how to make existing DocBook projects &dapsacr; compatible
    are available at <xref linkend="sec.daps.quick.migrate"/>.
   </para>
  </sect2>
  <sect2 id="sec.daps.quick.req.addon">
   <title>Additional Software</title>
   &daps-addon;
  </sect2>
 </sect1>
 <sect1 id="sec.daps.quick.inst">
  <title>Installation</title>
  <para>
   The &dapslong; can be installed and used on any Linux distribution.
   Currently, &dapsacr; is available as RPM package for the &osuse;
   distribution. <remark>taroth 2012-03-20: (and the &sle; products based on
    &osuse;)???</remark> Eventually, RPM packages for further distributions
   may become available. In the meantime, you can download a tarball with the
   &dapsacr; sources and install them on any distribution as described in
  <xref linkend="pro.daps.quick.inst.tarball"/>. 
 </para>
  <sect2 id="sec.daps.quick.inst.osuse">
   <title>Installing &dapsacr; on &osuse;</title>
   <para>
    For &osuse;, the <systemitem class="resource">daps</systemitem> package is
    available from the <systemitem class="service">&dapsrepo;</systemitem>
    repository at <ulink
     url="http://download.opensuse.org/repositories"></ulink>. For the
    complete path to the repository, add the version number of your &osuse;
  installation. For example, the complete repository URL for &osuse;
    <productnumber>12.1</productnumber> is: <ulink
     url="http://download.opensuse.org/repositories/Documentation:/Tools/openSUSE_12.1/"></ulink>
   </para>

   <para>
    For basic details on how to add software repositories and how to install
  software on &osuse;, refer to the &osuse; <citetitle>Reference
     Guide</citetitle>. The guide is available from <ulink
     url="http://www.suse.com/documentation"></ulink>. 
  </para>
   <para>
    Choose one of the following installation methods. Any dependencies to
    other packages that are required by &dapsacr; are automatically
    resolved.</para>
   <variablelist>
    <varlistentry>
     <term>1-Click Installation from the Internet</term>
     <listitem>
      <para>
       Goto <ulink url="http://software.opensuse.org/"/> and search for the <systemitem
        class="resource">daps</systemitem> package that matches your &osuse;
       version. On the resulting page, click <guimenu>daps</guimenu>
       <guimenu>Show other versions</guimenu> and then <guimenu>Show unstable
        packages</guimenu>. Install the latest version provided by the
       repository <systemitem class="service">&dapsrepo;</systemitem> by
       clicking <guimenu>1 Click Install</guimenu>.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Installation with &yast; (GUI)</term>
     <listitem>
      <para>
       Add the <systemitem class="service">&dapsrepo;</systemitem> repository
       that matches your &osuse; version&mdash;see the introduction to this
       section. From this repository, install the <systemitem
        class="resource">daps</systemitem> package. For more information on
       installing packages with &yast; refer to the &osuse;
       <citetitle>Reference Guide</citetitle>, chapter <citetitle>Installing
        Or Removing Software</citetitle>.
    </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Installation with <command>zypper</command> (command line)</term>
     <listitem>
      <para>
       Add the <systemitem class="service">&dapsrepo;</systemitem> repository
       that matches your &osuse; version&mdash;see the introduction to this
       section. From this repository, install the <systemitem
        class="resource">daps</systemitem> package. For more information on
       installing packages with &yast; refer to the &osuse;
       <citetitle>Reference Guide</citetitle>, chapter <citetitle>Managing
        Software with Command Line Tools</citetitle>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

  </sect2>
  <sect2 id="sec.daps.quick.inst.other">
   <title>Installing &dapsacr; on Other Linux Distributions</title>
   <para>
    For installation on other Linux distributions, the &dapsacr; sources are
    available as tarball. They can be installed with
    <literal>configure</literal>, <literal>make</literal>, and <literal>make
     install</literal>.
   </para>

   <procedure id="pro.daps.quick.inst.tarball">
    <title>Installing the &dapsacr; Sources</title>
    <para>
     Before starting the installation, check the &dapsacr; 
     <xref linkend="sec.daps.quick.req.system" xrefstyle="select:title"/> and
     make sure to have all required packages and tools installed.
    </para>
    <step>
     <para>
      Download the &dapsacr; source tarball
      (<literal>daps-<replaceable>x.y.tar.bz2)</replaceable></literal>)from
      <ulink url="http://sourceforge.net/projects/daps/files/" />.
     </para>
    </step>
    <step>
     <para>
      Create a new directory in your file system and unpack the tarball there.
     </para>
    <!--<screen>tar xvf TARBALLNAME .</screen>-->
    </step>
    <step id="daps.quick.inst.configure">
     <para>
      Change to the newly created directory and start the configure script:
     </para>
     <screen>$ ./configure</screen>
     <para>
      If you want to adjust the &dapsacr; installation paths, view the
      available options with <command>$ ./configure
       <option>--help</option></command> and run the configure script with the
      desired option.
     </para>
     <para>
      The script checks your system for any software relevant to &dapsacr; or
    the &dapsacr; installation process. It also creates a makefile that will
    be used during installation. Based on the analysis, the script shows a 
      summary that includes the following information:
     </para>
     <itemizedlist>
      <listitem>
       <para>the &dapsacr; installation paths,</para>
      </listitem>
      <listitem>
       <para>
        an overview of &dapsacr; features that will be available on your
        system if you install &dapsacr; now, and
       </para>
      </listitem>
      <listitem>
       <para>
        which software is still missing to enable the remaining &dapsacr;
        features as well.
       </para>
      </listitem>
     </itemizedlist>
    </step>
    <step>
     <para>Check the summary carefully.</para>
    </step>
    <step>
     <para>
      Install missing packages, if necessary. After installing new packages, 
      repeat <xref linkend="daps.quick.inst.configure"/> and check the summary
      again.
     </para>
    </step>
    <step>
     <para>If everything is prepared according to your wishes, enter:</para>
     <screen>$ make</screen>
    </step>
    <step>
     <para>To start the installation process:</para>
     <screen>$ sudo make install</screen>
    </step>
   </procedure>
  </sect2>
  <sect2 id="sec.daps.quick.inst.formatter">
   <title>Installing and Configuring the FO Formatter</title>
   <para>
    For installation and configuration of an FO formatter (for generating PDF
    output), refer to the installation instructions of the product or to your
   system administrator. For FOP, you usually only need to install the 
   respective FOP package. However, not all FOP packages contain hyphenation 
   pattern files. <remark>taroth 2012-03-26: todo - mention download from 
   offo.sourceforeg.net in troubleshooting section and add xref</remark>
   </para>
  </sect2>
 </sect1>
 <sect1 id="sec.daps.quick.basics">
  <title>Defining Documentation Projects</title>
  <para>
   The easiest way to set up a new documentation project from scratch is to
   use the &dapsacr; initialization script <command>daps-init</command>. For
   instructions how to do so, refer to <xref linkend="pro.daps.init"/>. The
   script automatically creates the <xref
    linkend="sec.daps.quick.basics.files" xrefstyle="select:title"/> and <xref
    linkend="sec.daps.quick.basics.dirstruct" xrefstyle="select:title"/> you
   need to get started with  &dapsacr;.
  </para>
  <sect2 id="sec.daps.quick.basics.files">
   <title>Key Files</title>
   <para>
    The following key files define a documentation project so that 
    it can be processed by &dapsacr;:
   </para>
   <variablelist>
    <varlistentry>
     <term>Main File</term>
     <listitem>
      <para>
       An XML file containing the <quote>starting point</quote> (the
     highest-level object) of your documentation project (for example, 
       <sgmltag>book</sgmltag> or <sgmltag>article</sgmltag>). For larger
       documentation projects, it is good practice to name the file
    <filename>MAIN-<replaceable>PROJECTNAME</replaceable>.xml</filename>, 
       but you can use any other filename as well.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>&dclong; (&dc;) File</term>
     <listitem>
      <para>
      A configuration file defining a number of parameters for your
      documentation project (for example, the main file, layout variants, or 
       which profiling information to use). Of the multiple parameters that
       can be set  in the &dc; file, the only one required is
       <parameter>MAIN</parameter>, pointing to the XML file that you want to
       process.
     </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
  <sect2 id="sec.daps.quick.basics.dirstruct">
   <title>Directory Structure</title>
   <para>
    For &dapsacr; to work out of the box, your XML files and images must be
    organized in a specific structure within your documentation directory.
    <xref linkend="ex.daps.dir.doc"/> shows the required structure including
    the key files for a &dapsacr; documentation project. You can also create
    multiple documentation directories for individual documentation projects,
    but they all need the substructure outlined below.
   </para>
    
   <example id="ex.daps.dir.doc">
    <title>Directory Structure</title>
    <screen><replaceable>YOUR_DOC_DIR/</replaceable><co id="co.docdir.base"/>
  |--&dc;*<co id="co.docdir.dc"/>
     |--images/<co id="co.docdir.img"/> 
     |   |--src/<co id="co.docdir.img.src"/>
     |   |--dia/
     |   |--eps/
     |   |--fig/
     |   |--pdf/
     |   |--png/
     |   |--svg/
     |--xml/<co id="co.docdir.xml"/> 
     |   |--MAIN*.xml<co id="co.docdir.main"/></screen>
   </example>
   <calloutlist>
    <callout arearefs="co.docdir.base">
     <para>
      <quote>Working directory</quote> for the respective documentation project.
     </para>
    </callout>
    <callout arearefs="co.docdir.dc">
     <para>
      &dc; file defining the documentation project. <!--For more information,
      refer to <xref linkend="sec.daps.user.oview.docproject"/>.--></para>
    </callout>
    <callout arearefs="co.docdir.img.src">
     <para>
      Top-level directory for any original images that you want to use in
      the documentation project. Contains subdirectories for images in
      various formats. Any images to be referenced in the XML sources must
      be put in the respective subdirectories.
      <remark>taroth 2012-02-01: add xref to 
     section about using images (how to reference them -> path!)</remark>
     </para>
    </callout>
    <callout arearefs="co.docdir.xml">
     <para>
      Directory holding the XML files for the documentation project. If you
      declare entities in an external file (for example, in
      <filename>entity-decl.ent</filename>), put the entity declaration file
      here, too.</para>
    </callout>
    <callout arearefs="co.docdir.main">
     <para>
      The main file of the documentation project. It contains
      <quote>references</quote> to other books, chapters, appendices, etc.
     </para>
    </callout>
   </calloutlist>
  </sect2>
 </sect1>
 <sect1 id="sec.daps.quick.init">
  <title>A Documentation Project From Scratch</title>
  <para>
   Use <command>daps-init</command> to set up a new documentation project from
   scratch. The initialization script automatically creates the key files and
   directory structure you need to get started with &dapsacr;. View the
   available options with the command  <command>daps-init --help</command>. By
   default, the script creates a <sgmltag>book</sgmltag> as example document.
  </para>
  <procedure id="pro.daps.init">
   <title>Using <command>daps-init</command>
   </title>
   <step>
    <para>
     Create a directory that you want to use as your documentation directory:
    </para>
    <screen>$ mkdir <replaceable>DOC_DIR</replaceable></screen>
   </step>
   <step>
    <para>
     Create the default directory structure for &dapsacr; (containing an
     example <sgmltag>book</sgmltag>):
    </para>
    <screen>$ daps-init -d <replaceable>PATH_TO_DOC_DIR</replaceable></screen>
    <para>
     With the <option>-r</option> option, you can also set another root
     element, such as <sgmltag>article</sgmltag>, for example. To create the
     default directory structure with an <sgmltag>article</sgmltag> example:
    </para>
    <screen>$ daps-init -d <replaceable>PATH_TO_DOC_DIR</replaceable> -r article</screen>
   </step>
   <step>
    <para>
     In case the specified directory does not exists, &dapsacr; asks if to
     create it. Proceed by pressing <keycap>y</keycap> or
     <keycap>n</keycap>.
    </para>
   </step>
   <step>
    <para>
     To see what the output of the XML example file looks like, follow the
     instructions on the screen. For example, the following command specifies
     the <filename>DC*</filename> file (<filename>DC-daps-example</filename>)
     to use and the output format (color PDF) to create:
    </para>
    <screen>$ daps -d <replaceable>PATH_TO_DOC_DIR</replaceable>/DC-daps-example color-pdf</screen>
    <para>
     For creation of the PDF, &dapsacr; uses FOP by default (if no other
     formatter is specified) and applies the default DocBook stylesheets (if
     no custom layout options are defined). At the end of the transformation
     process, &dapsacr; shows a message where to find the generated PDF. By
     default, all contents generated by &dapsacr; is located in the
    <filename>build</filename> subdirectory. It is automatically created 
     within your documentation directory.
    </para>
   </step>
   <step>
    <para>
     Check your documentation directory for the new files: The text file
     <filename>DC-daps-example</filename> is annotated and gives you a rough
     idea which options can be defined in a &dc; file. For having a look at
     the XML source code of the <sgmltag>book</sgmltag> or
     <sgmltag>article</sgmltag>, change to the <filename>xml</filename>
     subdirectory and open the file
     <filename>MAIN-DC-daps-example.xml</filename> in a text or XML
     editor.
    </para>
   </step>
  </procedure>
  <remark>taroth 2012-03-22: maybe add DC-daps-example with callouts??</remark>
 </sect1>
 <sect1 id="sec.daps.quick.edit">
  <title>Editing DocBook XML Files</title>
  <para>
   As &dapsacr; does not include any editor software, you are completely free
   in the choice of your XML editor. Basically, you can use any text editor,
   but it is helpful if the editor supports editing XML in accordance with the
   DTD you use. A number of open source editors can be extended with plug-ins
   for automatic tag insertion and completion, insertion of
   <sgmltag>xref</sgmltag> elements and for checks if the XML document is
   well-formed. If you are already familiar with vi or Emacs, you can
   configure them to support XML editing mode. If your prefer an editor with a
   graphical user interface, jEdit is a good choice.
  </para>
  <para>
   If you already worked with DocBook, you know about the typical top-level
  elements (or root elements) for documents: <sgmltag>book</sgmltag> or 
   <sgmltag>article</sgmltag>. For larger documentation projects, another
   typical root element is <sgmltag>set</sgmltag> (a collection of
   books).
  </para>
  <para>
   To define the individual components of a book, other structural elements
   are used, for example, <sgmltag>part</sgmltag>, <sgmltag>chapter</sgmltag>,
   or <sgmltag>appendix</sgmltag>. Within a chapter, you will probably also
   find sections, thus <sgmltag>section</sgmltag> (or
   <sgmltag>sect1</sgmltag>, <sgmltag>sect2</sgmltag> etc.) are further
   structural elements, as are <sgmltag>para</sgmltag> (for paragraphs) or
   <sgmltag>orderedlist</sgmltag>.
  </para>
  <para>
   If you have set up your documentation project from scratch with
   <command>daps-init</command>, you can explore the example documents that
   are installed within the directory structure. They show the most commonly
   used DocBook XML constructs. For a complete DocBook reference see <ulink
    url="http://www.docbook.org/tdg/en/html/docbook.html"><citetitle>&tdg;</citetitle></ulink>. 
  </para>
 </sect1>
 <sect1 id="sec.daps.quick.imgs">
  <title>Image Handling</title>
  <para>D epending on the output format you generate with &dapsacr; (PDF or
   HTML for example), the source images you provide and reference in your XML
   sources are automatically transformed into the appropriate output formats,
   for example SVG to PNG for HTML builds, or color to grayscale for b/w PDFs.
   This section describes the basic things you need to know about using images
   (supported formats, where to store the images in your documentation
   directory, and how to reference them).
  </para>
  <sect2 id="sec.daps.quick.imgs.types">
   <title>Supported Image Types</title> 
  &daps-img-formats;
  </sect2>
  <sect2 id="sec.daps.quick.imgs.path">
   <title>Location of the Images</title>
   <para>
    &dapsacr; requires a certain directory structure for your XML sources and
    for your images that you want to reference there. For details, refer to 
  <xref linkend="ex.daps.dir.doc" xrefstyle="select:title"/>. Depending on 
    the file type of your source images, add them to the respective
    subdirectories in
    <filename><replaceable>YOUR_DOC_DIR</replaceable>/images/src</filename>.
  </para>
   <important>
    <title>Unique Image Names</title>
    <para>
     The base names of your images need to be unique throughout the image
     subdirectories. If, for example,
            <filename>images/src/svg/AAA.svg</filename> and
     <filename>images/src/png/AAA.png</filename> exist, there is no way to
     predict which one will show up in your output documents (due to image
     processing being done in parallel processes). The basename of the image
          needs to be different, for example:
            <filename>images/src/svg/AAA.svg</filename> and
     <filename>images/src/svg/BBB.png</filename>. Use &dapsacr;' subcommand
     <command>warn-images</command> to earch for image names not being unique:
    </para>
    <screen>$ daps -d <replaceable>PATH_TO_DOC_DIR/DC-FILE</replaceable> warn-images</screen>
   </important>
  </sect2>

  <sect2 id="sec.daps.quick.imgs.refer">
   <title>Referencing Images</title>
   <para>
    Provided your images are located in the required default directory,
    &dapsacr; automatically finds the path to your images. Therefore
    referencing images in your XML sources is very straightforward: you do not
    need to include any path in the <sgmltag
     class="attribute">fileref</sgmltag> attribute&mdash;the file name is
    enough.
   </para>
   <para>
    Furthermore DocBook allows you to insert more than one image to
    distinguish between different target formats. For example, you can add two
    images pointing to the same file, but with different widths. Use the
    <sgmltag class="attribute">role</sgmltag> attribute and add the name of
    the target format (<sgmltag class="attvalue">fo</sgmltag>, <sgmltag
     class="attvalue">html</sgmltag>, etc.) See <xref
     linkend="ex.xml.img.ref"/>.
  </para>
   <example id="ex.xml.img.ref">
    <title>Image Reference in an XML File</title>
    <screen>&lt;figure&gt;
  &lt;title&gt;Main Window&lt;/title&gt;
  &lt;mediaobject&gt;
    &lt;imageobject role="fo"&gt;
      &lt;imagedata fileref="screenshot.png" width="70%"/&gt;
    &lt;/imageobject&gt;
    &lt;imageobject role="html"&gt;
      &lt;imagedata fileref="screenshot.png" width="75%"/&gt;
    &lt;/imageobject&gt;
  &lt;/mediaobject&gt;
&lt;/figure&gt;</screen>
   </example>
  </sect2>
 </sect1>

 <sect1 id="sec.daps.quick.syntax">
  <title>Basic &dapsacr; Syntax</title>
  <para>
   Before introducing the key <command>daps</command> commands to create
   output formats from your XML documents, let's get familiar with the basic
   syntax of the <command>daps</command> command:
  </para>
  <screen>$ daps [--global-options] "subcommand" [--command-options] [arguments]</screen>
  <para>
   <xref linkend="ex.daps.syntax"/> shows an example command that generates 
   HTML output. Global options are used to specify the level of verbosity, and 
   the &dclong; file for creating the output.
  </para>

  <example id="ex.daps.syntax">
   <title>&dapsacr; Syntax </title>
   <screen>daps --debug<co id="co.daps.syntax.vv"/> -d<co id="co.daps.syntax.dc"/> DC-daps-example html<co id="co.daps.syntax.output"/> --static<co id="co.daps.syntax.static"/>
   </screen>
   <calloutlist>
    <callout arearefs="co.daps.syntax.vv">
     <para>
      Global Option <option>--debug</option>: Sets the highest verbosity level
      (number of messages shown during the transformation process from XML to
      HTML). In this case, debug messages are shown.
     </para>
    </callout>
    <callout arearefs="co.daps.syntax.dc">
     <para>
      Global Option <option>-d</option>: Defines the realtive or absolute path
      to the &dclong; file. In this example <command>daps</command> is called
      in the same directory that holds the &dclong; file.
     </para>
    </callout>
    <callout arearefs="co.daps.syntax.output">
     <para>
      Subcommand <command>html</command>: Defines the output format to create. 
   </para>
    </callout>
    <callout arearefs="co.daps.syntax.static">
     <para>
      Command option <option>--static</option>: Tells &dapsacr; to copy CSS
      and image files to the same location like the HTML files. For more
      information, see <xref linkend="table.daps.output.overview"/>.
     </para>
    </callout>
   </calloutlist>
  </example>
  <para>
   Generally, &dapsacr; can be executed with or without options. To view 
   the global options and the available subcommands, use the command:
  </para>
  <screen>$ daps help</screen>
  <para>
   For a short help text on a specific <emphasis>subcommand</emphasis>, use:
  </para>
  <screen>$ daps help <replaceable>subcommand</replaceable></screen>
  <para>
   For example, if you want more information about generating HTML output,
   run:
  </para>
  <screen>$ daps help html</screen>
  <para>
   The following section introduces the key <command>daps</command> commands
   needed to create output formats from XML files. All examples are based on
   the example files that are provided by the &dapsacr; initialization script.
 For more information, refer to <xref linkend="sec.daps.quick.init"/>.
  </para>
 </sect1>
 <sect1 id="sec.daps.quick.output">
  <title>Output Formats</title>
  <para>&dapsacr; supports a number of different output formats, including
   <quote>exotic</quote> formats like man pages or ASCII text. <!--For an
   overview of the available output formats, run <command>daps
   help</command>. The output formats are listed below
   <menuchoice><guimenu>Subcommands</guimenu> <guimenu>Generate
   Books</guimenu> </menuchoice>.-->
  </para>
  <para>
   By default, the DocBook stylesheets are used for generating output formats.
   But &dapsacr; also allows you to customize your output formats in a very
   flexible way. <remark>taroth 2012-03-19: add xref to advanced
    chapter</remark>
  </para>
  <sect2 id="sec.daps.quick.output.validate">
   <title>Validation</title>
   <para>
    Generating any output requires that your XML files are well-formed and can
    be validated. As soon as any output command is executed, &dapsacr;
  automatically runs a validation check first&mdash;if it fails, &dapsacr; 
    returns the parser errors. They include information about the type of
    error, the respective file name and the line number where the error
    occured. <!-- In addition, &dapsacr; shows the path to the profiled XML
    sources and the total number of errors. -->
   </para>
    <remark>toms, 2012-04-15: It seems "profiled XML" isn't definied
        yet, is it? Either completely be silent about profiled XML
        sources or add a small section about the why's and how's. :) I
        would tend to remove this as it is a Quick Start and such detail
        can be explained in the User's Guide.</remark>
   <example>
    <title>Parser Output For Validation Errors (link to unknown ID)</title>
    <screen>daps_user_concept.xml:60: element xref: validity error: 
IDREF attribute linkend references an unknown ID "itl.daps.user.inst.other.req"
Document /local/svn/daps-svn/daps/doc/build/.profiled/x86-amd64-em64t_osuse_/
MAIN.DAPS.xml does not validate
make: *** [validate] Error 3</screen>
     
   </example>
  </sect2>
  <sect2 id="sec.daps.quick.output.syntax">
   <title>Basic Syntax for Generating Output</title>
   <para>
    Independent of the individual output format you want to create, you need
    to specify the &dclong; file to use:
   </para>
   <screen>$ daps -d <replaceable>DC_FILE</replaceable> <replaceable>OUTPUT_FORMAT</replaceable></screen>
   <para>For example:</para>
   <screen>$ daps -d DC-daps-example color-pdf</screen>
   <para>
    If your current directory is not the documentation directory where the
    &dc; file is located, also specify the (absolute or relative) path to the
    &dc; file. For example:
   </para>
   <screen>$ daps -d /svn/daps/example/DC-daps-example color-pdf</screen>
   <para>
    At the end of the transformation process, &dapsacr; shows a message where
    to find the generated output.
   </para>
  </sect2>

  <sect2 id="sec.daps.quick.output.formats">
   <title>Generating Different Output Formats</title>
   <para>
    The following table gives an overview of the &dapsacr; subcommands for
    generating output formats.
   </para>
   <table id="table.daps.output.overview">
    <title>&dapsacr; Output Commands and Formats</title>
    <tgroup cols="3">
     <colspec colnum="1" colname="1" colwidth="20*"/>
     <colspec colnum="2" colname="2" colwidth="40*"/>
     <colspec colnum="3" colname="3" colwidth="40*"/>
     <thead>
      <row>
       <entry>
        <para>Subcommand</para>
       </entry>
       <entry>
        <para>Output</para>
       </entry>
       <entry>
        <para>Note</para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para>color-pdf</para>
       </entry>
       <entry>
        <para>
         Creates a color PDF (without any cropmarks). Open the result in
         a PDF viewer.
        </para>
       </entry>
       <entry>
        <para>
         Requires an FO formatter. <!--It is also possible to create one PDF 
        containing all the contents of a <sgmltag>set</sgmltag>&mdash; however,
        for large documentation projects you might run into problems with the
         java memory stack.-->
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>pdf</para>
       </entry>
       <entry>
        <para>
         Creates a black-and-white PDF with crop marks (currently only
         supported by the XEP FO formatter), suitable for hand-off to a printing
         shop.  Open the result in a PDF viewer.
        </para>
       </entry>
       <entry>
        <para>
         Requires an FO formatter. All color images are automatically 
         converted to greyscale images.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>html</para>
       </entry>
       <entry>
        <para>
         Creates a subdirectory containing individual HTML files for 
         all chapters of a book (including also preface, glossary or
         appendix files).<!--They are named according to the ID of the
         respective root element.--> Open the generated
         <filename>index.html</filename> file in a Web browser to view the
         generated HTML from the starting point (ROOTID of the top-level
         element).
        </para>
       </entry>
       <entry>
        <para>
         Images and CSS files are only linked in the HTML result
         directory. To copy these files to the same location like the HTML
         files, use the <option>--static</option> option. This is useful for
         creating distributable HTML builds.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>html-single</para>
       </entry>
       <entry>
        <para>
         Creates a single HTML file, named after the &dc; file used 
         to create the output. Open the generated <filename>*.html</filename>
         file in a Web browser.
        </para>
       </entry>
       <entry>
        <para>
         Single HTML files are more convenient for full text searches.
         Images and CSS files are only linked in the HTML result directory. To
         copy these files to the same location like the HTML files, use the
        <option>--static</option> option. This is useful for creating 
        distributable HTML builds.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>epub</para>
       </entry>
       <entry>
        <para>
         Creates an &epub; document. Open the result in an portable e-book
         reader (or with  a software like Calibre).
        </para>
       </entry>
       <entry>
        <para>
         <remark>taroth 2012-03-23: check with fs/toms: only books? what about 
        conversion of articles to epub?</remark>
         <remark>toms, 2012-04-15: This seems to be an issue with the
           current DocBook stylesheets. Need to check this.</remark>
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>webhelp</para>
       </entry>
       <entry>
        <para>
         Creates a DocBook &webh; output. Open the generated
         <filename>index.html</filename> file in a Web browser to view the
         generated HTML from the starting point (ROOTID of the top-level
         element).
        </para>
       </entry>
       <entry>
        <para>
         Experimental feature. Requires a very recent version of the
         DocBook stylesheets. DocBook WebHelp consists of HTML pages with an
         additional pane, featuring a table of contents and a search function.
         The table of contents can be expanded and collapsed and is
         automatically synchronized with the contents pane. The search
         function weights the search results so that the most relevant results
         are listed first.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>txt</para>
       </entry>
       <entry>
        <para>
         Creates an ASCII text output. Open the result in a text editor.
        </para>
       </entry>
       <entry>
        <para>
         All images are removed from the output, but their location
      is indicated in the text by printing the respective image base name in 
      square brackets. A table of contents is automatically generated and is 
         available at the beginning of the text document.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>man</para>
       </entry>
       <entry>
        <para>Creates one or multiple man pages.
        </para>
       </entry>
       <entry>
        <para>
         To create man pages, your XML files must contain at least one
         <sgmltag>refentry</sgmltag> be it in a <sgmltag>chapter</sgmltag>,
                    <sgmltag>appendix</sgmltag>, or collected in a
         <sgmltag>reference</sgmltag> element. When processing a DocBook
         document with multiple <sgmltag>refentry</sgmltag> elements
         (regardless where it appears), &dapsacr; generates one man page file
         per <sgmltag>refentry</sgmltag> element. All other parts of the
         document will be ignored.
        </para>
        <!--taroth 2012-04-11: additional
        information to be covered in User Guide: The filename for each man
        page is generated from refentry content elements. The filename prefix
        is the refname, and the suffix is the manvolnum from within the
        refmeta element. If you are processing many refentrys from the same
        document, make sure they will all produce unique filenames, or else
        any duplicates will overwrite each other.-->
       </entry>
      </row>
      <row>
       <entry>
        <para>jsp</para>
       </entry>
       <entry>
        <para>
         Creates Java Server Pages (JSP files). The generated
         <filename>jsp</filename> subdirectory contains individual JSP files
         for all chapters of a book (including also preface, glossary or
         appendix files).
         <!--They are named according to the ID of the respective 
       root element.-->
        </para>
       </entry>
       <entry>
        <para>
         A JSP file is an HTML page containing a reference to Java
         servlets or Java Server Side Applets.
        </para>
       </entry>
      </row>
      <row>
       <entry>
        <para>wiki
        </para>
       </entry>
       <entry>
        <para>
         Creates a MediaWiki output in a single file. Open the result in a 
         text or MediaWiki editor, and use it as raw input for a MediaWiki
         article.
        </para>
       </entry>
       <entry>
        <para>
         Experimental feature. The output is very basic: Section titles
         are converted in headlines according to their hierarchy, itemized
         lists, ordered lists and <sgmltag>screen</sgmltag> elements are
         converted to the respective MediWiki elements.
        </para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  </sect2>
  <sect2 id="sec.daps.quick.output.adv">
   <title>Advanced Output Options</title>
   <para>
    Instead of always building your complete documentation project
    (<sgmltag>set</sgmltag>, <sgmltag>book</sgmltag>, or
    <sgmltag>article</sgmltag>), &dapsacr; also allows you to build an
    individual <sgmltag>chapter</sgmltag> or <sgmltag>part</sgmltag>. If you
    want the output format to include <sgmltag>remark</sgmltag> elements or to
    be marked as a <literal>draft</literal> version, you can tell &dapsacr; to
    do so.
   </para>
   <sect3 id="sec.daps.quick.output.adv.partial">
    <title>Partial Builds</title>
    <para>
     The <quote>starting point</quote> of your documentation project is
     usually the root element defined in the Main file that is referenced in
     the respective &dclong;. Alternatively, specify a ROOTID on the command
     line by using the <option>--rootid</option> option. This also allows you
     to build only a part of your documentation project by using the ID of a
     <sgmltag>book</sgmltag>, <sgmltag>article</sgmltag>,
     <sgmltag>glossary</sgmltag>, <sgmltag>appendix</sgmltag>,
     <sgmltag>part</sgmltag>, or <sgmltag>chapter</sgmltag> element.
    </para>
    <para>
     For example, if you have set up your working environment with 
    <command>daps-init</command> and an example <sgmltag>book</sgmltag>,
    use the following command to build the first chapter of the book 
     (without the book's title page, table of contents etc.):
    </para>
    <screen>$ daps -d DC-daps-example color-pdf --rootid=cha.template.examples</screen>
   </sect3>
   <sect3 id="sec.daps.quick.output.adv.review">
    <title>Output with Remarks or Draft Watermark</title>
    <para>
     For publishing a pre-release version of a document that you
          might want to send to a proofreader for review, use the local
     <option>--draftd</option> option to mark the document as
     <literal>DRAFT</literal> version.
    </para>
    <para>
     For example, use the following command to build a color PDF
     that has a <literal>DRAFT</literal> watermark printed on each page:
    </para>
    <screen>$ daps -d DC-daps-example color-pdf --draft</screen>

    <para>
     If you used  <sgmltag>remark</sgmltag> elements in your XML files (for 
    editorial remarks or questions to the proofreader), include the remarks 
     in the output with the <option>--remarks</option> option:
    </para>
    <screen>$ daps -d DC-daps-example color-pdf --remarks</screen>
    <para>
     By default, the content of remark elements is shown in italics in 
     the output format. Enabling remarks automatically turns draft mode on.
    </para>
    <note>
     <title>Output with Remarks or Draft Watermark</title>
     <para>
      The command options <option>--draft</option> option and
      <option>--remarks</option> are supported for HTML and PDF, but not for
      all &dapsacr; output formats.</para>
    </note>
    <para>
     By default, &dapsacr; adds a string to the base name of the output file
     to flag output formats generated with special options. Example file names
    are <filename>daps-example_draft_en.pdf</filename> or 
     <filename>daps-example_remarks_draft_en.pdf</filename>.
    </para>
   </sect3>
  </sect2>
 </sect1>
 <sect1 id="sec.daps.quick.migrate">
  <title>Migration of Existing DocBook Projects</title>
  <para>
   This section provides instructions how to migrate existing DocBook 
  projects so that you can use &dapsacr; for managing and publishing them.
   </para>
  <procedure id="pro.daps.quick.migrate">
   <title>Migrating DocBook Projects</title>
   <step>
    <para>
     If your XML files are distributed across several subdirectories, flatten
     the hierarchy and put all XML files directly into the
     <filename>xml</filename> subdirectory that is required by &dapsacr;. See
     <xref linkend="ex.daps.dir.doc"
      xrefstyle="select:title"/>. Hosting multiple documentation projects in
     the same <filename>xml</filename> directory is fine as long as the file
     names are unique. You can put multiple Main files there.
    </para>
   </step>
   <step>
    <para>
     If you have any XIncludes or entity declaration files, also
     put them into the  <filename>xml</filename> subdirectory.
    </para>
   </step>
   <step>
    <para>
     Depending on the file type of your source images, add them to the 
    respective subdirectories in 
    <filename><replaceable>YOUR_DOC_DIR</replaceable>/images/src</filename>. 
    The <filename>image</filename> directory and its substructure is required
     by &dapsacr;. For details, refer to  <xref linkend="ex.daps.dir.doc"
      xrefstyle="select:title"/>.
    </para>
   </step>
   <step>
    <para>
     Make sure that the base names of your image files are unique. For details,
     refer to <xref linkend="sec.daps.quick.imgs.path"/>.
    </para>
   </step>
   <step>
    <para>
     Adjust all references of image files, Xincludes, and entity declarations,
    in the existing XML files to match the structure required by &dapsacr;. 
     The references must not include any absolute or relative path, the plain
     file name is  enough. <remark>taroth 2012-04-12: maybe add examples for
      image names, Xincludes and entity-decl? see commented section
      below</remark>
    </para>
   </step>
   <step>
    <para>
     For each deliverable (book, article, set) that you want to generate from
     your XML files, create a &dclong; file. For more information, refer to
     <xref linkend="sec.daps.quick.basics.files"/>. Find a template
     for &dc; files in your installed system in
   <filename>/usr/share/daps/init_templates/DC-file.template</filename>.
  </para>
   </step>
  </procedure>
 </sect1>
 <!--<sect1 id="sec.daps.quick.trouble">
  <title>Troubleshooting</title>
  <para></para>
 </sect1>-->
  
   <!-- <sect1>
   <title>Migration of Existing Projects</title>
   <para>You can also use existing projects. SUSEdoc projects are
          easy to transform into a &dapsacr; project. In the bottom you 
          will see something about using your own and existing project.
            By the way SUSEdoc is the predecessor of Daps.</para>
   <para>
    <warning>
     <para>Daps support only DocBook 4.x. Support for DocBook 5.x is planned.</para>
    </warning>
   </para>
   <sect2>
    <title></title>
    <variablelist>
     <varlistentry>
      <term>The Directory Structure to use an existing Project:</term>
      <listitem>
       <screen>
xml/*.ent
xml/*.xml
images/(Type)/data
                        </screen>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>
   <sect2>
    <title>The basenames of Images must be unique different</title>
    <para>The images basenames need to be unique throughout different
        directories. Therefore using names <filename>images/png/AAA.png</filename> and
        <filename>images/svg/AAA.svg</filename> is not an option it should be different. For
        Example: <filename>images/svg/BBB.svg</filename> and <filename>images/png/AAA.png</filename>
    </para>
   </sect2>
   <sect2>
    <title>Adjustment for XML</title>
    <para>Linking of Images:</para>
    <formalpara>
     <title>wrong:</title>
     <para>
      <literal>&lt;imagedata fileref="images/png/foo.png"/></literal>
     </para>
    </formalpara>
    <formalpara>
     <title>correct:</title>
     <para>
      <literal>foo.png</literal>
     </para>
    </formalpara>


    <para>Please take only the name of the image.</para>
    <para>Look at the following to learn to adjust your Header data for XML:</para>
    <screen>&lt;!DOCTYPE ...
[
  &lt;!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  &lt;!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]></screen>
   </sect2>
   <sect2>
    <title>Migrate SUSEdoc Projects</title>
    <para> See here to migrate your SUSEdoc Project:
                /usr/share/doc/packages/daps/README</para>
   </sect2>
  </sect1>
 -->
   
        <!--
        <title>Terminology</title>
        <para>The following terms are used in this article:</para>
        <variablelist>
            <varlistentry>
                <term>DocBook</term>
                <listitem>
                    <para>DocBook is a semantic markup language for technical documentation
                        published as a DTD.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>DTD</term>
                <listitem>
                    <para>DTD (Document type definition) defines exactly the elements, entities
                        attributes and structure in a XML or HTML document.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Formatting</term>
                <listitem>
                    <para>Is the process of converting a XSL-FO file into PDF with the help of a FO
                        formatter.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>FO Formatter</term>
                <listitem>
                    <para>Renders XSL-FO documents usually into PDF. The output formats depends on
                        the formatter.For example FOP and XEP</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>FOP</term>
                <listitem>
                    <para>FOP (Formatting Objects Processor) converts XSL-FO in to printable
                        formats. </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Transformation</term>
                <listitem>
                    <para>Data transformation converts data from source data format into a
                        destination data for example. Is the process of converting the XML document
                        into a target format, for example HTML. This process uses the XSLT
                        stylesheet with the assistance of an XSLT processor.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Validation</term>
                <listitem>
                    <para>Validation is a control process for XML documents by using a DTD.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>XSL-FO</term>
                <listitem>
                    <para>XSL-FO or <emphasis>Extensible Stylesheet Language-Formatting
                            Objects</emphasis> is a markup language to generate PDFs with XML
                        documents.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>XSLT</term>
                <listitem>
                    <para>XSLT or <emphasis>Extensible Stylesheet Language for
                            Transformations</emphasis> is a language based on XML and it is used for
                        transformation of XML documents</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>XML</term>
                <listitem>
                    <para>XML (extensible markup language) is a language with rules to encode
                        documents into machine-readable form.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>XOP</term>
                <listitem>
                    <para>XOP (XML-binary Optimized Packaging) is an advice of the W3C to represent
                        the binary data of XML documents. </para>
                </listitem>
            </varlistentry>
        </variablelist>-->

 <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="common_gfdl_i.xml"/>
</article>
