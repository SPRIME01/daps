<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet
 href="urn:x-suse:xslt:profiling:docbook45-profile.xsl" 
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd"
[<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<article lang="en" id="art.daps.quickstart">
 <?suse-quickstart columns="no" version="2"?>
 <title>&dapsacr; Quick Start</title>
 <articleinfo>
  <author>
   <firstname>Christopher-Julian</firstname>
   <surname>Zwickl</surname>
  </author>
  <author>
   <firstname>Tanja</firstname>
   <surname>Roth</surname>
  </author>
 </articleinfo>
 <abstract>
  <para>&daps-description-long;</para>
 </abstract>
 <sect1 id="sec.daps.quick.audience">
  <title>Target Audience</title>
  <para>&audience;</para>
 </sect1>
  <sect1 id="sec.daps.quick.inst">
<title>Installing &dapsacr;</title>
 <para>The &dapslong; can be installed and used on any Linux distribution. 
  Currently, &dapsacr; is available as RPM package for the &osuse; distribution.
  <remark>taroth 2012-03-20: (and the &sle; products based on &osuse;)???</remark>
  Eventually, RPM packages for further distributions may become available. 
  In the meantime, you can download a tarball with the &dapsacr; sources 
  <remark>taroth 2012-03-07: add from where: http://daps.sourceforge.net???</remark>
  and install them on any distribution with <literal>configure</literal>, 
  <literal>make</literal>, and <literal>make install</literal>. 
 </para>

 
 <sect2 id="sec.daps.quick.inst.osuse">
  <title>Installing &dapsacr; on &osuse;</title>
  <para>For &osuse;, the <systemitem class="resource">daps</systemitem> package is 
  available from the <literal>Documentation:Tools</literal> repository at 
  <ulink url="http://download.opensuse.org/repositories"></ulink>. 
  For the complete path to the repository, you need to add the version number 
  of your &osuse; installation. For example, the complete repository URL for &osuse;
  <productnumber>12.1</productnumber> would be:
<ulink url="http://download.opensuse.org/repositories/Documentation:/Tools/openSUSE_12.1/"></ulink></para>  
 
  <para>For basic details on how to add software repositories and how to install 
  software on &osuse;, refer to the &osuse; <citetitle>Reference
  Guide</citetitle>. The guide is part of the &osuse; documentation and
  available from <ulink url="http://www.suse.com/documentation"></ulink>. 
  </para>
  <para>Choose one of the following installation methods:</para>
  <variablelist>
   <varlistentry>
    <term>1-Click Installation from the Internet</term>
    <listitem>
     <para>Follow the instructions in the &osuse; 
     <citetitle>Reference Guide</citetitle>, chapter 
    <citetitle>Installing Packages from the Internet</citetitle>. Search for 
    the <systemitem class="resource">daps</systemitem> package that matches your 
    &osuse; version. From the listed results, install the package that is provided 
    by the repository <literal>Documentation:Tools</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Installation with &yast; (GUI)</term>
    <listitem>
     <para>Follow the instructions in the &osuse; 
     <citetitle>Reference Guide</citetitle>, chapter 
    <citetitle>Installing Or Removing Software</citetitle>. Add the 
    <literal>Documentation:Tools</literal> repository that matches your &osuse;
    version&mdash;see the introduction to this section. From this repository, 
    install the <systemitem class="resource">daps</systemitem> package.
    </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Installation with <command>zypper</command> (command line)</term>
    <listitem>
     <para>
     Follow the instructions in the &osuse; 
     <citetitle>Reference Guide</citetitle>, chapter 
    <citetitle>Managing Software with Command Line Tools</citetitle>. Add the 
    <literal>Documentation:Tools</literal> repository that matches your &osuse;
    version&mdash;see the introduction to this section. From this repository, 
    install the <systemitem class="resource">daps</systemitem> package.</para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>All of the installation methods above automatically resolve 
  any dependencies to other packages that are required by &dapsacr;. </para>
 </sect2>
 <sect2 id="sec.daps.quick.inst.other">
  <title>Installing &dapsacr; on Other Linux Distributions</title>
  <para>For installation on other Linux distributions, the &dapsacr; sources
  are available as tarball.<remark>taroth 2012-03-07: from???</remark> They can
  be installed with <literal>configure</literal>, 
  <literal>make</literal>, and <literal>make install</literal> as described in 
  <xref linkend="pro.daps.quick.inst.tarball"/>.</para>
  <para>Before starting the installation, make sure the following 
  packages or tools are installed on your system:</para>
  <itemizedlist id="itl.daps.quick.inst.other.req">
   <title>Software Requirements</title>
   <listitem>
    <para>automake</para>
   </listitem>
   <listitem>
    <para>convert (included in the 
    <systemitem class="resource">ImageMagick</systemitem> package)</para>
   </listitem>
   <listitem>
    <para>DocBook 4</para>
   </listitem>
   <listitem>
    <para>DocBook 4 Stylesheets (usually a separate package)</para>
   </listitem>
   <listitem>
    <para>make</para>
   </listitem>
   <listitem>
    <para>xmlcatalog (usually part of the package 
   <systemitem class="resource">libxml2</systemitem>, 
   <systemitem class="resource">libxml-utils</systemitem>, or 
   <systemitem class="resource">libxml-tools</systemitem>)</para>
   </listitem>
   <listitem>
    <para>xmllint (usually part of the package 
   <systemitem class="resource">libxml2</systemitem>, 
   <systemitem class="resource">libxml-utils</systemitem>, or 
   <systemitem class="resource">libxml-tools</systemitem>)</para>
   </listitem>
   <listitem>
    <para>xsltproc (if not available as a separate package, it may be included in
    <systemitem class="resource">libxslt</systemitem>)</para>
   </listitem>
  </itemizedlist>

  <procedure id="pro.daps.quick.inst.tarball">
   <title>Installing the &dapsacr; Sources</title>
   <step>
    <para>Download the &dapsacr; source tarball from 
   <ulink url="http://daps.sourceforge.net"></ulink>.
   <remark>taroth 2012-03-07: todo - URL may still change, check with fs</remark>
    </para>
   </step>
   <step>
    <para>Create a new directory in your file system and unpack the tarball there:</para>
    <!--<screen>tar xvf TARBALLNAME .</screen>-->
   </step>
   <step id="daps.quick.inst.configure">
    <para>Change to the newly created directory and start the configure script:</para>
    <screen>./configure</screen>
    <para>The script checks your system for any software relevant to &dapsacr; or
    the &dapsacr; installation process. It also creates a makefile that will
    be used during installation. Based on the analysis, the script shows a 
    summary that includes the following information:</para>
    <itemizedlist>
     <listitem>
      <para>the &dapsacr; installation paths,</para>
     </listitem>
     <listitem>
      <para>an overview of &dapsacr; features that will be available on your 
      system if you install &dapsacr; now, and </para>
     </listitem>
     <listitem>
      <para>which software is still missing to enable the remaining &daps; 
      features as well.</para>
     </listitem>
    </itemizedlist>
   </step>
   <step>
    <para>Check the summary carefully.</para>
   </step>
   <step>
    <para>Install missing packages, if necessary. After installing new packages, 
    repeat <xref linkend="daps.quick.inst.configure"/> and check the summary again.</para>
   </step>
   <step>
    <para>If you want to adjust the &dapsacr; installation paths, check which 
    options are available:</para>
    <screen>./configure --help</screen>
    <para>To create a makefile with custom installation paths, run the configure 
    script with the desired option.</para>
   </step>
   <step>
    <para>If everything is prepared according to your wishes, enter:</para>
    <screen>make</screen>
   </step>
   <step>
    <para>To start the installation process, enter:</para>
    <screen>make install</screen>
   </step>
  </procedure>
   <para>
    <remark>taroth 2012-03-07: todo check what happens at the end of 
   make install - do any messages appear?</remark>
   </para>
  </sect2>
 </sect1>
 <sect1>
  <title>Creating a Project from scratch</title>
  <para>Use the steps in the bottom to create a project from the scratch. You will see all
            functions to create a new project with the command:</para>
  <screen>daps init --help</screen>
  <procedure>
   <step>
    <para>Create a directory with the name <filename>dapstest</filename>.</para>
    <screen>$ mkdir YOUR_PATH/dapstest</screen>
   </step>
   <step>
    <para>Enter the command to create the dapstest directory:</para>
    <screen>$ daps --basedir=YOUR_PATH/dapstest --envfile=ENV-test-daps init</screen>
   </step>
  </procedure>
 </sect1>
 <sect1>
  <title>Existing Projects</title>
  <para>You can also use existing projects. SUSEdoc projects are
          easy to transform into a &dapsacr; project. In the bottom you 
          will see something about using your own and existing project.
            By the way SUSEdoc is the predecessor of Daps.</para>
  <para>
   <warning>
    <para>Daps support only DocBook 4.x. Support for DocBook 5.x is planned.</para>
   </warning>
  </para>
  <sect2>
   <title></title>
   <variablelist>
    <varlistentry>
     <term>The Directory Structure to use an existing Project:</term>
     <listitem>
      <screen>
xml/*.ent
xml/*.xml
images/(Type)/data
                        </screen>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
  <sect2>
   <title>The basenames of Images must be unique different</title>
   <para>The images basenames need to be unique throughout different
        directories. Therefore using names <filename>images/png/AAA.png</filename> and
        <filename>images/svg/AAA.svg</filename> is not an option it should be different. For
        Example: <filename>images/svg/BBB.svg</filename> and <filename>images/png/AAA.png</filename>
   </para>
  </sect2>
  <sect2>
   <title>Adjustment for XML</title>
   <para>Linking of Images:</para>
   <formalpara>
    <title>wrong:</title>
    <para>
     <literal>&lt;imagedata fileref="images/png/foo.png"/></literal>
    </para>
   </formalpara>
   <formalpara>
    <title>correct:</title>
    <para>
     <literal>foo.png</literal>
    </para>
   </formalpara>


   <para>Please take only the name of the image.</para>
   <para>Look at the following to learn to adjust your Header data for XML:</para>
   <screen>&lt;!DOCTYPE ...
[
  &lt;!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  &lt;!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]></screen>
  </sect2>
  <sect2>
   <title>Migrate SUSEdoc Projects</title>
   <para> See here to migrate your SUSEdoc Project:
                /usr/share/doc/packages/daps/README</para>
  </sect2>
 </sect1>
 <sect1>
  <title>Generating output formatts</title>
  <para>In the following points you will see the procedure of transforming formats into a
            other format. For example: XML into PDF. You can find the results in the Build-Directory. </para>
  <sect2>
   <title>Creating PDF</title>
   <para> To transform XML into PDF, you need an existing project(as shown in section 4),
                use the following steps:</para>
   <procedure>
    <step>
     <para> Enter the following command:</para>
     <screen>$ daps -e <replaceable>ENV_mybook</replaceable> color-pdf</screen>
    </step>
   </procedure>
   <para>Finish. Your XML file is now transformed PDF file. You can find the PDF in your
                daps repository. To generat a printable PDF switch "color-pdf" into "pdf".</para>
  </sect2>
  <sect2>
   <title>Creating &epub;</title>
   <para>To transform XML into &epub;, you need an existing project(as shown in the section
                4), use the following steps.</para>
   <procedure>
    <step>
     <para>Enter in your konsole:</para>
     <screen>$ daps -e <replaceable>ENV_mybook</replaceable> epub</screen>
    </step>
    <step>
     <para>Finish. Your XML file is now transformed &epub; file. The result is in the
                        daps repository. Open the result with an EBook reader like calibre.</para>
    </step>
   </procedure>
  </sect2>
  <sect2>
   <title>Creating HTML</title>
   <procedure>
    <step>
     <para>Enter in your konsole:</para>
     <screen>$ daps -e --static ENV_DATA html</screen>
    </step>
    <step>
     <para>Finish. Your XML file is now a HTML file. The result is in the daps
                        repository. Open the result with an Browser.</para>
    </step>
   </procedure>
  </sect2>
 </sect1>
    <!--<sect1>    
    <title>Create Distributable Archives</title>
        <para> To create a distributable archives read the following:</para>
        <itemizedlist>
            <listitem><para></para></listitem>
            <listitem><para></para></listitem>
            <listitem><para></para></listitem>
            <listitem><para></para></listitem>
        </itemizedlist>
        
        </sect1>-->
 <sect1>
  <title>Advanced usage of &daps;</title>
  <para>In the following you will learn the advanced usage of &daps; and you will see the explanation of the syntax.</para>
  <screen>$ daps [--global-options] "subcommand" [--command-options] [arguments]</screen>
  <para>For example:</para>
  <screen>daps -vv<co id="co.daps.vv"/> \
  -e ENV_DATA<co id="co.daps.env"/> \
  html<co id="co.daps.html"/>
  </screen>
  <calloutlist>
   <callout arearefs="co.daps.vv">
    <para>Global Option = -vv (verbose print more debug messages)</para>
   </callout>
   <callout arearefs="co.daps.env">
    <para>Global Option = -e (defines the ENV file)</para>
   </callout>
   <callout arearefs="co.daps.html">
    <para>Subcommand = html (what to create)</para>
   </callout>
  </calloutlist>
  <para>DAPS can be executed with or without options, depending on the project.</para>
  <para>If the directory contains only one ENV file:</para>
  <screen>daps "subcommand"</screen>
  <para>If the directory contains more than one ENV-Data</para>
  <screen>$ daps -e ENV-YOUR-DATA "subcommand"</screen>
  <para>Setup ENV-Data</para>
  <screen>$ source ENV-YOUR-DATA</screen>
  <screen>$ daps "subcommand"</screen>
  <para>Over configuration data <filename>~/.daps/conf</filename>:</para>
  <screen>DAPS_ENV_DEFAULT=ENV_YOUR_DATA</screen>
  <remark>Sascha Manns: Vielleicht FOPTYPE einbauen.</remark>
  <remark>Sonst klasse gemacht :-)</remark>
 </sect1>
   
        <!--
        <title>Terminology</title>
        <para>The following terms are used in this article:</para>
        <variablelist>
            <varlistentry>
                <term>DocBook</term>
                <listitem>
                    <para>DocBook is a semantic markup language for technical documentation
                        published as a DTD.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>DTD</term>
                <listitem>
                    <para>DTD (Document type definition) defines exactly the elements, entities
                        attributes and structure in a XML or HTML document.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Formatting</term>
                <listitem>
                    <para>Is the process of converting a XSL-FO file into PDF with the help of a FO
                        formatter.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>FO Formatter</term>
                <listitem>
                    <para>Renders XSL-FO documents usually into PDF. The output formats depends on
                        the formatter.For example FOP and XEP</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>FOP</term>
                <listitem>
                    <para>FOP (Formatting Objects Processor) converts XSL-FO in to printable
                        formats. </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Transformation</term>
                <listitem>
                    <para>Data transformation converts data from source data format into a
                        destination data for example. Is the process of converting the XML document
                        into a target format, for example HTML. This process uses the XSLT
                        stylesheet with the assistance of an XSLT processor.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Validation</term>
                <listitem>
                    <para>Validation is a control process for XML documents by using a DTD.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>XSL-FO</term>
                <listitem>
                    <para>XSL-FO or <emphasis>Extensible Stylesheet Language-Formatting
                            Objects</emphasis> is a markup language to generate PDFs with XML
                        documents.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>XSLT</term>
                <listitem>
                    <para>XSLT or <emphasis>Extensible Stylesheet Language for
                            Transformations</emphasis> is a language based on XML and it is used for
                        transformation of XML documents</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>XML</term>
                <listitem>
                    <para>XML (extensible markup language) is a language with rules to encode
                        documents into machine-readable form.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>XOP</term>
                <listitem>
                    <para>XOP (XML-binary Optimized Packaging) is an advice of the W3C to represent
                        the binary data of XML documents. </para>
                </listitem>
            </varlistentry>
        </variablelist>-->

 <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="common_gfdl_i.xml"/>
</article>
