<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet
 href="urn:x-suse:xslt:profiling:docbook45-profile.xsl" 
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.docbook.org/xml/4.5/docbookx.dtd"
[<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<article lang="en" id="art.daps.quickstart">
 <?suse-quickstart columns="no" version="2" color="daps" url="daps.sourceforge.net"?>
 <title>&dapsacr; Quick Start</title>
 <articleinfo>
  <author>
   <firstname>Christopher-Julian</firstname>
   <surname>Zwickl</surname>
  </author>
  <author>
   <firstname>Tanja</firstname>
   <surname>Roth</surname>
  </author>
 </articleinfo>
 <abstract>
  <para>&daps-description-long;</para>
 </abstract>
 <sect1 id="sec.daps.quick.audience">
  <title>Target Audience</title>
  <para>&audience;</para>
 </sect1>
 <sect1 id="sec.daps.quick.dbversions">
  <title>Supported DocBook Versions</title>
  <para>&daps-db-versions;</para>
 </sect1>
 <sect1 id="sec.daps.quick.req">
  <title>Requirements and Additional Software</title>
  <para></para>
  <sect2 id="sec.daps.quick.req.system">
   <title>System Requirements</title>
   &daps-sys-req;
  </sect2>
  <sect2 id="sec.daps.quick.req.addon">
   <title>Additional Software</title>
   &daps-addon;
  </sect2>
 </sect1>
 <sect1 id="sec.daps.quick.inst">
  <title>Installation</title>
  <para>The &dapslong; can be installed and used on any Linux distribution. 
  Currently, &dapsacr; is available as RPM package for the &osuse; distribution.
  <remark>taroth 2012-03-20: (and the &sle; products based on &osuse;)???</remark>
  Eventually, RPM packages for further distributions may become available. 
  In the meantime, you can download a tarball with the &dapsacr; sources 
  and install them on any distribution as described in
  <xref linkend="pro.daps.quick.inst.tarball"/>. 
 </para>
  <sect2 id="sec.daps.quick.inst.osuse">
   <title>Installing &dapsacr; on &osuse;</title>
   <para>For &osuse;, the <systemitem class="resource">daps</systemitem> package is 
  available from the <literal>Documentation:Tools</literal> repository at 
  <ulink url="http://download.opensuse.org/repositories"></ulink>. 
  For the complete path to the repository, add the version number of your &osuse; 
  installation. For example, the complete repository URL for &osuse;
  <productnumber>12.1</productnumber> is:
<ulink url="http://download.opensuse.org/repositories/Documentation:/Tools/openSUSE_12.1/"></ulink>
   </para>

   <para>For basic details on how to add software repositories and how to install 
  software on &osuse;, refer to the &osuse; <citetitle>Reference
  Guide</citetitle>. The guide is available from 
  <ulink url="http://www.suse.com/documentation"></ulink>. 
  </para>
   <para>Choose one of the following installation methods. Any dependencies to 
   other packages that are required by &dapsacr; are automatically resolved.</para>
   <variablelist>
    <varlistentry>
     <term>1-Click Installation from the Internet</term>
     <listitem>
      <para>Follow the instructions in the &osuse; 
     <citetitle>Reference Guide</citetitle>, chapter 
    <citetitle>Installing Packages from the Internet</citetitle>. Search for 
    the <systemitem class="resource">daps</systemitem> package that matches your 
    &osuse; version. From the listed results, install the package that is provided 
    by the repository <literal>Documentation:Tools</literal>.
     </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Installation with &yast; (GUI)</term>
     <listitem>
      <para>Follow the instructions in the &osuse; 
     <citetitle>Reference Guide</citetitle>, chapter 
    <citetitle>Installing Or Removing Software</citetitle>. Add the 
    <literal>Documentation:Tools</literal> repository that matches your &osuse;
    version&mdash;see the introduction to this section. From this repository, 
    install the <systemitem class="resource">daps</systemitem> package.
    </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>Installation with <command>zypper</command> (command line)</term>
     <listitem>
      <para>
     Follow the instructions in the &osuse; 
     <citetitle>Reference Guide</citetitle>, chapter 
    <citetitle>Managing Software with Command Line Tools</citetitle>. Add the 
    <literal>Documentation:Tools</literal> repository that matches your &osuse;
    version&mdash;see the introduction to this section. From this repository, 
    install the <systemitem class="resource">daps</systemitem> package.</para>
     </listitem>
    </varlistentry>
   </variablelist>

  </sect2>
  <sect2 id="sec.daps.quick.inst.other">
   <title>Installing &dapsacr; on Other Linux Distributions</title>
   <para>For installation on other Linux distributions, the &dapsacr; sources
  are available as tarball.<remark>taroth 2012-03-07: from???</remark> They can
  be installed with <literal>configure</literal>, 
  <literal>make</literal>, and <literal>make install</literal>.</para>

   <procedure id="pro.daps.quick.inst.tarball">
    <title>Installing the &dapsacr; Sources</title>
    <para>Before starting the installation, check the &dapsacr; 
   <xref linkend="sec.daps.quick.req.system" xrefstyle="select:title"/>
   and make sure to have all required packages and tools installed.</para>
    <step>
     <para>Download the &dapsacr; source tarball from 
   <ulink url="http://daps.sourceforge.net"></ulink>.
   <remark>taroth 2012-03-07: todo - URL may still change, check with fs</remark>
     </para>
    </step>
    <step>
     <para>Create a new directory in your file system and unpack the tarball there.</para>
    <!--<screen>tar xvf TARBALLNAME .</screen>-->
    </step>
    <step id="daps.quick.inst.configure">
     <para>Change to the newly created directory and start the configure script:</para>
     <screen>$ ./configure</screen>
     <para>The script checks your system for any software relevant to &dapsacr; or
    the &dapsacr; installation process. It also creates a makefile that will
    be used during installation. Based on the analysis, the script shows a 
    summary that includes the following information:</para>
     <itemizedlist>
      <listitem>
       <para>the &dapsacr; installation paths,</para>
      </listitem>
      <listitem>
       <para>an overview of &dapsacr; features that will be available on your 
      system if you install &dapsacr; now, and </para>
      </listitem>
      <listitem>
       <para>which software is still missing to enable the remaining &dapsacr; 
      features as well.</para>
      </listitem>
     </itemizedlist>
    </step>
    <step>
     <para>Check the summary carefully.</para>
    </step>
    <step>
     <para>Install missing packages, if necessary. After installing new packages, 
    repeat <xref linkend="daps.quick.inst.configure"/> and check the summary again.</para>
    </step>
    <step>
     <para>If you want to adjust the &dapsacr; installation paths, view the 
     available options:</para>
     <screen>$ ./configure --help</screen>
     <para>To create a makefile with custom installation paths, run the configure 
    script with the desired option.</para>
    </step>
    <step>
     <para>If everything is prepared according to your wishes, enter:</para>
     <screen>$ make</screen>
    </step>
    <step>
     <para>To start the installation process:</para>
     <screen>$ make install</screen>
    </step>
   </procedure>
   <para>
    <remark>taroth 2012-03-07: todo check what happens at the end of 
   make install - do any messages appear?</remark>
   </para>
  </sect2>
  <sect2 id="sec.daps.quick.inst.formatter">
   <title>Installing and Configuring the FO Formatter</title>
   <para>For installation and configuration of an FO formatter (for generating 
   PDF output), refer to the installation instructions of the product or your 
   system administrator. For FOP, you usually only need to install the 
   respective FOP package. However, not all FOP packages contain hyphenation 
   pattern files. <remark>taroth 2012-03-26: todo - mention download from 
   offo.sourceforeg.net in troubleshooting section and add xref</remark>
   </para>
  </sect2>
 </sect1>
 <sect1 id="sec.daps.quick.basics">
  <title>Defining Documentation Projects</title>
  <para>The easiest way to set up a new documentation project from scratch is to
 use the &dapsacr; initialization script. For instructions how to do so, refer
 to <xref linkend="pro.daps.init"/>. The script automatically creates the 
 <xref linkend="sec.daps.quick.basics.files" xrefstyle="select:title"/> and 
 <xref linkend="sec.daps.quick.basics.dirstruct" xrefstyle="select:title"/> 
 you need to get started with &dapsacr;.</para>
  <sect2 id="sec.daps.quick.basics.files">
   <title>Key Files</title>
   <para>The following key files define a documentation project so that 
   it can be processed by &dapsacr;:</para>
   <variablelist>
    <varlistentry>
     <term>Main File</term>
     <listitem>
      <para>An XML file containing the <quote>starting point</quote> (the 
     highest-level object) of your documentation project (for example, 
     <sgmltag>book</sgmltag> or <sgmltag>article</sgmltag>). 
    For larger documentation projects, it is good practice to name the file 
    <filename>MAIN-<replaceable>PROJECTNAME</replaceable>.xml</filename>, 
    but you can use any other filename as well.</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>&dclong; (&dc;) File</term>
     <listitem>
      <para>
      A configuration file defining a number of parameters for your
      documentation project (for example, the main file, layout variants, or 
      which profiling information to use). Of the multiple parameters that can 
      be set  in the &dc; file, the only one required is <parameter>MAIN</parameter>, 
      pointing to the XML file that you want to process.
     </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
  <sect2 id="sec.daps.quick.basics.dirstruct">
   <title>Directory Structure</title>
   <para>
   For &dapsacr; to work out of the box, your XML files and images 
   must be organized in a specific structure within your documentation directory.
   <xref linkend="ex.daps.dir.doc"/> shows the required structure including the
   key files for a &dapsacr; documentation project. The directories are printed 
   in bold. You can also create multiple documentation directories for 
   individual documentation projects, but they all need the substructure 
   outlined below.</para>
   <example id="ex.daps.dir.doc">
    <title>Directory Structure</title>
    <screen><replaceable>YOUR_DOC_DIR</replaceable> <co id="co.docdir.base"/>
  |--&dc;* <co id="co.docdir.dc"/>
  |--<emphasis role="bold">images</emphasis> <co id="co.docdir.img"/> 
     |--<emphasis role="bold">src</emphasis> <co id="co.docdir.img.src"/>
        |--<emphasis role="bold">dia</emphasis>
        |--<emphasis role="bold">eps</emphasis>
        |--<emphasis role="bold">fig</emphasis>
        |--<emphasis role="bold">pdf</emphasis>
        |--<emphasis role="bold">png</emphasis>
        |--<emphasis role="bold">svg</emphasis>
  |--<emphasis role="bold">xml</emphasis> <co id="co.docdir.xml"/> 
     |--MAIN*.xml <co id="co.docdir.main"/>    </screen>
   </example>
   <calloutlist>
    <callout arearefs="co.docdir.base">
     <para>
      <quote>Working directory</quote> for the respective documentation project.
     </para>
    </callout>
    <callout arearefs="co.docdir.dc">
     <para>
      &dc; file defining the documentation project. <!--For more information,
      refer to <xref linkend="sec.daps.user.oview.docproject"/>.--></para>
    </callout>
    <callout arearefs="co.docdir.img.src">
     <para>
      Top-level directory for any original images that you want to use in
      the documentation project. Contains subdirectories for images in
      various formats. Any images to be referenced in the XML sources must
      be put in the respective subdirectories.
      <remark>taroth 2012-02-01: add xref to 
     section about using images (how to reference them -> path!)</remark>
     </para>
    </callout>
    <callout arearefs="co.docdir.xml">
     <para>
      Directory holding the XML files for the documentation project. If you
      declare entities in an external file (for example, in
      <filename>entity-decl.ent</filename>), put the entity declaration file
      here, too.</para>
    </callout>
    <callout arearefs="co.docdir.main">
     <para>
      The main file of the documentation project. It contains
      <quote>references</quote> to other books, chapters, appendices, etc.
     </para>
    </callout>
   </calloutlist>
  </sect2>
 </sect1>
 <sect1 id="sec.daps.quick.init">
  <title>A Documentation Project From Scratch</title>
  <para>Use <command>daps-init</command> to set up a new documentation 
  project from scratch. The initialization script automatically creates the key 
  files and directory structure you need to get started with &dapsacr;.
  View the available options with the command  <command>daps-init --help</command>. 
  By default, the script creates a <sgmltag>book</sgmltag>
 as example document.
  </para>
  <procedure id="pro.daps.init">
   <title>Using <command>daps-init</command>
   </title>
   <step>
    <para>Create a directory that you want to use as your documentation directory:</para>
    <screen>$ mkdir <replaceable>DOC_DIR</replaceable>    </screen>
   </step>
   <step>
    <para>Create the default directory structure for &dapsacr; (containing an example 
   <sgmltag>book</sgmltag>):</para>
    <screen>$ daps-init -d <replaceable>PATH_TO_DOC_DIR</replaceable>    </screen>
    <para>With the <option>-r</option> option, you can also set another root 
    element, such as <sgmltag>article</sgmltag>, for example.To create the default 
    directory structure with an <sgmltag>article</sgmltag> example: </para>
    <screen>$ daps-init -d <replaceable>PATH_TO_DOC_DIR</replaceable> -r article</screen>
   </step>
   <step>
    <para>In case the specified directory does not exists, &dapsacr; asks if to
   create it. Proceed by pressing <keycap>y</keycap> or <keycap>n</keycap>.</para>
   </step>
   <step>
    <para>To see what the output of the XML example file looks like, follow the 
   instructions on the screen. For example, the following command specifies the 
   <filename>DC*</filename> file to use and the output format to create:</para>
    <screen>$ daps -d <replaceable>PATH_TO_DOC_DIR</replaceable>/DC-daps-example color-pdf</screen>
    <para>For creation of the PDF, &dapsacr; uses FOP by default 
    (if no other formatter is specified) and applies the default DocBook 
    stylesheets (if no custom layout options are defined). At the end of the 
    transformation process, &dapsacr; shows a message where to find the generated 
    PDF. By default, all contents generated by &dapsacr; is located in the
    <filename>build</filename> subdirectory. It is automatically created 
    within your documentation directory.</para>
   </step>
   <step>
    <para>Check your documentation directory for the new files: The text file 
   <filename>DC-daps-example</filename> is annotated and gives you 
   a rough idea which options can be defined in a &dc; file. 
   For having a look at the XML source code of the <sgmltag>book</sgmltag> or 
   <sgmltag>article</sgmltag>, change to the <filename>xml</filename> subdirectory 
   and open the file <filename>MAIN-DC-daps-example.xml</filename> in a text or 
   XML editor.</para>
   </step>
  </procedure>
  <remark>taroth 2012-03-22: maybe add DC-daps-example with callouts??</remark>
 </sect1>
 <!--taroth 2012-03-22: add short section about editing and basic image handling???-->
 <sect1 id="sec.daps.quick.output">
  <title>Output Formats</title>
  <para>&dapsacr; supports a number of different output formats,
  including <quote>exotic</quote> formats like man pages or ASCII text.
  <!--For an overview of the available output formats, run 
  <command>daps -/-help</command>. The output formats are listed below
  <menuchoice><guimenu>Subcommands</guimenu>
    <guimenu>Generate Books</guimenu>
   </menuchoice>.-->
  </para>
  <para>By default, the DocBook stylesheets are used for generating output formats.
  But &dapsacr; also allows you to customize your output formats in a very flexible way.
  <remark>taroth 2012-03-19: add xref to advanced chapter</remark>
  </para>
  <sect2 id="sec.daps.quick.output.validate">
   <title>Validation</title>
   <para>Generating any output requires that your XML files are well-formed and 
  can be validated. As soon as any output command is executed, &dapsacr; 
  automatically runs a validation check first&mdash;if it fails, &dapsacr; 
  returns the parser errors. They include information about the type of error, 
  the respective file name and the line number where the error occured. 
  In addition, &dapsacr; shows the path to the profiled XML sources and the 
  total number of errors.</para>
   <example>
    <title>Parser Output For Validation Errors</title>
    <screen>daps_user_concept.xml:60: element xref: validity error : 
    IDREF attribute linkend references an unknown ID "itl.daps.user.inst.other.req"
Document /local/svn/daps-svn/daps/doc/build/.profiled/x86-amd64-em64t_osuse_/
MAIN.DAPS.xml does not validate
make: *** [validate] Error 3</screen>
   </example>
  </sect2>
  <sect2 id="sec.daps.quick.output.syntax">
   <title>Basic &dapsacr; Syntax</title>
   <para>Independent of the individual output format you want to create, 
  you need to specify the &dclong; file to use:</para>
   <screen>$ daps -d <replaceable>DC_FILE</replaceable> <replaceable>OUTPUT_FORMAT</replaceable>   </screen>
   <para>For example:</para>
   <screen>$ daps -d DC-daps-quick color-pdf</screen>
   <para>If your current directory is not the documentation directory where the &dc; 
file is located, also specify the (absolute or relative) path to the &dc; file.
For example:</para>
   <screen>$ daps -d /svn/daps/doc/DC-daps-quick color-pdf</screen>
   <para>At the end of the transformation process, &dapsacr; shows a message 
  where to find the generated output.</para>
  </sect2>
  
<sect2 id="sec.daps.quick.output.formats">
  <title>Generating Different Output Formats</title>
  <para>The following table gives an overview of the &dapsacr; subcommands for 
   generating output formats.</para>
  <table>
   <title>&dapsacr; Output Commands and Formats</title>
   <tgroup cols="3">
    <colspec colnum="1" colname="1" colwidth="20*"/>
    <colspec colnum="2" colname="2" colwidth="40*"/>
    <colspec colnum="3" colname="3" colwidth="40*"/>
    <thead>
     <row>
      <entry>
       <para>Subcommand</para>
      </entry>
      <entry>
       <para>Output</para>
      </entry>
      <entry>
       <para>Note</para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>color-pdf</para>
      </entry>
      <entry>
       <para>Creates a color PDF (without any cropmarks). Open the result in a PDF viewer.
        </para>
      </entry>
      <entry>
       <para>Requires an FO formatter. <!--It is also possible to create one PDF 
        containing all the contents of a <sgmltag>set</sgmltag>&mdash; however,
        for large documentation projects you might run into problems with the
        java memory stack.--></para>
      </entry>
     </row>
     <row>
      <entry>
       <para>dist</para>
      </entry>
      <entry>
       <para>Creates a black and white PDF with cropmarks for each chapter.  Open the 
        result in a PDF viewer.</para>
      </entry>
      <entry>
       <para>See color-pdf</para>
      </entry>
     </row>
     <row>
      <entry>
       <para>epub</para>
      </entry>
      <entry>
       <para>Creates an &epub; book. Open the result in an portable e-book reader 
        (or with  a software like Calibre).</para>
      </entry>
      <entry>
       <para>
        <remark>taroth 2012-03-23: check with fs/toms: only books? what about 
        conversion of articles to epub?</remark>
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>html</para>
      </entry>
      <entry>
       <para>Creates a subdirectory containing individual HTML files for 
        all chapters of a book (including also preface, glossary or appendix files).
        They are named according to the ID of the respective root element.  
        Open the generated <filename>index.html</filename> file in a Web browser 
        to view the generated HTML from the starting point (ROOTID of the top-level
        element).</para>
      </entry>
      <entry>
       <para>Images and CSS files are only referenced in the HTML. To copy 
        these files to the same location like the HTML files, use the
        <option>--static</option> option. This is useful for creating 
        distributable HTML builds.</para>
      </entry>
     </row>
     <row>
      <entry>
       <para>html-single</para>
       <para>htmlsingle</para>
      </entry>
      <entry>
       <para>Creates a single HTML file, named after the &dc; file used 
        to create the output. Open the generated <filename>*.html</filename> file
        in a Web browser.</para>
      </entry>
      <entry>
       <para>Single HTML files are more convenient for full text searches. 
        Images and CSS files are only referenced in the HTML. To copy 
        these files to the same location like the HTML files, use the
        <option>--static</option> option. This is useful for creating 
        distributable HTML builds.
        </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>Row 2, Cell 1</para>
      </entry>
      <entry>
       <para>Row 2, Cell 2</para>
      </entry>
      <entry>
       <para>Row 2, Cell 3</para>
      </entry>
     </row>
         
   <!-- 
     jsp                    
     man                    
     pdf                    
     txt, text              
     webhelp                
     wiki                   -->
    </tbody>
   </tgroup>
  </table>
  <remark>taroth 2012-03-23: todo - check with fs/toms: which formats can only be generated
   from books (or the other way round: which formats also allow transformation of 
   articles)?</remark>
 </sect2>
 <sect2 id="sec.daps.quick.output.adv">
   <title>Advanced Output Options</title>
   <para>Instead of always building your complete documentation project 
   (<sgmltag>set</sgmltag>, <sgmltag>book</sgmltag>, or <sgmltag>article</sgmltag>),
   &dapsacr; also allows you to build an individual <sgmltag>chapter</sgmltag> 
   or <sgmltag>part</sgmltag>. If you want the output format to 
   include <sgmltag>remark</sgmltag> elements or to be marked as a 
   <literal>draft</literal> version, you can tell &dapsacr; to do so.</para>
   <sect3 id="sec.daps.quick.output.adv.partial">
    <title>Partial Builds</title>
    <para>The <quote>starting point</quote> of your documentation project is
    specified by the <parameter>ROOTID</parameter> parameter. It usually
    points to the ID of a <sgmltag>set</sgmltag>, <sgmltag>book</sgmltag>, 
    or <sgmltag>article</sgmltag> and is referenced in the &dc; file. 
    Alternatively, specify a ROOTID on the command line by using the 
    <option>--rootid</option> option. This also allows you to build only a part 
    of your documentation project (like an individual chapter or part). To do so, 
    specify the ID of the respective <sgmltag>chapter</sgmltag> or 
    <sgmltag>part</sgmltag> to build.</para>
    <para>If you have set up your working environment with 
    <command>daps-init</command> and an example <sgmltag>book</sgmltag>,
    the following command will build only the chapter about the most commonly 
    used DocBook constructs, without any book title page:</para>
    <screen>$ daps -d DC-daps-example color-pdf --rootid=cha.template.examples</screen>
   </sect3>
   <sect3><title>Output with Remarks or Draft Watermark</title>
   <para>&wip;</para>
   </sect3>
  </sect2>
 </sect1>
   
<!--<sect1>
 <title>Advanced usage of &daps;</title>
 <para>In the following you will learn the advanced usage of &daps; and you will see the explanation of the syntax.</para>
 <screen>$ daps [-/-global-options] "subcommand" [-/-command-options] [arguments]</screen>
 <para>For example:</para>
 <screen>daps -vv<co id="co.daps.vv"/> \
  -e ENV_DATA<co id="co.daps.env"/> \
  html<co id="co.daps.html"/>
  </screen>
 <calloutlist>
  <callout arearefs="co.daps.vv">
   <para>Global Option = -vv (verbose print more debug messages)</para>
  </callout>
  <callout arearefs="co.daps.env">
   <para>Global Option = -e (defines the ENV file)</para>
  </callout>
  <callout arearefs="co.daps.html">
   <para>Subcommand = html (what to create)</para>
  </callout>
 </calloutlist>
 <para>DAPS can be executed with or without options, depending on the project.</para>
 <para>If the directory contains only one ENV file:</para>
 <screen>daps "subcommand"</screen>
 <para>If the directory contains more than one ENV-Data</para>
 <screen>$ daps -e ENV-YOUR-DATA "subcommand"</screen>
 <para>Setup ENV-Data</para>
 <screen>$ source ENV-YOUR-DATA</screen>
 <screen>$ daps "subcommand"</screen>
 <para>Over configuration data <filename>~/.daps/conf</filename>:</para>
 <screen>DAPS_ENV_DEFAULT=ENV_YOUR_DATA</screen>
 <remark>Sascha Manns: Vielleicht FOPTYPE einbauen.</remark>
 <remark>Sonst klasse gemacht :-)</remark>
</sect1>-->
  
   <!-- <sect1>
   <title>Migration of Existing Projects</title>
   <para>You can also use existing projects. SUSEdoc projects are
          easy to transform into a &dapsacr; project. In the bottom you 
          will see something about using your own and existing project.
            By the way SUSEdoc is the predecessor of Daps.</para>
   <para>
    <warning>
     <para>Daps support only DocBook 4.x. Support for DocBook 5.x is planned.</para>
    </warning>
   </para>
   <sect2>
    <title></title>
    <variablelist>
     <varlistentry>
      <term>The Directory Structure to use an existing Project:</term>
      <listitem>
       <screen>
xml/*.ent
xml/*.xml
images/(Type)/data
                        </screen>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>
   <sect2>
    <title>The basenames of Images must be unique different</title>
    <para>The images basenames need to be unique throughout different
        directories. Therefore using names <filename>images/png/AAA.png</filename> and
        <filename>images/svg/AAA.svg</filename> is not an option it should be different. For
        Example: <filename>images/svg/BBB.svg</filename> and <filename>images/png/AAA.png</filename>
    </para>
   </sect2>
   <sect2>
    <title>Adjustment for XML</title>
    <para>Linking of Images:</para>
    <formalpara>
     <title>wrong:</title>
     <para>
      <literal>&lt;imagedata fileref="images/png/foo.png"/></literal>
     </para>
    </formalpara>
    <formalpara>
     <title>correct:</title>
     <para>
      <literal>foo.png</literal>
     </para>
    </formalpara>


    <para>Please take only the name of the image.</para>
    <para>Look at the following to learn to adjust your Header data for XML:</para>
    <screen>&lt;!DOCTYPE ...
[
  &lt;!ENTITY % NOVDOC.DEACTIVATE.IDREF "INCLUDE">
  &lt;!ENTITY % entities SYSTEM "entity-decl.ent">
  %entities;
]></screen>
   </sect2>
   <sect2>
    <title>Migrate SUSEdoc Projects</title>
    <para> See here to migrate your SUSEdoc Project:
                /usr/share/doc/packages/daps/README</para>
   </sect2>
  </sect1>
 -->
   
        <!--
        <title>Terminology</title>
        <para>The following terms are used in this article:</para>
        <variablelist>
            <varlistentry>
                <term>DocBook</term>
                <listitem>
                    <para>DocBook is a semantic markup language for technical documentation
                        published as a DTD.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>DTD</term>
                <listitem>
                    <para>DTD (Document type definition) defines exactly the elements, entities
                        attributes and structure in a XML or HTML document.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Formatting</term>
                <listitem>
                    <para>Is the process of converting a XSL-FO file into PDF with the help of a FO
                        formatter.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>FO Formatter</term>
                <listitem>
                    <para>Renders XSL-FO documents usually into PDF. The output formats depends on
                        the formatter.For example FOP and XEP</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>FOP</term>
                <listitem>
                    <para>FOP (Formatting Objects Processor) converts XSL-FO in to printable
                        formats. </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Transformation</term>
                <listitem>
                    <para>Data transformation converts data from source data format into a
                        destination data for example. Is the process of converting the XML document
                        into a target format, for example HTML. This process uses the XSLT
                        stylesheet with the assistance of an XSLT processor.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>Validation</term>
                <listitem>
                    <para>Validation is a control process for XML documents by using a DTD.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>XSL-FO</term>
                <listitem>
                    <para>XSL-FO or <emphasis>Extensible Stylesheet Language-Formatting
                            Objects</emphasis> is a markup language to generate PDFs with XML
                        documents.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>XSLT</term>
                <listitem>
                    <para>XSLT or <emphasis>Extensible Stylesheet Language for
                            Transformations</emphasis> is a language based on XML and it is used for
                        transformation of XML documents</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>XML</term>
                <listitem>
                    <para>XML (extensible markup language) is a language with rules to encode
                        documents into machine-readable form.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>XOP</term>
                <listitem>
                    <para>XOP (XML-binary Optimized Packaging) is an advice of the W3C to represent
                        the binary data of XML documents. </para>
                </listitem>
            </varlistentry>
        </variablelist>-->

<xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="common_gfdl_i.xml"/>
</article>
