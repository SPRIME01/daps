#!/bin/bash
#
# Script to change DocBook 4 source to version 5
#
#
# Author: Thomas Schraitle <toms@opensuse.org>

__VERSION__="$Id: $"

# Name of this script:
ME="$(basename $0)"

# TODO: Make it configurable by ~/.daps/config or ~/.config/daps/daps.conf
# [[ -s ~/.daps/config ]] && source ~/.daps/config
# [[ -s ~/.config/daps/daps.conf ]] && source ~/.config/daps/daps.conf

# Contains the stylesheet to migrate DocBook 4 -> 5:
MIGRATE_XSLT=${MIGRATE_XSLT:-/usr/share/xml/docbook/stylesheet/upgrade/db4-upgrade.xsl}

# File extension
EXT=${EXT:-.xml}

# Where to write all xsl:message outputs from xsltproc:
XSLTPROCLOG=${XSLTPROCLOG:-/tmp/daps-migrate.log}

# Holds XSLT parameters which is passed to the XSLT processor
declare -A PARAMS
PARAMS=()

# Verbosity
# VERBOSE=0

## Functions
function exit_on_error () {
    echo -e "ERROR: $1" >&2
    exit 1;
}

function dump () {
  if [[ -n "$VERBOSE" ]]; then
     echo "$1"
  fi
  echo "$1" >> $XSLTPROCLOG 2>&1
}

# Help function to preserve readability of the while loop
function usage () {
	echo "
Usage: $ME [OPTIONS] INPUTDIR OUTPUTDIR  

Wrapper script to convert a set of DocBook documents

Options:
  -v, --verbose  Be verbose
  -l LOGFILE, --log=LOGFILE
                 Write all outputs of xsltproc to LOGFILE 
                 (default: $XSLTPROCLOG)
  -s XSLT, --stylesheet=XSLT
                 Use stylesheet for transformation
                 (default: $MIGRATE_XSLT)
  -p, --param=\"XSLPARAM=VALUE\"
                 Defines parameter-value pair for the XSLT processor;
                 can be used more than once
  -h, --help     Print this help
  
Mandatory arguments:
   INPUTDIR      Searches for all XML file in this directory
   OUTPUTDIR     Write all XML file into the OUT directory
"
}

function parse_param() {
  # Syntax: parse_param "PARAMETER_AND_VALUE"
  # Extract parameter and value, syntax $1="param=value"
  local _PARAM=$1
  [[ "$_PARAM" == *"="* ]] || exit_on_error "Option -p muss der Syntax PARAMETER=VALUE folgen"
  p=${_PARAM%=*}
  v=${_PARAM#*=}
  # Define associative array:
  PARAMS["$p"]="$v"      
}

## START
#
# TODO: getopts
export POSIXLY_CORRECT=1
ARGS=$(getopt -o "hvl:s:p:" -l "help,verbose,log:,stylesheet:,param:" -n "$ME" -- "$@")

eval set -- "$ARGS"

while true; do
    case "$1" in

    -v|--verbose)
      VERBOSE=1
      shift
      ;;
    -l|--log)
       XSLTPROCLOG="$2"
       shift 2
       ;;
    -s|--stylesheet)
       MIGRATE_XSLT="$2"
       shift 2
       ;;
    -p|--param)
       parse_param "$2"
       shift 2
       ;;
    -h|--help)
       usage
       exit 1
       shift
       ;;
	--)
	    shift
	    break;;
        *) exit_on_error "Internal error!" ;;
    esac
done

unset POSIXLY_CORRECT

## Check for errors
if [[ $# -eq 0 ]]; then
  usage
  exit 1
fi

[[ $# -lt 2 ]] && exit_on_error "Missing arguments: Need both input and output directory!"
[[ -d $1 ]] || exit_on_error "First argument '$1' is not a directory"
if [[ ! -d $2 ]]; then
  mkdir -p "$2"
fi

[[ -e $XSLTPROCLOG ]] && rm "$XSLTPROCLOG"

dump "** Starting DocBook Transformation **"
dump "** Using stylesheet $MIGRATE_XSLT"
p=""
for i in ${!PARAMS[@]}; do
  p="$i=${PARAMS[$i]} $p"
done
dump "** Parameters: $p"

XMLFILES=$(find $1 -type f -name \*$EXT -printf "%p ")

p=""
for i in ${!PARAMS[@]}; do
  p="--stringparam $i ${PARAMS[$i]} $p"
done

dump "** Commandline: xsltproc --output FILE ${p} $MIGRATE_XSLT XMLINPUT" 

for xmlin in $XMLFILES; do
   base=${xmlin##*/}
   xmlout=$2/$base
   dump "$xmlin -> $xmlout"
   xsltproc --nonet --output "$xmlout" ${p} "$MIGRATE_XSLT" "$xmlin" 2>> $XSLTPROCLOG
   ERRCODE=$?
   dump "--------------------------------------------------"
done

dump "** Finished, see $XSLTPROCLOG for more information **"
dump ""

# EOF