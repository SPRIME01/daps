#!/bin/bash
#First go at a xslt wrapper script for daps
#30.10.12 Kilian Petsch


#
# TODO
# --xinclude
# --nonet
# --novalid (see Ticket 94)
#

ME="$(basename $0)"
# Help function to preserve readability of the while loop
usage () {
	echo "
Usage: daps-xslt [OPTIONS] -o <OUTPUTFILE> -s <STYLESHEET> -f <XMLDOCUMENT> <XSLTPROCESSOR> [PROCESSOR SPECIFIC OPTIONS]
This is a wrapper script for daps to define which xsltprocessor it should use.
		
XSLT-STYLESHEET:
-s,--stylesheet: Define the XSLT-stylesheet used,
you may only define '-s' to use the default stylesheet
	 
XML-DOCUMENT:
-f,--file Define the XML-Document that should be used
The above options are mandatory and need to be used.

XSLTPROCESSOR:
Define your xsltprocessor (xsltproc or saxon) and options specific to it.
See man saxon or man xsltproc for these options 
						
OUTPUT:
-o,--output Create or write to an existing document
		
The following options are optional:
-x,--xinclude: do XInclude processing on document input
--param name value : pass a (parameter,value) pair
--stringparam name value : pass a (parameter, UTF8 string value) pair
--nonet: refuse to fetch DTDs or entities over network
--novalid: skip the Dtd loading phase
--debug: Activate a debug mode which outputs all variable values used
-h,--help: Display this help" 
	
	
}
#function to call different processors and check for nonvalid options
processor () {
	if [[ xsltproc = $PROC ]]; then
		$PROC $REST $XIN $NONET $NOVALID ${PARAM} ${STRINGPARAM} $OP $STYLE $DOC
	elif [[ saxon = $PROC && -n $NONET || -n $NOVAL ]]; then
		echo "Error nonet and noval are xsltproc-only options"
		exit 3
	else
                # saxon via a wrapperscript which enables XInclude,
                # XML catalog etc.
		run-saxon $REST $OP $DOC $STYLE ${SPARAM} ${SSTRINGPARAM}  
	fi
}	
# debug funtion to check if all variables are correct
debug() {
	if [[ -n $DEBUG ]]; then
		echo $PARAM $SPARAM
		echo $STRINGPARAM $SSTRINGPARAM
		echo "Sourcedocument: $DOC"
		echo "Stylesheet $STYLE"
		echo "Output file $OP"
		echo $REST;
	fi
}    
	
run-saxon() {
	# Used to enable XIncludes
	XINCLUDEFLAG="-Dorg.apache.xerces.xni.parser.XMLParserConfiguration=org.apache.xerces.parsers.XIncludeParserConfiguration"
	# Used to enable XML Catalog configuration
	# CATALOGPROP="CatalogManager.properties"
	# The DocBook JAR file for extension functions
	SAXON_JAR="${DBXSLT}/extensions/saxon65.jar"
	# We need additional JAR files (mostly due to XInclude resolution)
	export ADDITIONAL_JARS="xml-commons-resolver12.jar xerces-j2.jar xerces-j2-xml-apis.jar"
	# Use special options to switch XML parser to Xerces:
	ADDITIONAL_FLAGS="-Djavax.xml.parsers.DocumentBuilderFactory=\
org.apache.xerces.jaxp.DocumentBuilderFactoryImpl \
	-Djavax.xml.parsers.SAXParserFactory=\
org.apache.xerces.jaxp.SAXParserFactoryImpl ${XINCLUDEFLAG} \
	-Dxml.catalog.files=/usr/share/xml/docbook/stylesheet/nwalsh/current/catalog.xml;/local/doc/daps/etc/catalog.xml;/etc/xml/catalog \
	"
	if [[ -n $DEBUG ]]; then 
		ADDITIONAL_FLAGS+="-Dxml.catalog.verbosity=3"
	fi
	export ADDITIONAL_FLAGS
	# Extend CLASSPATH variable
	 export CLASSPATH="${CATALOGPROP}:${SAXON_JAR}"

	# Check OS version because of different saxon script names in different versions
	OS=$(cat /etc/SuSE-release | grep "VERSION" | awk {'print $3'})
	if [[ 12.2 = $OS ]]; then
	        saxon6 $@
	else		         
		saxon $@
	fi
}


export POSIXLY_CORRECT=1

ARGS=`getopt -o "hxno:vs:f:" -l "help,xinclude,param:,stringparam:,nonet,output:,novalid, 
stylesheet:,file:,debug,nonet,novalid" -n "$ME" -- "$@"` 

eval set -- "$ARGS"
while true; do
	case "$1" in
		-h|--help)
			usage
			exit 0;;
		-x|--xinclude)
			XIN="--xinclude" #only needed in xsltproc
			shift;;
		--param) 
			if [[ $2 =~ \= ]]; then #Test for equal sign
                            	PARAM="${2/=/ }" #Removing equal sign for xsltproc
                    		PARAM="$1 $PARAM "
				SPARAM+="$2 "
			else
				echo "Error. --param requires 'KEY=VALUE' as options"
				exit 2;
			fi
			shift 2;;
		--stringparam)
			if [[ $2 =~ \= ]]; then #Test for equal sign 
                            	STRINGPARAM="${2/=/ }" #Removing equal sign for xsltproc
                           	STRINGPARAM="$1 $STRINGPARAM "
				SSTRINGPARAM+="$2 "
			else
				echo "Error. --stringparam requires 'KEY=VALUE' as options"
				exit 2;
			fi
			shift 2;;
		-s|--stylesheet)
			STYLE="$2"
			shift 2
			;;
		-f|--file) #option to add the file to prevent options from using filename as their parameter
			DOC="$2"
			shift 2;;
		-o|--output)
			OP="-o $2"
			shift 2;;
		--debug)
			DEBUG=1
			shift;;
		--nonet)
			NONET="--nonet"	
			shift;;
		--novalid)
			NOVALID=--novalid
			shift;;
		--)
			shift ;
			break;; 
	esac
done
unset POSIXLY_CORRECT
if [[ xsltproc = $1 || saxon = $1 ]]; then #checking for valid processor
	PROC=$1
	shift;
else
	echo "Error nonvalid processor"
	exit 1;
fi
REST="$@"
debug #calling debug funtion
#Check if all mandatory options are set
if [[ -z "$PROC" || -z "$STYLE" || -z "$DOC" ]]; then
	echo "Error necessary argument missing! Make sure you have all necessary components defined"
	exit 6;
else
	[[ -n $DEBUG ]] && echo $PROC $STYLE
fi 
processor  #Calling processor function
	exit 0;
