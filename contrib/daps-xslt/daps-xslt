#!/bin/bash
#First go at a xslt wrapper script for daps
#30.10.12 Kilian Petsch
#TODO:-add options for xsltproc
#     -add options for saxon
#     -remove unnecessary echo or make them silent (verbose option)
#     -update help with new options
#     -test stringparam and param with saxon

ME=$(basename $0)
# Help function to preserve readability of the while loop
usage () {
	echo "
	Usage: daps-xslt [OPTIONS] -sStylesheet -oOUTPUTFILE -fXMLDOKUMENT
	This is a wrapper script for daps to define which xsltprocessor it should use.
	
	XSLT-PROCESSOR (Define one):
	-X,--xsltproc: Use xsltproc
	-S,--saxon: Use saxon

	XSLT-STYLESHEET:
	-s,--stylesheet: Define the XSLT-stylesheet used,
	you may only define '-s' to use the default stylesheet
	 
	XML-DOCUMENT:
	-f,--file Define the XML-Document that should be used

	The above options are mandatory and need to be used.
	
	The following options are optional:
	-x,--xinclude: do XInclude processing on document input
	-p,--param: Define a value for the stringparameter
	-n,--nonet: refuse to fetch DTDs or entities over network (only xsltproc)
	-v,--novalid: skip the Dtd loading phase (only xsltproc)
	-h,--help: Display this help " 
	
}
#function to call different processors and check for nonvalid options
processor () {
	if [ xsltproc = $PROC ]; then
		$PROC $NONET $XIN $NOVAL ${PARAM} ${STRINGPARAM} $OP $STYLE $DOC
	elif [ saxon = $PROC ] && [[ -n $NONET || -n $NOVAL ]]; then
		echo "Error nonet and noval are xsltproc-only options"
		exit 3
	else  #saxon via a wrapperscript which enables XInclude, XML catalog etc.
		./daps-saxon $OP $DOC $STYLE ${SPARAM} ${SSTRINGPARAN}  
	fi
}	
		


ARGS=`getopt -o "hXSxno:vs:f:" -l "help,xsltproc,saxon,xinclude,param:,stringparam:,nonet,output:,novalid, 
stylesheet:file:" -n "$ME" -- "$@"` 

eval set -- "$ARGS"
while true; do
	case "$1" in
		-h|--help)
			usage
			exit 0;;
		-X|--xsltproc)
			echo "Using xsltproc"
			PROC=xsltproc
			shift;;
		-S|--saxon)
			echo "Using saxon"
			PROC=saxon
			shift;;
		-x|--xinclude)
			XIN="--xinclude" #only needed in xsltproc
			shift;;
		--param) #Implementation missing, no value is not detected next argument ist taken instead
			if [[ "$2" =~ \= ]]; then
                            PARAM=${2/=/ }
                            PARAM="$1 $PARAM "
#				PARAM+="$1 $2 "
				SPARAM+="$2 "
				echo ${PARAM}
			else
				echo "Error. --param requires 'KEY=VALUE' as options"
				exit 2;
			fi
			shift 2;;
		--stringparam)
			if [[ "$2" =~ \= ]]; then #Test auf Leerzeichen
				 # --stringparam $2 hinten ans array dranh√§ngen, mit doublequotes
                            STRINGPARAM=${2/=/ }
                            STRINGPARAM="$1 $PARAM "
#				STRINGPARAM+="$1 $2 "
				SSTRINGPARAM+="$2 "
				echo ${STRINGPARAM}
			else
				echo "Error. --stringparam requires 'KEY=VALUE' as options"
				exit 2;
			fi
			shift 2;;
		-n|--nonet) #only xsltproc
			NONET="--nonet"
			shift;;
		-v|--novalid) #only xsltproc
			NOVAL="--novalid"
			shift;;  
		-s|--stylesheet)
			echo "Stylesheet: $2"
			STYLE=$2
			shift 2
			;;
		-f|--file) #option to add the file to prevent options from using filename as their parameter
			DOC=$2
			echo "Using file" $DOC
			shift 2;;
		-o|--output)
			echo "Generating output file" $2
			OP="-o $2"
			shift 2;;
	#	-r|--repeat) #xsltproc only
			
				
		--)
			shift ;
			break;; 
	esac
done 
#Now there should be now leftover parameters
#Check if all mandatory components are given
if [ -z "$PROC" ] || [ -z "$STYLE" ] || [ -z "$DOC" ]; then
	echo "Error necessary argument missing! Make sure you have all necessary components defined"
	exit 6;
else
	echo $PROC $STYLE
fi 
processor  #Calling processor function
	exit 0;
